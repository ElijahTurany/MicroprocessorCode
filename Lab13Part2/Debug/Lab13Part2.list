
Lab13Part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000764  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008e8  080008e8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008e8  080008e8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080008e8  080008e8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008e8  080008e8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008e8  080008e8  000108e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008ec  080008ec  000108ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080008f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          000000a0  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001109  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000530  00000000  00000000  00021184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000128  00000000  00000000  000216b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d3  00000000  00000000  000217e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000062f  00000000  00000000  000218b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001a7c  00000000  00000000  00021ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a23f7  00000000  00000000  0002395e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000390  00000000  00000000  000c5d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000c60e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000008 	.word	0x20000008
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080008d0 	.word	0x080008d0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	080008d0 	.word	0x080008d0

080001c4 <circular_buffer_init>:
circular_buffer * _rx_buffer2;
circular_buffer * _tx_buffer2;

/*initialize buffer */
void circular_buffer_init(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	/*Initialize buffer with de-referencing pointers (&)*/
	_rx_buffer1 = &rx_buffer1;        //missing code here
 80001c8:	4b0e      	ldr	r3, [pc, #56]	; (8000204 <circular_buffer_init+0x40>)
 80001ca:	4a0f      	ldr	r2, [pc, #60]	; (8000208 <circular_buffer_init+0x44>)
 80001cc:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;         //missing code here
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <circular_buffer_init+0x48>)
 80001d0:	4a0f      	ldr	r2, [pc, #60]	; (8000210 <circular_buffer_init+0x4c>)
 80001d2:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <circular_buffer_init+0x50>)
 80001d6:	4a10      	ldr	r2, [pc, #64]	; (8000218 <circular_buffer_init+0x54>)
 80001d8:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <circular_buffer_init+0x58>)
 80001dc:	4a10      	ldr	r2, [pc, #64]	; (8000220 <circular_buffer_init+0x5c>)
 80001de:	601a      	str	r2, [r3, #0]

	/*Initialize UART RX Not Empty Interrupt for USART1 and USART2*/
	USART1->CR1 |= CR1_RXNEIE;                                   //missing code here
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <circular_buffer_init+0x60>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <circular_buffer_init+0x60>)
 80001e6:	f043 0320 	orr.w	r3, r3, #32
 80001ea:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= CR1_RXNEIE;									//missing code here
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <circular_buffer_init+0x64>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <circular_buffer_init+0x64>)
 80001f2:	f043 0320 	orr.w	r3, r3, #32
 80001f6:	6013      	str	r3, [r2, #0]
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	20000098 	.word	0x20000098
 8000208:	20000060 	.word	0x20000060
 800020c:	2000009c 	.word	0x2000009c
 8000210:	2000007c 	.word	0x2000007c
 8000214:	200000a0 	.word	0x200000a0
 8000218:	20000028 	.word	0x20000028
 800021c:	200000a4 	.word	0x200000a4
 8000220:	20000044 	.word	0x20000044
 8000224:	40013800 	.word	0x40013800
 8000228:	40004400 	.word	0x40004400

0800022c <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
	int loc =(uint32_t) (buffer->head + 1)%UART_BUFFER_SIZE;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	1c59      	adds	r1, r3, #1
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <buff_store_char+0x4c>)
 8000240:	fba3 2301 	umull	r2, r3, r3, r1
 8000244:	091a      	lsrs	r2, r3, #4
 8000246:	4613      	mov	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	1aca      	subs	r2, r1, r3
 8000250:	60fa      	str	r2, [r7, #12]
	/*Check if no overflow will occur*/
	if( loc != buffer->tail)
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	699a      	ldr	r2, [r3, #24]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	429a      	cmp	r2, r3
 800025a:	d007      	beq.n	800026c <buff_store_char+0x40>
	{
		/*Store character*/
		buffer->buffer[buffer->head] = c;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	683a      	ldr	r2, [r7, #0]
 8000262:	79f9      	ldrb	r1, [r7, #7]
 8000264:	54d1      	strb	r1, [r2, r3]

		/*Update head*/
		buffer->head = loc;
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	615a      	str	r2, [r3, #20]
	}
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	cccccccd 	.word	0xcccccccd

0800027c <buffer_write>:
		return -1;
	}
}

void buffer_write(unsigned char c, portType uart)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
	if (uart == bluetooth_port)
 800028c:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <buffer_write+0xc8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	429a      	cmp	r2, r3
 8000294:	d125      	bne.n	80002e2 <buffer_write+0x66>
	{
		int loc = (uint32_t) (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000296:	4b2c      	ldr	r3, [pc, #176]	; (8000348 <buffer_write+0xcc>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	1c59      	adds	r1, r3, #1
 800029e:	4b2b      	ldr	r3, [pc, #172]	; (800034c <buffer_write+0xd0>)
 80002a0:	fba3 2301 	umull	r2, r3, r3, r1
 80002a4:	091a      	lsrs	r2, r3, #4
 80002a6:	4613      	mov	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4413      	add	r3, r2
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	1aca      	subs	r2, r1, r3
 80002b0:	60fa      	str	r2, [r7, #12]
		while(loc == _tx_buffer1->tail){}
 80002b2:	bf00      	nop
 80002b4:	4b24      	ldr	r3, [pc, #144]	; (8000348 <buffer_write+0xcc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	699a      	ldr	r2, [r3, #24]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d0f9      	beq.n	80002b4 <buffer_write+0x38>
		_tx_buffer1->buffer[_tx_buffer1->head] = c;
 80002c0:	4b21      	ldr	r3, [pc, #132]	; (8000348 <buffer_write+0xcc>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b20      	ldr	r3, [pc, #128]	; (8000348 <buffer_write+0xcc>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	79f9      	ldrb	r1, [r7, #7]
 80002cc:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = loc;
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <buffer_write+0xcc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	615a      	str	r2, [r3, #20]

		USART1->CR1 |= CR1_TXEIE;
 80002d6:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <buffer_write+0xd4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <buffer_write+0xd4>)
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	6013      	str	r3, [r2, #0]
	}

	if (uart == debug_port)
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <buffer_write+0xd8>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d125      	bne.n	8000338 <buffer_write+0xbc>
		{
			int loc =(uint32_t)(_tx_buffer1->head + 1) % UART_BUFFER_SIZE;  //error here with a wrong write buffer position
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <buffer_write+0xcc>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	1c59      	adds	r1, r3, #1
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <buffer_write+0xd0>)
 80002f6:	fba3 2301 	umull	r2, r3, r3, r1
 80002fa:	091a      	lsrs	r2, r3, #4
 80002fc:	4613      	mov	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	1aca      	subs	r2, r1, r3
 8000306:	60ba      	str	r2, [r7, #8]
			while(loc == _tx_buffer2->tail){}
 8000308:	bf00      	nop
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <buffer_write+0xdc>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	699a      	ldr	r2, [r3, #24]
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	429a      	cmp	r2, r3
 8000314:	d0f9      	beq.n	800030a <buffer_write+0x8e>
			_tx_buffer2->buffer[_tx_buffer2->head] =c;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <buffer_write+0xdc>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <buffer_write+0xdc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	79f9      	ldrb	r1, [r7, #7]
 8000322:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = loc;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <buffer_write+0xdc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	68ba      	ldr	r2, [r7, #8]
 800032a:	615a      	str	r2, [r3, #20]

			/*Enable UART Transmit Interrupt*/
			USART2->CR1 |=CR1_TXEIE;
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <buffer_write+0xe0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <buffer_write+0xe0>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	6013      	str	r3, [r2, #0]
		}
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	20000000 	.word	0x20000000
 8000348:	2000009c 	.word	0x2000009c
 800034c:	cccccccd 	.word	0xcccccccd
 8000350:	40013800 	.word	0x40013800
 8000354:	20000024 	.word	0x20000024
 8000358:	200000a4 	.word	0x200000a4
 800035c:	40004400 	.word	0x40004400

08000360 <buffer_send_string>:
		}
	}
}

void buffer_send_string(const char *s, portType uart)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	70fb      	strb	r3, [r7, #3]
	while(*s != '\0')
 800036c:	e008      	b.n	8000380 <buffer_send_string+0x20>
	{
		buffer_write(*s++, uart);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	78fa      	ldrb	r2, [r7, #3]
 8000378:	4611      	mov	r1, r2
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff7e 	bl	800027c <buffer_write>
	while(*s != '\0')
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1f2      	bne.n	800036e <buffer_send_string+0xe>
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <bluetooth_uart_callback>:
 * and receive operations instead of polling mode; and are executed
 for every character being received/transmitted;
 * Therefore, the interrupts are executed in a callback function respectively */

void bluetooth_uart_callback(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	/*Check if RXNE (RX not empty)is raised and if RXNEIE is enabled*/
	if(((USART1->ISR & ISR_RXNE) !=0 ) && ((USART1->CR1 & CR1_RXNEIE) !=0))
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <bluetooth_uart_callback+0x9c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 0320 	and.w	r3, r3, #32
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d010      	beq.n	80003c8 <bluetooth_uart_callback+0x34>
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <bluetooth_uart_callback+0x9c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f003 0320 	and.w	r3, r3, #32
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00a      	beq.n	80003c8 <bluetooth_uart_callback+0x34>
		{
		  	  unsigned char c = USART1 ->RDR;
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <bluetooth_uart_callback+0x9c>)
 80003b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	71fb      	strb	r3, [r7, #7]
		  	  buff_store_char(c, _rx_buffer1);
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <bluetooth_uart_callback+0xa0>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4611      	mov	r1, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff32 	bl	800022c <buff_store_char>
		}

	/*Check if TXEIE is enabled*/
	if(((USART1->ISR & ISR_TXE) !=0 ) && ((USART1->CR1 & CR1_TXEIE) !=0))
 80003c8:	4b19      	ldr	r3, [pc, #100]	; (8000430 <bluetooth_uart_callback+0x9c>)
 80003ca:	69db      	ldr	r3, [r3, #28]
 80003cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d029      	beq.n	8000428 <bluetooth_uart_callback+0x94>
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <bluetooth_uart_callback+0x9c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d023      	beq.n	8000428 <bluetooth_uart_callback+0x94>
	{
		if(tx_buffer1.head == tx_buffer1.tail)
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <bluetooth_uart_callback+0xa4>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <bluetooth_uart_callback+0xa4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d106      	bne.n	80003fa <bluetooth_uart_callback+0x66>
		{
			  USART1->CR1 &=~ CR1_TXEIE;
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <bluetooth_uart_callback+0x9c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <bluetooth_uart_callback+0x9c>)
 80003f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f6:	6013      	str	r3, [r2, #0]
	    	tx_buffer1.tail = (tx_buffer1.tail + 1)%UART_BUFFER_SIZE;
	    	/*Transmit character*/
	    	USART1-> TDR = c;
		}
	}
}
 80003f8:	e016      	b.n	8000428 <bluetooth_uart_callback+0x94>
	    	unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <bluetooth_uart_callback+0xa4>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <bluetooth_uart_callback+0xa4>)
 8000400:	5cd3      	ldrb	r3, [r2, r3]
 8000402:	71bb      	strb	r3, [r7, #6]
	    	tx_buffer1.tail = (tx_buffer1.tail + 1)%UART_BUFFER_SIZE;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <bluetooth_uart_callback+0xa4>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	1c59      	adds	r1, r3, #1
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <bluetooth_uart_callback+0xa8>)
 800040c:	fba3 2301 	umull	r2, r3, r3, r1
 8000410:	091a      	lsrs	r2, r3, #4
 8000412:	4613      	mov	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	1aca      	subs	r2, r1, r3
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <bluetooth_uart_callback+0xa4>)
 800041e:	619a      	str	r2, [r3, #24]
	    	USART1-> TDR = c;
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <bluetooth_uart_callback+0x9c>)
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	b292      	uxth	r2, r2
 8000426:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40013800 	.word	0x40013800
 8000434:	20000098 	.word	0x20000098
 8000438:	2000007c 	.word	0x2000007c
 800043c:	cccccccd 	.word	0xcccccccd

08000440 <debug_uart_callback>:

void debug_uart_callback(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	/*Check if RXNE (RX not empty)is raised and if RXNEIE is enabled*/
	if(((USART2->ISR & ISR_RXNE) !=0 ) && ((USART2->CR1 & CR1_RXNEIE) !=0))
 8000446:	4b25      	ldr	r3, [pc, #148]	; (80004dc <debug_uart_callback+0x9c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 0320 	and.w	r3, r3, #32
 800044e:	2b00      	cmp	r3, #0
 8000450:	d010      	beq.n	8000474 <debug_uart_callback+0x34>
 8000452:	4b22      	ldr	r3, [pc, #136]	; (80004dc <debug_uart_callback+0x9c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f003 0320 	and.w	r3, r3, #32
 800045a:	2b00      	cmp	r3, #0
 800045c:	d00a      	beq.n	8000474 <debug_uart_callback+0x34>
		{
		  	  unsigned char c = USART2 ->RDR;
 800045e:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <debug_uart_callback+0x9c>)
 8000460:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000462:	b29b      	uxth	r3, r3
 8000464:	71fb      	strb	r3, [r7, #7]
		  	  buff_store_char(c, _rx_buffer2);
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <debug_uart_callback+0xa0>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff fedc 	bl	800022c <buff_store_char>
		}

	/*Check if TXEIE is enabled*/
	if(((USART2->ISR & ISR_TXE) !=0 ) && ((USART2->CR1 & CR1_TXEIE) !=0))
 8000474:	4b19      	ldr	r3, [pc, #100]	; (80004dc <debug_uart_callback+0x9c>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047c:	2b00      	cmp	r3, #0
 800047e:	d029      	beq.n	80004d4 <debug_uart_callback+0x94>
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <debug_uart_callback+0x9c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d023      	beq.n	80004d4 <debug_uart_callback+0x94>
	{
		if(tx_buffer2.head == tx_buffer2.tail)
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <debug_uart_callback+0xa4>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <debug_uart_callback+0xa4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	429a      	cmp	r2, r3
 8000496:	d106      	bne.n	80004a6 <debug_uart_callback+0x66>
		{
			  USART2->CR1 &=~ CR1_TXEIE;
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <debug_uart_callback+0x9c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <debug_uart_callback+0x9c>)
 800049e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004a2:	6013      	str	r3, [r2, #0]
	    	tx_buffer2.tail = (tx_buffer2.tail + 1)%UART_BUFFER_SIZE;
	    	/*Transmit character*/
	    	USART2-> TDR = c;
		}
	}
}
 80004a4:	e016      	b.n	80004d4 <debug_uart_callback+0x94>
	    	unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <debug_uart_callback+0xa4>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <debug_uart_callback+0xa4>)
 80004ac:	5cd3      	ldrb	r3, [r2, r3]
 80004ae:	71bb      	strb	r3, [r7, #6]
	    	tx_buffer2.tail = (tx_buffer2.tail + 1)%UART_BUFFER_SIZE;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <debug_uart_callback+0xa4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	1c59      	adds	r1, r3, #1
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <debug_uart_callback+0xa8>)
 80004b8:	fba3 2301 	umull	r2, r3, r3, r1
 80004bc:	091a      	lsrs	r2, r3, #4
 80004be:	4613      	mov	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	1aca      	subs	r2, r1, r3
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <debug_uart_callback+0xa4>)
 80004ca:	619a      	str	r2, [r3, #24]
	    	USART2-> TDR = c;
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <debug_uart_callback+0x9c>)
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	b292      	uxth	r2, r2
 80004d2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40004400 	.word	0x40004400
 80004e0:	200000a0 	.word	0x200000a0
 80004e4:	20000044 	.word	0x20000044
 80004e8:	cccccccd 	.word	0xcccccccd

080004ec <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	bluetooth_uart_callback();
 80004f0:	f7ff ff50 	bl	8000394 <bluetooth_uart_callback>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	debug_uart_callback();
 80004fc:	f7ff ffa0 	bl	8000440 <debug_uart_callback>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	db0b      	blt.n	800052e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	f003 021f 	and.w	r2, r3, #31
 800051c:	4907      	ldr	r1, [pc, #28]	; (800053c <__NVIC_EnableIRQ+0x38>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	095b      	lsrs	r3, r3, #5
 8000524:	2001      	movs	r0, #1
 8000526:	fa00 f202 	lsl.w	r2, r0, r2
 800052a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000e100 	.word	0xe000e100

08000540 <debug_uart_init>:
	uart_write(ch);
	return ch;
}

void debug_uart_init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	//enable clock access to GPIOA
	RCC->AHB2ENR |= GPIOAEN;
 8000544:	4b44      	ldr	r3, [pc, #272]	; (8000658 <debug_uart_init+0x118>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000548:	4a43      	ldr	r2, [pc, #268]	; (8000658 <debug_uart_init+0x118>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	64d3      	str	r3, [r2, #76]	; 0x4c

	//set the mode of PA2 (USART2_TX) to AF mode
	GPIOA->MODER &=~(1U<<4);
 8000550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800055a:	f023 0310 	bic.w	r3, r3, #16
 800055e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056a:	f043 0320 	orr.w	r3, r3, #32
 800056e:	6013      	str	r3, [r2, #0]

	//set the mode of PA3 (USART2_RX) to AF mode
	GPIOA->MODER &=~ (1U<<6);
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800057e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058e:	6013      	str	r3, [r2, #0]
	//Input(00), Output (01), AlterFUnc(10), Analog(11)
	//set PA2 = USART2_TX and PA.3 = USART2_RX

	//Set AF Type to AF& (UART2_TX) for PA2
	//Set AFRL to AFRO[0] instead
	GPIOA->AFR[0] |=(1U<<8);
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	6a1b      	ldr	r3, [r3, #32]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a4:	6a1b      	ldr	r3, [r3, #32]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80005b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80005c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c4:	6a1b      	ldr	r3, [r3, #32]
 80005c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005ce:	6213      	str	r3, [r2, #32]

	//Set AF Type to AF& (UART2_TX) for PA2
	//Set AFRL to AFRO[0] instead
	GPIOA->AFR[0] |=(1U<<12);
 80005d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d4:	6a1b      	ldr	r3, [r3, #32]
 80005d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 80005e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e4:	6a1b      	ldr	r3, [r3, #32]
 80005e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 80005f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f4:	6a1b      	ldr	r3, [r3, #32]
 80005f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800060e:	6213      	str	r3, [r2, #32]

	//Enable clock access for UART2 in APB1ENR register
	RCC->APB1ENR1 |= UART2EN;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <debug_uart_init+0x118>)
 8000612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000614:	4a10      	ldr	r2, [pc, #64]	; (8000658 <debug_uart_init+0x118>)
 8000616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061a:	6593      	str	r3, [r2, #88]	; 0x58
	//RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; //Enable USART_2

	//Disable UART Module (USART Enable)
	USART2->CR1 &=~CR1_UE;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <debug_uart_init+0x11c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <debug_uart_init+0x11c>)
 8000622:	f023 0301 	bic.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]

	//configure UART baud rate
	//uart_set_baudrate(APB1_CLK, DBG_UART_BAUTRDADE;
	USART2-> BRR = compute_uart_bd(APB1_CLK, DBG_UART_BAUDRATE);
 8000628:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <debug_uart_init+0x120>)
 800062e:	f000 f8ab 	bl	8000788 <compute_uart_bd>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <debug_uart_init+0x11c>)
 8000638:	60da      	str	r2, [r3, #12]

	//configure transfer direction (Transmit Enable)
	USART2->CR1 = (CR1_TE | CR1_RE);
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <debug_uart_init+0x11c>)
 800063c:	220c      	movs	r2, #12
 800063e:	601a      	str	r2, [r3, #0]

	//enable interrupt in the NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 8000640:	2026      	movs	r0, #38	; 0x26
 8000642:	f7ff ff5f 	bl	8000504 <__NVIC_EnableIRQ>

	//Enable uart moduel (USART Enable)
	USART2->CR1 |= CR1_UE;
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <debug_uart_init+0x11c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <debug_uart_init+0x11c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6013      	str	r3, [r2, #0]
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	40004400 	.word	0x40004400
 8000660:	003d0900 	.word	0x003d0900

08000664 <bluetooth_uart_init>:



void bluetooth_uart_init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	//enable clock access to GPIOA
	RCC->AHB2ENR |= GPIOAEN;
 8000668:	4b44      	ldr	r3, [pc, #272]	; (800077c <bluetooth_uart_init+0x118>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066c:	4a43      	ldr	r2, [pc, #268]	; (800077c <bluetooth_uart_init+0x118>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	64d3      	str	r3, [r2, #76]	; 0x4c

	//set the mode of PA0 (USART1_TX) to AF mode
	GPIOA->MODER &=~(1U<<18);
 8000674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800067e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000682:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 8000684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000692:	6013      	str	r3, [r2, #0]

	//Set the mode of PA10 (USART1_RX) to AF mode
	GPIOA->MODER &=~(1U<<20);
 8000694:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<21);
 80006a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b2:	6013      	str	r3, [r2, #0]

	//Set AF type to AF7*UART1_TX) for PA9
	//Set AFRH to AFR[1] instead
	GPIOA->AFR[1] |=(1U<<4);
 80006b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<5);
 80006c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<6);
 80006d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<7);
 80006e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006f2:	6253      	str	r3, [r2, #36]	; 0x24

	//Set AF type to AF7*UART1_RX) for PA10
	//Set AFRH to AFR[1] instead
	GPIOA->AFR[1] |=(1U<<8);
 80006f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000702:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<9);
 8000704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800070e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000712:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=(1U<<10);
 8000714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000722:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &=~(1U<<11);
 8000724:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800072e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000732:	6253      	str	r3, [r2, #36]	; 0x24

	//Enable clock access for UART1 in APB2ENR regiester
	RCC->APB2ENR |= UART1EN;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <bluetooth_uart_init+0x118>)
 8000736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <bluetooth_uart_init+0x118>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073e:	6613      	str	r3, [r2, #96]	; 0x60

	//Disable UART Moudle (USART1)
	USART1->CR1 &=~CR1_UE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <bluetooth_uart_init+0x11c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <bluetooth_uart_init+0x11c>)
 8000746:	f023 0301 	bic.w	r3, r3, #1
 800074a:	6013      	str	r3, [r2, #0]

	//configure uart baud rate
	USART1-> BRR = compute_uart_bd(APB1_CLK, DBG_UART_BAUDRATE);
 800074c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <bluetooth_uart_init+0x120>)
 8000752:	f000 f819 	bl	8000788 <compute_uart_bd>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <bluetooth_uart_init+0x11c>)
 800075c:	60da      	str	r2, [r3, #12]

	//configure transfer direction (Transmit enable)
	USART1->CR1 = (CR1_TE | CR1_RE);
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <bluetooth_uart_init+0x11c>)
 8000760:	220c      	movs	r2, #12
 8000762:	601a      	str	r2, [r3, #0]

	//Enable interrupt in the NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 8000764:	2025      	movs	r0, #37	; 0x25
 8000766:	f7ff fecd 	bl	8000504 <__NVIC_EnableIRQ>

	//Enable UART MOdule (USART Enable)
	USART1->CR1 |= CR1_UE;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <bluetooth_uart_init+0x11c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <bluetooth_uart_init+0x11c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000
 8000780:	40013800 	.word	0x40013800
 8000784:	003d0900 	.word	0x003d0900

08000788 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	085a      	lsrs	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	441a      	add	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <systick_delay_ms>:

void systick_delay_ms(uint32_t delay)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	//Reload systick with number of clocks per millisecond
	SysTick->LOAD = SYSTICK_LOAD_VAL/1000;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <systick_delay_ms+0x50>)
 80007ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80007be:	605a      	str	r2, [r3, #4]

	//clear systick value register
	SysTick->VAL = 0;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <systick_delay_ms+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]

	//enable systick and select to use an internal clock source
	SysTick->CTRL = CTRL_CLKSRC | CTRL_ENABLE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <systick_delay_ms+0x50>)
 80007c8:	2205      	movs	r2, #5
 80007ca:	601a      	str	r2, [r3, #0]

	for ( int i = 0; i < delay; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e009      	b.n	80007e6 <systick_delay_ms+0x36>
	{
		//wait until the COUNTFLAG is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) ==0){}
 80007d2:	bf00      	nop
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <systick_delay_ms+0x50>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f9      	beq.n	80007d4 <systick_delay_ms+0x24>
	for ( int i = 0; i < delay; i++)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d8f1      	bhi.n	80007d2 <systick_delay_ms+0x22>
	}

	SysTick->CTRL = 0;
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <systick_delay_ms+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e010 	.word	0xe000e010

08000804 <main>:
extern portType bluetooth_port;

char data_buff[TX_BUFF_SIZE] = "Hi \n\r";

int main()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	debug_uart_init();
 8000808:	f7ff fe9a 	bl	8000540 <debug_uart_init>
	bluetooth_uart_init();
 800080c:	f7ff ff2a 	bl	8000664 <bluetooth_uart_init>
	circular_buffer_init();
 8000810:	f7ff fcd8 	bl	80001c4 <circular_buffer_init>

	while(1)
	{
		buffer_send_string(data_buff, bluetooth_port);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <main+0x28>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <main+0x2c>)
 800081c:	f7ff fda0 	bl	8000360 <buffer_send_string>
		systick_delay_ms(1000);
 8000820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000824:	f7ff ffc4 	bl	80007b0 <systick_delay_ms>
		buffer_send_string(data_buff, bluetooth_port);
 8000828:	e7f4      	b.n	8000814 <main+0x10>
 800082a:	bf00      	nop
 800082c:	20000000 	.word	0x20000000
 8000830:	20000004 	.word	0x20000004

08000834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000836:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000838:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000862:	f000 f811 	bl	8000888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff ffcd 	bl	8000804 <main>

0800086a <LoopForever>:

LoopForever:
  b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   r0, =_estack
 800086c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000878:	080008f0 	.word	0x080008f0
  ldr r2, =_sbss
 800087c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000880:	200000a8 	.word	0x200000a8

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <__libc_init_array>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4d0d      	ldr	r5, [pc, #52]	; (80008c0 <__libc_init_array+0x38>)
 800088c:	4c0d      	ldr	r4, [pc, #52]	; (80008c4 <__libc_init_array+0x3c>)
 800088e:	1b64      	subs	r4, r4, r5
 8000890:	10a4      	asrs	r4, r4, #2
 8000892:	2600      	movs	r6, #0
 8000894:	42a6      	cmp	r6, r4
 8000896:	d109      	bne.n	80008ac <__libc_init_array+0x24>
 8000898:	4d0b      	ldr	r5, [pc, #44]	; (80008c8 <__libc_init_array+0x40>)
 800089a:	4c0c      	ldr	r4, [pc, #48]	; (80008cc <__libc_init_array+0x44>)
 800089c:	f000 f818 	bl	80008d0 <_init>
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	10a4      	asrs	r4, r4, #2
 80008a4:	2600      	movs	r6, #0
 80008a6:	42a6      	cmp	r6, r4
 80008a8:	d105      	bne.n	80008b6 <__libc_init_array+0x2e>
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b0:	4798      	blx	r3
 80008b2:	3601      	adds	r6, #1
 80008b4:	e7ee      	b.n	8000894 <__libc_init_array+0xc>
 80008b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ba:	4798      	blx	r3
 80008bc:	3601      	adds	r6, #1
 80008be:	e7f2      	b.n	80008a6 <__libc_init_array+0x1e>
 80008c0:	080008e8 	.word	0x080008e8
 80008c4:	080008e8 	.word	0x080008e8
 80008c8:	080008e8 	.word	0x080008e8
 80008cc:	080008ec 	.word	0x080008ec

080008d0 <_init>:
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d2:	bf00      	nop
 80008d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d6:	bc08      	pop	{r3}
 80008d8:	469e      	mov	lr, r3
 80008da:	4770      	bx	lr

080008dc <_fini>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	bf00      	nop
 80008e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e2:	bc08      	pop	{r3}
 80008e4:	469e      	mov	lr, r3
 80008e6:	4770      	bx	lr
