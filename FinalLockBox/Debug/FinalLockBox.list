
FinalLockBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea4  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001028  08001028  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001028  08001028  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08001028  08001028  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001028  08001028  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08001030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020130  2**0
                  CONTENTS
 10 .bss          0000004c  20000130  20000130  00020130  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  00020130  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001c69  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000077a  00000000  00000000  00021e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b8  00000000  00000000  00022588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000132  00000000  00000000  00022740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d7e5  00000000  00000000  00022872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002acc  00000000  00000000  00040057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a32a1  00000000  00000000  00042b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000524  00000000  00000000  000e5dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e62e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000130 	.word	0x20000130
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001010 	.word	0x08001010

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000134 	.word	0x20000134
 80001c0:	08001010 	.word	0x08001010

080001c4 <pa4_adc1_init>:
#define ADCEN           (1U<<13)
#define CFGR_CONT		(1U<<13)
#define SEQ_LEN_1		0
#define ISR_EOC			(1U<<2)

void pa4_adc1_init(void) {
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	/*Configure ADC GPIO Pin*/
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001c8:	4b42      	ldr	r3, [pc, #264]	; (80002d4 <pa4_adc1_init+0x110>)
 80001ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001cc:	4a41      	ldr	r2, [pc, #260]	; (80002d4 <pa4_adc1_init+0x110>)
 80001ce:	f043 0301 	orr.w	r3, r3, #1
 80001d2:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set PA4 to Analog Pin*/
	GPIOA->MODER |= (1U<<2);
 80001d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<2);
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6013      	str	r3, [r2, #0]

	/*Connect GPIO analog switch to ADC input (ASCR register)*/
	/*Analog Switch Control Register (ASCR) to PA4*/
	GPIOA->ASCR |= ASCR_ASC4;
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f043 0310 	orr.w	r3, r3, #16
 8000202:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*Configure ADC module*/
	RCC->AHB2ENR |= ADCEN;
 8000204:	4b33      	ldr	r3, [pc, #204]	; (80002d4 <pa4_adc1_init+0x110>)
 8000206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000208:	4a32      	ldr	r2, [pc, #200]	; (80002d4 <pa4_adc1_init+0x110>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Enable clock access to ADC_CCR module
	 * (ADC common control register)*/
	/*Set ADC common clock ; use system clock divided by 2*/
	ADC123_COMMON->CCR &= ~(1U<<16);
 8000210:	4b31      	ldr	r3, [pc, #196]	; (80002d8 <pa4_adc1_init+0x114>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	4a30      	ldr	r2, [pc, #192]	; (80002d8 <pa4_adc1_init+0x114>)
 8000216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800021a:	6093      	str	r3, [r2, #8]
	ADC123_COMMON->CCR |=  (1U<<17);
 800021c:	4b2e      	ldr	r3, [pc, #184]	; (80002d8 <pa4_adc1_init+0x114>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	4a2d      	ldr	r2, [pc, #180]	; (80002d8 <pa4_adc1_init+0x114>)
 8000222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000226:	6093      	str	r3, [r2, #8]

	/*Set Single Conversion (ADC_CFGR)*/
	ADC1->CFGR |= CFGR_CONT;
 8000228:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <pa4_adc1_init+0x118>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <pa4_adc1_init+0x118>)
 800022e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000232:	60d3      	str	r3, [r2, #12]

	/*Set sequence length (SQR1 register to define number of conversion)*/
	ADC1->SQR1 = SEQ_LEN_1;
 8000234:	4b29      	ldr	r3, [pc, #164]	; (80002dc <pa4_adc1_init+0x118>)
 8000236:	2200      	movs	r2, #0
 8000238:	631a      	str	r2, [r3, #48]	; 0x30

	/*Set ADC channel */
	ADC1->SQR1 |=(1U<<6);
 800023a:	4b28      	ldr	r3, [pc, #160]	; (80002dc <pa4_adc1_init+0x118>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <pa4_adc1_init+0x118>)
 8000240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 &=~(1U<<7);
 8000246:	4b25      	ldr	r3, [pc, #148]	; (80002dc <pa4_adc1_init+0x118>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024a:	4a24      	ldr	r2, [pc, #144]	; (80002dc <pa4_adc1_init+0x118>)
 800024c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000250:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 &=~(1U<<8);
 8000252:	4b22      	ldr	r3, [pc, #136]	; (80002dc <pa4_adc1_init+0x118>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <pa4_adc1_init+0x118>)
 8000258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800025c:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 |=(1U<<9);  //0b1001 indicates ADC channel 9 is used
 800025e:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <pa4_adc1_init+0x118>)
 8000260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000262:	4a1e      	ldr	r2, [pc, #120]	; (80002dc <pa4_adc1_init+0x118>)
 8000264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000268:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->SQR2 |=(1U<<12);
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <pa4_adc1_init+0x118>)
 800026c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <pa4_adc1_init+0x118>)
 8000270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000274:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR2 &=~(1U<<13);
 8000276:	4b19      	ldr	r3, [pc, #100]	; (80002dc <pa4_adc1_init+0x118>)
 8000278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <pa4_adc1_init+0x118>)
 800027c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000280:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR2 &=~(1U<<14);
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <pa4_adc1_init+0x118>)
 8000284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000286:	4a15      	ldr	r2, [pc, #84]	; (80002dc <pa4_adc1_init+0x118>)
 8000288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800028c:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR2 |=(1U<<15);
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <pa4_adc1_init+0x118>)
 8000290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000292:	4a12      	ldr	r2, [pc, #72]	; (80002dc <pa4_adc1_init+0x118>)
 8000294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000298:	6353      	str	r3, [r2, #52]	; 0x34

	/*Disable ADC deep power down (ADC_CR register)*/
	ADC1->CR &=~(1U<<29);
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <pa4_adc1_init+0x118>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <pa4_adc1_init+0x118>)
 80002a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002a4:	6093      	str	r3, [r2, #8]

	/*Enable ADC internal regulator (unique to STM32L series uC)*/
	ADC1->CR |=(1U<<28);
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <pa4_adc1_init+0x118>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <pa4_adc1_init+0x118>)
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	6093      	str	r3, [r2, #8]

	/*Start ADC Calibration (ADCAL)*/
	ADC1->CR |=(1U<<31);
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <pa4_adc1_init+0x118>)
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <pa4_adc1_init+0x118>)
 80002b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002bc:	6093      	str	r3, [r2, #8]

	/*Enable the ADC*/
	ADC1->CR |=(1U<<0);
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <pa4_adc1_init+0x118>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a06      	ldr	r2, [pc, #24]	; (80002dc <pa4_adc1_init+0x118>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6093      	str	r3, [r2, #8]
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000
 80002d8:	50040300 	.word	0x50040300
 80002dc:	50040000 	.word	0x50040000

080002e0 <start_conversion>:

void start_conversion(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	/*ADC_CR register*/
	ADC1->CR |=(1U<<2);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <start_conversion+0x1c>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <start_conversion+0x1c>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6093      	str	r3, [r2, #8]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	50040000 	.word	0x50040000

08000300 <adc_read>:

uint32_t adc_read(void) {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	/*Wait for end of conversion flag (ADC_ISR at bit 2)*/
	while (!(ADC1-> ISR  | ISR_EOC)){}
 8000304:	bf00      	nop
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <adc_read+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]

	/*Clear EOC flag by writing 1 to bit 2*/
	ADC1->ISR  &=~ ISR_EOC;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <adc_read+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a05      	ldr	r2, [pc, #20]	; (8000324 <adc_read+0x24>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6013      	str	r3, [r2, #0]

	/*Read results*/
	return (ADC1->DR);
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <adc_read+0x24>)
 8000318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	50040000 	.word	0x50040000

08000328 <keypadInit>:
						{52,53,54,66},
						{55,56,57,67},
						{42,48,35,68}};

//Keypad pin initialization
void keypadInit(void) {
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	/* Enable GPIOs clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <keypadInit+0xac>)
 800032e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000330:	4a28      	ldr	r2, [pc, #160]	; (80003d4 <keypadInit+0xac>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	64d3      	str	r3, [r2, #76]	; 0x4c

	//Rows
	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOC->MODER &= ~(3U<<(2*COL1) | 3U<<(2*COL2) | 3U<<(2*COL3) | 3U<<(2*COL4));  //clear PC 5,6,8,9 GPIO pins
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <keypadInit+0xb0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a26      	ldr	r2, [pc, #152]	; (80003d8 <keypadInit+0xb0>)
 800033e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000342:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |=  1U<<(2*COL1) | 1U<<(2*COL2) | 1U<<(2*COL3) | 1U<<(2*COL4);   //  set Output(01)
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <keypadInit+0xb0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <keypadInit+0xb0>)
 800034a:	f443 73aa 	orr.w	r3, r3, #340	; 0x154
 800034e:	6013      	str	r3, [r2, #0]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOC->OSPEEDR &= ~(3U<<(2*COL1) | 3U<<(2*COL2) | 3U<<(2*COL3) | 3U<<(2*COL4));   //clear PC 5,6,8,9 GPIO pins
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <keypadInit+0xb0>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a20      	ldr	r2, [pc, #128]	; (80003d8 <keypadInit+0xb0>)
 8000356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800035a:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |=   2U<<(2*COL1) | 2U<<(2*COL2) | 2U<<(2*COL3) | 2U<<(2*COL4);  // Set Fast speed
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <keypadInit+0xb0>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <keypadInit+0xb0>)
 8000362:	f443 732a 	orr.w	r3, r3, #680	; 0x2a8
 8000366:	6093      	str	r3, [r2, #8]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOC->OTYPER &= ~(1U<<COL1 | 1U<<COL2 | 1U<<COL3 | 1U<<COL4);       // Set Push-pull
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <keypadInit+0xb0>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <keypadInit+0xb0>)
 800036e:	f023 031e 	bic.w	r3, r3, #30
 8000372:	6053      	str	r3, [r2, #4]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOC->PUPDR  &= ~(3U<<(2*COL1) | 3U<<(2*COL2) | 3U<<(2*COL3) | 3U<<(2*COL4));  // No pull-up, no pull-down
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <keypadInit+0xb0>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <keypadInit+0xb0>)
 800037a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800037e:	60d3      	str	r3, [r2, #12]

	//Columns
	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOC->MODER &= ~(3U<<(2*ROW1) | 3U<<(2*ROW2) | 3U<<(2*ROW3) | 3U<<(2*ROW4));  //clear PC 5,6,8,9 GPIO pins
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <keypadInit+0xb0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <keypadInit+0xb0>)
 8000386:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 800038a:	6013      	str	r3, [r2, #0]
	//GPIOC->MODER  |=  1<<(2*ROW1) | 1<<(2*ROW2) | 1<<(2*ROW3) | 1<<(2*ROW4);   //  set Output(01)
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOC->OSPEEDR &= ~(3U<<(2*ROW1) | 3U<<(2*ROW2) | 3U<<(2*ROW3) | 3U<<(2*ROW4));   //clear PC 5,6,8,9 GPIO pins
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <keypadInit+0xb0>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <keypadInit+0xb0>)
 8000392:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 8000396:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |=   2U<<(2*ROW1) | 2U<<(2*ROW2) | 2U<<(2*ROW3) | 2U<<(2*ROW4);  // Set Fast speed
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <keypadInit+0xb0>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <keypadInit+0xb0>)
 800039e:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 80003a2:	6093      	str	r3, [r2, #8]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOC->OTYPER &= ~(1U<<ROW1 | 1U<<ROW2 | 1U<<ROW3 | 1U<<ROW4);       // Set Push-pull
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <keypadInit+0xb0>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <keypadInit+0xb0>)
 80003aa:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80003ae:	6053      	str	r3, [r2, #4]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOC->PUPDR  &= ~(3U<<(2*ROW1) | 3U<<(2*ROW2) | 3U<<(2*ROW3) | 3U<<(2*ROW4));  //  pull-down
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <keypadInit+0xb0>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <keypadInit+0xb0>)
 80003b6:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 80003ba:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR  |= (2U<<(2*ROW1) | 2U<<(2*ROW2) | 2U<<(2*ROW3) | 2U<<(2*ROW4));
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <keypadInit+0xb0>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <keypadInit+0xb0>)
 80003c2:	f443 332a 	orr.w	r3, r3, #174080	; 0x2a800
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000800 	.word	0x48000800

080003dc <keypadScan>:

int keypadScan(void) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	//Writes high to all columns
	GPIOC->ODR |= (1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <keypadScan+0xac>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a28      	ldr	r2, [pc, #160]	; (8000488 <keypadScan+0xac>)
 80003e8:	f043 031e 	orr.w	r3, r3, #30
 80003ec:	6153      	str	r3, [r2, #20]
	for(int i = 0; i < 4; i++) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	e03f      	b.n	8000474 <keypadScan+0x98>
		//Finds the row the key is in
		if(GPIOC->IDR & (1<<rows[i])) {
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <keypadScan+0xac>)
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	4924      	ldr	r1, [pc, #144]	; (800048c <keypadScan+0xb0>)
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	440a      	add	r2, r1
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	4611      	mov	r1, r2
 8000402:	2201      	movs	r2, #1
 8000404:	408a      	lsls	r2, r1
 8000406:	4013      	ands	r3, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	d030      	beq.n	800046e <keypadScan+0x92>
			//Loops through every column, writing low to it and high to the rest
			for(int j = 0; j < 4; j++) {
 800040c:	2300      	movs	r3, #0
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	e02a      	b.n	8000468 <keypadScan+0x8c>
				GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
 8000412:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <keypadScan+0xac>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <keypadScan+0xac>)
 8000418:	f043 031e 	orr.w	r3, r3, #30
 800041c:	6153      	str	r3, [r2, #20]
				GPIOC->ODR &=~ (1<<columns[j]);
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <keypadScan+0xac>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	491b      	ldr	r1, [pc, #108]	; (8000490 <keypadScan+0xb4>)
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	440a      	add	r2, r1
 8000428:	7812      	ldrb	r2, [r2, #0]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	43d2      	mvns	r2, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a14      	ldr	r2, [pc, #80]	; (8000488 <keypadScan+0xac>)
 8000436:	400b      	ands	r3, r1
 8000438:	6153      	str	r3, [r2, #20]
				//Returns the key when found
				if(!(GPIOC->IDR & (1<<rows[i]))) {
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <keypadScan+0xac>)
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	4913      	ldr	r1, [pc, #76]	; (800048c <keypadScan+0xb0>)
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	440a      	add	r2, r1
 8000444:	7812      	ldrb	r2, [r2, #0]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	4013      	ands	r3, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	d107      	bne.n	8000462 <keypadScan+0x86>
					return keypadVals[i][j];
 8000452:	4910      	ldr	r1, [pc, #64]	; (8000494 <keypadScan+0xb8>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	009a      	lsls	r2, r3, #2
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	4413      	add	r3, r2
 800045c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000460:	e00c      	b.n	800047c <keypadScan+0xa0>
			for(int j = 0; j < 4; j++) {
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	2b03      	cmp	r3, #3
 800046c:	ddd1      	ble.n	8000412 <keypadScan+0x36>
	for(int i = 0; i < 4; i++) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3301      	adds	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b03      	cmp	r3, #3
 8000478:	ddbc      	ble.n	80003f4 <keypadScan+0x18>
				}
			}
		}
	}
	return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	48000800 	.word	0x48000800
 800048c:	20000004 	.word	0x20000004
 8000490:	20000000 	.word	0x20000000
 8000494:	20000008 	.word	0x20000008

08000498 <lcdInit>:
//Control lines declaration, data lines are declared in lcd.h
#define REGSELECT 8
#define ENABLE 9

//Initializes LCD pins
void lcdInit(void) {
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOBEN;
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <lcdInit+0x9c>)
 800049e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a0:	4a24      	ldr	r2, [pc, #144]	; (8000534 <lcdInit+0x9c>)
 80004a2:	f043 0302 	orr.w	r3, r3, #2
 80004a6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOB->MODER &= ~(3U<<(2*REGSELECT) | 3U<<(2*ENABLE));  //clear PC 5,6,8,9 GPIO pins
 80004a8:	4b23      	ldr	r3, [pc, #140]	; (8000538 <lcdInit+0xa0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <lcdInit+0xa0>)
 80004ae:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  (1U<<(2*REGSELECT) | 1U<<(2*ENABLE));  //  set Output(01)
 80004b4:	4b20      	ldr	r3, [pc, #128]	; (8000538 <lcdInit+0xa0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1f      	ldr	r2, [pc, #124]	; (8000538 <lcdInit+0xa0>)
 80004ba:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80004be:	6013      	str	r3, [r2, #0]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOB->OSPEEDR &= ~(3U<<(2*REGSELECT) | 3U<<(2*ENABLE));   //clear PC 5,6,8,9 GPIO pins
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <lcdInit+0xa0>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <lcdInit+0xa0>)
 80004c6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004ca:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=  (2U<<(2*REGSELECT) | 2U<<(2*ENABLE));  // Set Fast speed
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <lcdInit+0xa0>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	4a19      	ldr	r2, [pc, #100]	; (8000538 <lcdInit+0xa0>)
 80004d2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80004d6:	6093      	str	r3, [r2, #8]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOB->PUPDR  &= ~(3U<<(2*REGSELECT) | 3U<<(2*ENABLE));
 80004d8:	4b17      	ldr	r3, [pc, #92]	; (8000538 <lcdInit+0xa0>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <lcdInit+0xa0>)
 80004de:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80004e2:	60d3      	str	r3, [r2, #12]


	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOB->MODER &= ~(3U<<(2*DB0) | 3U<<(2*DB1) | 3U<<(2*DB2) | 3U<<(2*DB3) | 3U<<(2*DB4) | 3U<<(2*DB5) | 3U<<(2*DB6) | 3U<<(2*DB7));  //clear PC 5,6,8,9 GPIO pins
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <lcdInit+0xa0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <lcdInit+0xa0>)
 80004ea:	0c1b      	lsrs	r3, r3, #16
 80004ec:	041b      	lsls	r3, r3, #16
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  (1U<<(2*DB0) | 1U<<(2*DB1) | 1U<<(2*DB2) | 1U<<(2*DB3) | 1U<<(2*DB4) | 1U<<(2*DB5) | 1U<<(2*DB6) | 1U<<(2*DB7));  //  set Output(01)
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <lcdInit+0xa0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a10      	ldr	r2, [pc, #64]	; (8000538 <lcdInit+0xa0>)
 80004f6:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80004fa:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80004fe:	6013      	str	r3, [r2, #0]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOB->OSPEEDR &= ~(3U<<(2*DB0) | 3U<<(2*DB1) | 3U<<(2*DB2) | 3U<<(2*DB3) | 3U<<(2*DB4) | 3U<<(2*DB5) | 3U<<(2*DB6) | 3U<<(2*DB7));   //clear PC 5,6,8,9 GPIO pins
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <lcdInit+0xa0>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <lcdInit+0xa0>)
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	041b      	lsls	r3, r3, #16
 800050a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=  (2U<<(2*DB0) | 2U<<(2*DB1) | 2U<<(2*DB2) | 2U<<(2*DB3) | 2U<<(2*DB4) | 2U<<(2*DB5) | 2U<<(2*DB6) | 2U<<(2*DB7));  // Set Fast speed
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <lcdInit+0xa0>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <lcdInit+0xa0>)
 8000512:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000516:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 800051a:	6093      	str	r3, [r2, #8]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOB->PUPDR  &= ~(3U<<(2*DB0) | 3U<<(2*DB1) | 3U<<(2*DB2) | 3U<<(2*DB3) | 3U<<(2*DB4) | 3U<<(2*DB5) | 3U<<(2*DB6) | 3U<<(2*DB7));
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <lcdInit+0xa0>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <lcdInit+0xa0>)
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	60d3      	str	r3, [r2, #12]

}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	48000400 	.word	0x48000400

0800053c <delayMs>:

//Function used to add delay between commands
void delayMs(int n){
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	int i, j;
	for(i = 0 ; i < n; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e00c      	b.n	8000564 <delayMs+0x28>
		for(j = 0; j < 800; j++) {}
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	e002      	b.n	8000556 <delayMs+0x1a>
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	3301      	adds	r3, #1
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800055c:	dbf8      	blt.n	8000550 <delayMs+0x14>
	for(i = 0 ; i < n; i++) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbee      	blt.n	800054a <delayMs+0xe>
	}
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <writeToBus>:

//Writes to data lines given an input for each line
void writeToBus(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
	GPIOB->ODR &=~ ((1<<DB0) | (1<<DB1) | (1<<DB2) | (1<<DB3) | (1<<DB4) | (1<<DB5) | (1<<DB6) | (1<<DB7));
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <writeToBus+0x60>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a13      	ldr	r2, [pc, #76]	; (80005dc <writeToBus+0x60>)
 8000590:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000594:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= ((b0<<DB0) | (b1<<DB1) | (b2<<DB2) | (b3<<DB3) | (b4<<DB4) | (b5<<DB5) | (b6<<DB6) | (b7<<DB7));
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <writeToBus+0x60>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	6a3a      	ldr	r2, [r7, #32]
 800059c:	0051      	lsls	r1, r2, #1
 800059e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005a0:	4311      	orrs	r1, r2
 80005a2:	69fa      	ldr	r2, [r7, #28]
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	4311      	orrs	r1, r2
 80005a8:	69ba      	ldr	r2, [r7, #24]
 80005aa:	00d2      	lsls	r2, r2, #3
 80005ac:	4311      	orrs	r1, r2
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	4311      	orrs	r1, r2
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	0152      	lsls	r2, r2, #5
 80005b8:	4311      	orrs	r1, r2
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	0192      	lsls	r2, r2, #6
 80005be:	4311      	orrs	r1, r2
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	01d2      	lsls	r2, r2, #7
 80005c4:	430a      	orrs	r2, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <writeToBus+0x60>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6153      	str	r3, [r2, #20]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	48000400 	.word	0x48000400

080005e0 <enableSignal>:

//Enable signal used to send commands and data, data is pushed after a high-to-low signal
void enableSignal(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1<<ENABLE);
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <enableSignal+0x28>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <enableSignal+0x28>)
 80005ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ee:	6153      	str	r3, [r2, #20]
	delayMs(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff ffa3 	bl	800053c <delayMs>
	GPIOB->ODR &=~ (1<<ENABLE);
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <enableSignal+0x28>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a03      	ldr	r2, [pc, #12]	; (8000608 <enableSignal+0x28>)
 80005fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000600:	6153      	str	r3, [r2, #20]
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	48000400 	.word	0x48000400

0800060c <sendCommand>:

//Sends a command given input for each data line
void sendCommand(int b7, int b6, int b5, int b4, int b3, int b2, int b1, int b0) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	603b      	str	r3, [r7, #0]
	GPIOB->ODR &=~ (1<<REGSELECT);
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <sendCommand+0x48>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <sendCommand+0x48>)
 8000620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000624:	6153      	str	r3, [r2, #20]
	writeToBus(b7,b6,b5,b4,b3,b2,b1,b0);
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	9303      	str	r3, [sp, #12]
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	68b9      	ldr	r1, [r7, #8]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f7ff ff9d 	bl	800057c <writeToBus>
	enableSignal();
 8000642:	f7ff ffcd 	bl	80005e0 <enableSignal>
	//Delay to ensure adequate space between commands
	delayMs(10);
 8000646:	200a      	movs	r0, #10
 8000648:	f7ff ff78 	bl	800053c <delayMs>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	48000400 	.word	0x48000400

08000658 <sendData>:

//Sends a character given an 8bit value passed into it
void sendData(int val) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |= (1<<REGSELECT);
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <sendData+0x40>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <sendData+0x40>)
 8000666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066a:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &=~ ((1<<DB0) | (1<<DB1) | (1<<DB2) | (1<<DB3) | (1<<DB4) | (1<<DB5) | (1<<DB6) | (1<<DB7));
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <sendData+0x40>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <sendData+0x40>)
 8000672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000676:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= val;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <sendData+0x40>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4906      	ldr	r1, [pc, #24]	; (8000698 <sendData+0x40>)
 8000680:	4313      	orrs	r3, r2
 8000682:	614b      	str	r3, [r1, #20]
	enableSignal();
 8000684:	f7ff ffac 	bl	80005e0 <enableSignal>
	//Delay to ensure adequate space between data transmissions
	delayMs(10);
 8000688:	200a      	movs	r0, #10
 800068a:	f7ff ff57 	bl	800053c <delayMs>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	48000400 	.word	0x48000400

0800069c <sendString>:

//Sends a string of 8 bit character values sequentially
void sendString(int string[], int size) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00a      	b.n	80006c2 <sendString+0x26>
		sendData(string[i]);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffce 	bl	8000658 <sendData>
	for (int i = 0; i < size; i++) {
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbf0      	blt.n	80006ac <sendString+0x10>
	}
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcdSetup>:

void lcdSetup(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af04      	add	r7, sp, #16
	//Function set
	//0,0,1,8bitMode,2lineDisplay,5x8,x,x
	sendCommand(0,0,1,1,1,0,0,0);
 80006da:	2300      	movs	r3, #0
 80006dc:	9303      	str	r3, [sp, #12]
 80006de:	2300      	movs	r3, #0
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2300      	movs	r3, #0
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	2201      	movs	r2, #1
 80006ee:	2100      	movs	r1, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff ff8b 	bl	800060c <sendCommand>
	//Display on
	//0,0,0,0,1,displayOn,cursorOff,cursorBlinkOff
	sendCommand(0,0,0,0,1,1,0,0);
 80006f6:	2300      	movs	r3, #0
 80006f8:	9303      	str	r3, [sp, #12]
 80006fa:	2300      	movs	r3, #0
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	2301      	movs	r3, #1
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff7d 	bl	800060c <sendCommand>
	//Clear Screen
	sendCommand(0,0,0,0,0,0,0,1);
 8000712:	2301      	movs	r3, #1
 8000714:	9303      	str	r3, [sp, #12]
 8000716:	2300      	movs	r3, #0
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2300      	movs	r3, #0
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff6f 	bl	800060c <sendCommand>
	//Set cursor position
	//1,line1,position0
	sendCommand(1,0,0,0,0,0,0,0);
 800072e:	2300      	movs	r3, #0
 8000730:	9303      	str	r3, [sp, #12]
 8000732:	2300      	movs	r3, #0
 8000734:	9302      	str	r3, [sp, #8]
 8000736:	2300      	movs	r3, #0
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2300      	movs	r3, #0
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff ff61 	bl	800060c <sendCommand>
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <clearScreen>:

void clearScreen(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af04      	add	r7, sp, #16
	//Clear Screen
	sendCommand(0,0,0,0,0,0,0,1);
 8000756:	2301      	movs	r3, #1
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	2300      	movs	r3, #0
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2300      	movs	r3, #0
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff4d 	bl	800060c <sendCommand>
	//line1
	sendCommand(1,0,0,0,0,0,0,0);
 8000772:	2300      	movs	r3, #0
 8000774:	9303      	str	r3, [sp, #12]
 8000776:	2300      	movs	r3, #0
 8000778:	9302      	str	r3, [sp, #8]
 800077a:	2300      	movs	r3, #0
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2300      	movs	r3, #0
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff ff3f 	bl	800060c <sendCommand>
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <lineOne>:

void lineOne(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af04      	add	r7, sp, #16
	//1,line1,position0
	sendCommand(1,0,0,0,0,0,0,0);
 800079a:	2300      	movs	r3, #0
 800079c:	9303      	str	r3, [sp, #12]
 800079e:	2300      	movs	r3, #0
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2300      	movs	r3, #0
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ff2b 	bl	800060c <sendCommand>
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <lineTwo>:

void lineTwo(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af04      	add	r7, sp, #16
	//1,line2,position0
	sendCommand(1,1,0,0,0,0,0,0);
 80007c2:	2300      	movs	r3, #0
 80007c4:	9303      	str	r3, [sp, #12]
 80007c6:	2300      	movs	r3, #0
 80007c8:	9302      	str	r3, [sp, #8]
 80007ca:	2300      	movs	r3, #0
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	2300      	movs	r3, #0
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ff17 	bl	800060c <sendCommand>
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <displayInput>:

//Given ASCII code from keypad, display appropriate LCD char
//(*) and (#) and not displayed
void displayInput(int scanVal) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	switch(scanVal) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b30      	subs	r3, #48	; 0x30
 80007f0:	2b14      	cmp	r3, #20
 80007f2:	d865      	bhi.n	80008c0 <displayInput+0xdc>
 80007f4:	a201      	add	r2, pc, #4	; (adr r2, 80007fc <displayInput+0x18>)
 80007f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fa:	bf00      	nop
 80007fc:	08000851 	.word	0x08000851
 8000800:	08000859 	.word	0x08000859
 8000804:	08000861 	.word	0x08000861
 8000808:	08000869 	.word	0x08000869
 800080c:	08000871 	.word	0x08000871
 8000810:	08000879 	.word	0x08000879
 8000814:	08000881 	.word	0x08000881
 8000818:	08000889 	.word	0x08000889
 800081c:	08000891 	.word	0x08000891
 8000820:	08000899 	.word	0x08000899
 8000824:	080008c1 	.word	0x080008c1
 8000828:	080008c1 	.word	0x080008c1
 800082c:	080008c1 	.word	0x080008c1
 8000830:	080008c1 	.word	0x080008c1
 8000834:	080008c1 	.word	0x080008c1
 8000838:	080008c1 	.word	0x080008c1
 800083c:	080008c1 	.word	0x080008c1
 8000840:	080008a1 	.word	0x080008a1
 8000844:	080008a9 	.word	0x080008a9
 8000848:	080008b1 	.word	0x080008b1
 800084c:	080008b9 	.word	0x080008b9
		case 48:
			sendData(char0);
 8000850:	2030      	movs	r0, #48	; 0x30
 8000852:	f7ff ff01 	bl	8000658 <sendData>
			break;
 8000856:	e033      	b.n	80008c0 <displayInput+0xdc>
		case 49:
			sendData(char1);
 8000858:	2031      	movs	r0, #49	; 0x31
 800085a:	f7ff fefd 	bl	8000658 <sendData>
			break;
 800085e:	e02f      	b.n	80008c0 <displayInput+0xdc>
		case 50:
			sendData(char2);
 8000860:	2032      	movs	r0, #50	; 0x32
 8000862:	f7ff fef9 	bl	8000658 <sendData>
			break;
 8000866:	e02b      	b.n	80008c0 <displayInput+0xdc>
		case 51:
			sendData(char3);
 8000868:	2033      	movs	r0, #51	; 0x33
 800086a:	f7ff fef5 	bl	8000658 <sendData>
			break;
 800086e:	e027      	b.n	80008c0 <displayInput+0xdc>
		case 52:
			sendData(char4);
 8000870:	2034      	movs	r0, #52	; 0x34
 8000872:	f7ff fef1 	bl	8000658 <sendData>
			break;
 8000876:	e023      	b.n	80008c0 <displayInput+0xdc>
		case 53:
			sendData(char5);
 8000878:	2035      	movs	r0, #53	; 0x35
 800087a:	f7ff feed 	bl	8000658 <sendData>
			break;
 800087e:	e01f      	b.n	80008c0 <displayInput+0xdc>
		case 54:
			sendData(char6);
 8000880:	2036      	movs	r0, #54	; 0x36
 8000882:	f7ff fee9 	bl	8000658 <sendData>
			break;
 8000886:	e01b      	b.n	80008c0 <displayInput+0xdc>
		case 55:
			sendData(char7);
 8000888:	2037      	movs	r0, #55	; 0x37
 800088a:	f7ff fee5 	bl	8000658 <sendData>
			break;
 800088e:	e017      	b.n	80008c0 <displayInput+0xdc>
		case 56:
			sendData(char8);
 8000890:	2038      	movs	r0, #56	; 0x38
 8000892:	f7ff fee1 	bl	8000658 <sendData>
			break;
 8000896:	e013      	b.n	80008c0 <displayInput+0xdc>
		case 57:
			sendData(char9);
 8000898:	2039      	movs	r0, #57	; 0x39
 800089a:	f7ff fedd 	bl	8000658 <sendData>
			break;
 800089e:	e00f      	b.n	80008c0 <displayInput+0xdc>
		case 65:
			sendData(charA);
 80008a0:	2041      	movs	r0, #65	; 0x41
 80008a2:	f7ff fed9 	bl	8000658 <sendData>
			break;
 80008a6:	e00b      	b.n	80008c0 <displayInput+0xdc>
		case 66:
			sendData(charB);
 80008a8:	2042      	movs	r0, #66	; 0x42
 80008aa:	f7ff fed5 	bl	8000658 <sendData>
			break;
 80008ae:	e007      	b.n	80008c0 <displayInput+0xdc>
		case 67:
			sendData(charC);
 80008b0:	2043      	movs	r0, #67	; 0x43
 80008b2:	f7ff fed1 	bl	8000658 <sendData>
			break;
 80008b6:	e003      	b.n	80008c0 <displayInput+0xdc>
		case 68:
			sendData(charD);
 80008b8:	2044      	movs	r0, #68	; 0x44
 80008ba:	f7ff fecd 	bl	8000658 <sendData>
			break;
 80008be:	bf00      	nop
	}
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <main>:
int tryAgain[9] = {charT, charR, charY, charSpace, charA, charG, charA, charI, charN};
int enterDial[10] = {charE, charN, charT, charE, charR, charSpace, charD, charI, charA, charL};
int lockOpen[9] = {charL, charO, charC, charK, charSpace, charO, charP, charE, charN};
int closeLock[10] = {charPound, charSpace, charT, charO, charSpace, charC, charL, charO, charS, charE};

int main() {
 80008c8:	b598      	push	{r3, r4, r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	//Pin initialization
	debug_uart_init();
 80008cc:	f000 face 	bl	8000e6c <debug_uart_init>
	pa4_adc1_init();
 80008d0:	f7ff fc78 	bl	80001c4 <pa4_adc1_init>
	pseudoDelay();
 80008d4:	f000 f824 	bl	8000920 <pseudoDelay>
	start_conversion();
 80008d8:	f7ff fd02 	bl	80002e0 <start_conversion>
	keypadInit();
 80008dc:	f7ff fd24 	bl	8000328 <keypadInit>
	servoPinInit();
 80008e0:	f000 f9fa 	bl	8000cd8 <servoPinInit>
	TIM5CH1Init();
 80008e4:	f000 fa40 	bl	8000d68 <TIM5CH1Init>
	lcdInit();
 80008e8:	f7ff fdd6 	bl	8000498 <lcdInit>

	//Sets up LCD and pushes initial string to display
	lcdSetup();
 80008ec:	f7ff fef2 	bl	80006d4 <lcdSetup>
	sendString(enterCode, 12);
 80008f0:	210c      	movs	r1, #12
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <main+0x54>)
 80008f4:	f7ff fed2 	bl	800069c <sendString>

	while(1){
		//Slows down rate of checking and logic
		pseudoDelay();
 80008f8:	f000 f812 	bl	8000920 <pseudoDelay>
//		printf("Dial state: %d\n\r", dialState);
//		printf("Dial lock state: %d\n\r", dialLockValue);
//		printf("Lock state: %d\n\r\n\r", lockBox(keypadValue, dialLockValue));

		//Calls lock box behavior with keypad output and dial lock output
		lockBox(keypadLock(), dialLock(adc_read()));
 80008fc:	f000 f8ea 	bl	8000ad4 <keypadLock>
 8000900:	4604      	mov	r4, r0
 8000902:	f7ff fcfd 	bl	8000300 <adc_read>
 8000906:	4603      	mov	r3, r0
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f821 	bl	8000950 <dialLock>
 800090e:	4603      	mov	r3, r0
 8000910:	4619      	mov	r1, r3
 8000912:	4620      	mov	r0, r4
 8000914:	f000 f966 	bl	8000be4 <lockBox>
		pseudoDelay();
 8000918:	e7ee      	b.n	80008f8 <main+0x30>
 800091a:	bf00      	nop
 800091c:	20000048 	.word	0x20000048

08000920 <pseudoDelay>:
	}
}

void pseudoDelay(void){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
	int x;
	for(int i = 0; i < 64000; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	e005      	b.n	8000938 <pseudoDelay+0x18>
		x++;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3301      	adds	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 64000; i++) {
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800093e:	dbf5      	blt.n	800092c <pseudoDelay+0xc>
	}
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <dialLock>:

//Variables used to determine direction of turn
int lastVal = 0;
int direction = 0;

int dialLock(int sensorVal) {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	//Direction determining code
	//10 is used as range previous and current must differ to declare turn direction
	if(sensorVal - lastVal > 10) {
 8000958:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <dialLock+0x160>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	2b0a      	cmp	r3, #10
 8000962:	dd03      	ble.n	800096c <dialLock+0x1c>
		direction = 1;
 8000964:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <dialLock+0x164>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e00e      	b.n	800098a <dialLock+0x3a>
	}
	else if(sensorVal - lastVal < -10) {
 800096c:	4b50      	ldr	r3, [pc, #320]	; (8000ab0 <dialLock+0x160>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	f113 0f0a 	cmn.w	r3, #10
 8000978:	da04      	bge.n	8000984 <dialLock+0x34>
		direction = -1;
 800097a:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <dialLock+0x164>)
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e002      	b.n	800098a <dialLock+0x3a>
	}
	else {
		direction = 0;
 8000984:	4b4b      	ldr	r3, [pc, #300]	; (8000ab4 <dialLock+0x164>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
	}
	lastVal = sensorVal;
 800098a:	4a49      	ldr	r2, [pc, #292]	; (8000ab0 <dialLock+0x160>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]

	//Dial lock state machine
	switch (dialState) {
 8000990:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <dialLock+0x168>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b03      	cmp	r3, #3
 8000996:	f200 8084 	bhi.w	8000aa2 <dialLock+0x152>
 800099a:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <dialLock+0x50>)
 800099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a0:	080009b1 	.word	0x080009b1
 80009a4:	080009d3 	.word	0x080009d3
 80009a8:	08000a2b 	.word	0x08000a2b
 80009ac:	08000a81 	.word	0x08000a81
		case 0:
			//Checks for dial at 1st position, direction doesn't matter
			if(sensorVal >= lowVal1 && sensorVal <= highVal1) {
 80009b0:	4b42      	ldr	r3, [pc, #264]	; (8000abc <dialLock+0x16c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	db09      	blt.n	80009ce <dialLock+0x7e>
 80009ba:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <dialLock+0x170>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dc04      	bgt.n	80009ce <dialLock+0x7e>
				dialState = 1;
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <dialLock+0x168>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
				return false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e06a      	b.n	8000aa4 <dialLock+0x154>
			}
			else {
				return false;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e068      	b.n	8000aa4 <dialLock+0x154>
			}
		case 1:
			//Dial at position 1
			if(sensorVal >= lowVal1 && sensorVal <= highVal1) {
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <dialLock+0x16c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	db06      	blt.n	80009ea <dialLock+0x9a>
 80009dc:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <dialLock+0x170>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dc01      	bgt.n	80009ea <dialLock+0x9a>
				return false;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e05c      	b.n	8000aa4 <dialLock+0x154>
			}
			//Resets state machine to state zero if dial goes past 2nd position, below 1st position, or turns backwards
			else if(sensorVal >= highVal2 || sensorVal <= lowVal1 || direction == -1) {
 80009ea:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <dialLock+0x174>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	da09      	bge.n	8000a08 <dialLock+0xb8>
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <dialLock+0x16c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dd04      	ble.n	8000a08 <dialLock+0xb8>
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <dialLock+0x164>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a06:	d104      	bne.n	8000a12 <dialLock+0xc2>
				dialState = 0;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <dialLock+0x168>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
				return false;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e048      	b.n	8000aa4 <dialLock+0x154>
			}
			//Checks for dial at 2nd position
			else if(sensorVal >= lowVal2) {
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <dialLock+0x178>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	db04      	blt.n	8000a26 <dialLock+0xd6>
				dialState = 2;
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <dialLock+0x168>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
				return false;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e03e      	b.n	8000aa4 <dialLock+0x154>
			}
			else {
				return false;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e03c      	b.n	8000aa4 <dialLock+0x154>
			}
		case 2:
			//Dial at position 2
			if(sensorVal >= lowVal2 && sensorVal <= highVal2) {
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <dialLock+0x178>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	db06      	blt.n	8000a42 <dialLock+0xf2>
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <dialLock+0x174>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dc01      	bgt.n	8000a42 <dialLock+0xf2>
				return false;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e030      	b.n	8000aa4 <dialLock+0x154>
			}
			//Resets state machine to state zero if dial goes below 3nd position, past 2nd position, or turns backwards
			else if(sensorVal <= lowVal3 || sensorVal >= highVal2 || direction == 1) {
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <dialLock+0x17c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dd08      	ble.n	8000a5e <dialLock+0x10e>
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <dialLock+0x174>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	da03      	bge.n	8000a5e <dialLock+0x10e>
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <dialLock+0x164>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <dialLock+0x118>
				dialState = 0;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <dialLock+0x168>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
				return false;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e01d      	b.n	8000aa4 <dialLock+0x154>
			}
			//Checks for dial at position 3
			else if(sensorVal <= highVal3) {
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <dialLock+0x180>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dc04      	bgt.n	8000a7c <dialLock+0x12c>
				dialState = 3;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <dialLock+0x168>)
 8000a74:	2203      	movs	r2, #3
 8000a76:	601a      	str	r2, [r3, #0]
				return false;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e013      	b.n	8000aa4 <dialLock+0x154>
			}
			else {
				return false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e011      	b.n	8000aa4 <dialLock+0x154>
			}
		case 3:
			//Dial at position 3
			if(sensorVal >= lowVal3 && sensorVal <= highVal3) {
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <dialLock+0x17c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	db06      	blt.n	8000a98 <dialLock+0x148>
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <dialLock+0x180>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dc01      	bgt.n	8000a98 <dialLock+0x148>
				return true;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e005      	b.n	8000aa4 <dialLock+0x154>
			}
			//If dial moves, lock resets
			else {
				dialState = 0;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <dialLock+0x168>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
				return false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <dialLock+0x154>
			}
		default:
			return false;
 8000aa2:	2300      	movs	r3, #0
	}
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	2000015c 	.word	0x2000015c
 8000ab4:	20000160 	.word	0x20000160
 8000ab8:	2000014c 	.word	0x2000014c
 8000abc:	20000154 	.word	0x20000154
 8000ac0:	20000158 	.word	0x20000158
 8000ac4:	20000114 	.word	0x20000114
 8000ac8:	20000110 	.word	0x20000110
 8000acc:	20000118 	.word	0x20000118
 8000ad0:	2000011c 	.word	0x2000011c

08000ad4 <keypadLock>:
//Vars used for lock control
int keypadInput[4] = {0,0,0,0};
int keysInput = 0;
int lastInput = 0;

int keypadLock() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	int scanVal = keypadScan();
 8000ada:	f7ff fc7f 	bl	80003dc <keypadScan>
 8000ade:	6078      	str	r0, [r7, #4]
	//Resets entire lock back to inital state if 35 (#) is entered
	if(keypadScan() == 35) {
 8000ae0:	f7ff fc7c 	bl	80003dc <keypadScan>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b23      	cmp	r3, #35	; 0x23
 8000ae8:	d11a      	bne.n	8000b20 <keypadLock+0x4c>
		keysInput = 0;
 8000aea:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <keypadLock+0xf0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
		lastInput = 0;
 8000af0:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <keypadLock+0xf4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
		memset(keypadInput, 0, sizeof(keypadInput));
 8000af6:	2210      	movs	r2, #16
 8000af8:	2100      	movs	r1, #0
 8000afa:	4834      	ldr	r0, [pc, #208]	; (8000bcc <keypadLock+0xf8>)
 8000afc:	f000 fa5b 	bl	8000fb6 <memset>
		clearScreen();
 8000b00:	f7ff fe26 	bl	8000750 <clearScreen>
		sendString(enterCode, 12);
 8000b04:	210c      	movs	r1, #12
 8000b06:	4832      	ldr	r0, [pc, #200]	; (8000bd0 <keypadLock+0xfc>)
 8000b08:	f7ff fdc8 	bl	800069c <sendString>
		lockState = 0;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <keypadLock+0x100>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
		dialState = 0;
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <keypadLock+0x104>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
		servoClose();
 8000b18:	f000 f98e 	bl	8000e38 <servoClose>
		return 35;
 8000b1c:	2323      	movs	r3, #35	; 0x23
 8000b1e:	e04d      	b.n	8000bbc <keypadLock+0xe8>
	}
	//Checks code input once 4 digits are entered
	if(keysInput >= 4) {
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <keypadLock+0xf0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	dd25      	ble.n	8000b74 <keypadLock+0xa0>
		//Resets keypad lock if incorrect, and displays "Try again" on LCD
		if (!(arraysEqual(keypadCode, keypadInput, 4))) {
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4928      	ldr	r1, [pc, #160]	; (8000bcc <keypadLock+0xf8>)
 8000b2c:	482b      	ldr	r0, [pc, #172]	; (8000bdc <keypadLock+0x108>)
 8000b2e:	f000 f8ad 	bl	8000c8c <arraysEqual>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <keypadLock+0x9c>
			keysInput = 0;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <keypadLock+0xf0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
			lastInput = 0;
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <keypadLock+0xf4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			memset(keypadInput, 0, sizeof(keypadInput));
 8000b44:	2210      	movs	r2, #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	4820      	ldr	r0, [pc, #128]	; (8000bcc <keypadLock+0xf8>)
 8000b4a:	f000 fa34 	bl	8000fb6 <memset>
			clearScreen();
 8000b4e:	f7ff fdff 	bl	8000750 <clearScreen>
			lineTwo();
 8000b52:	f7ff fe33 	bl	80007bc <lineTwo>
			sendString(tryAgain, 9);
 8000b56:	2109      	movs	r1, #9
 8000b58:	4821      	ldr	r0, [pc, #132]	; (8000be0 <keypadLock+0x10c>)
 8000b5a:	f7ff fd9f 	bl	800069c <sendString>
			lineOne();
 8000b5e:	f7ff fe19 	bl	8000794 <lineOne>
			sendString(enterCode, 12);
 8000b62:	210c      	movs	r1, #12
 8000b64:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <keypadLock+0xfc>)
 8000b66:	f7ff fd99 	bl	800069c <sendString>
			return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e025      	b.n	8000bbc <keypadLock+0xe8>
		}
		//Function will return 1 if it is unlocked
		else {
			return 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e023      	b.n	8000bbc <keypadLock+0xe8>
		}
	}
	else {
		//Code to isolate keys input
		//Will only input a key if it isn't zero and isn't the same as the last input
		if((scanVal != 0) && (scanVal != lastInput)) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d017      	beq.n	8000baa <keypadLock+0xd6>
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <keypadLock+0xf4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d012      	beq.n	8000baa <keypadLock+0xd6>
			lastInput = scanVal;
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <keypadLock+0xf4>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
			keypadInput[keysInput] = scanVal;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <keypadLock+0xf0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	490f      	ldr	r1, [pc, #60]	; (8000bcc <keypadLock+0xf8>)
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//Writes digit to LCD
			displayInput(scanVal);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fe24 	bl	80007e4 <displayInput>
			keysInput++;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <keypadLock+0xf0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <keypadLock+0xf0>)
 8000ba4:	6013      	str	r3, [r2, #0]
			return scanVal;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	e008      	b.n	8000bbc <keypadLock+0xe8>
		}
		//If button is released, last input is 0 and another key can be entered
		else if(scanVal == 0) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <keypadLock+0xe6>
			lastInput = 0;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <keypadLock+0xf4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
			return scanVal;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	e000      	b.n	8000bbc <keypadLock+0xe8>
		}
	}
	return scanVal;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000174 	.word	0x20000174
 8000bc8:	20000178 	.word	0x20000178
 8000bcc:	20000164 	.word	0x20000164
 8000bd0:	20000048 	.word	0x20000048
 8000bd4:	20000150 	.word	0x20000150
 8000bd8:	2000014c 	.word	0x2000014c
 8000bdc:	20000120 	.word	0x20000120
 8000be0:	20000078 	.word	0x20000078

08000be4 <lockBox>:

int lockBox(int keypad, int dial) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	//Lock state machine
	switch (lockState) {
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <lockBox+0x94>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d02c      	beq.n	8000c50 <lockBox+0x6c>
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	dc39      	bgt.n	8000c6e <lockBox+0x8a>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <lockBox+0x20>
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d00e      	beq.n	8000c20 <lockBox+0x3c>
 8000c02:	e034      	b.n	8000c6e <lockBox+0x8a>
		case 0:
			//Moves to state 2 if keypad code was entered correctly, updates LCD
			if(keypad == 1) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d108      	bne.n	8000c1c <lockBox+0x38>
				clearScreen();
 8000c0a:	f7ff fda1 	bl	8000750 <clearScreen>
				sendString(enterDial, 10);
 8000c0e:	210a      	movs	r1, #10
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <lockBox+0x98>)
 8000c12:	f7ff fd43 	bl	800069c <sendString>
				lockState = 1;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <lockBox+0x94>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
			}
			return 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e027      	b.n	8000c70 <lockBox+0x8c>
		case 1:
			//Moves to state 2 if dial code is input correctly, updates LCD
			if(dial == 1) {
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d112      	bne.n	8000c4c <lockBox+0x68>
				servoOpen();
 8000c26:	f000 f8ed 	bl	8000e04 <servoOpen>
				clearScreen();
 8000c2a:	f7ff fd91 	bl	8000750 <clearScreen>
				sendString(lockOpen, 9);
 8000c2e:	2109      	movs	r1, #9
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <lockBox+0x9c>)
 8000c32:	f7ff fd33 	bl	800069c <sendString>
				lineTwo();
 8000c36:	f7ff fdc1 	bl	80007bc <lineTwo>
				sendString(closeLock, 10);
 8000c3a:	210a      	movs	r1, #10
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <lockBox+0xa0>)
 8000c3e:	f7ff fd2d 	bl	800069c <sendString>
				lockState = 2;
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <lockBox+0x94>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	601a      	str	r2, [r3, #0]
				return 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e011      	b.n	8000c70 <lockBox+0x8c>
			}
			else {
				return 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e00f      	b.n	8000c70 <lockBox+0x8c>
			}
		case 2:
			//Relocks the box if 35 (#) is entered
			//Updates to LCD are handled in keypadLock
			if (keypad == 35) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b23      	cmp	r3, #35	; 0x23
 8000c54:	d109      	bne.n	8000c6a <lockBox+0x86>
				servoClose();
 8000c56:	f000 f8ef 	bl	8000e38 <servoClose>
				lockState = 0;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <lockBox+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
				dialState = 0;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <lockBox+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
				return 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e002      	b.n	8000c70 <lockBox+0x8c>
			}
			else {
				return 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <lockBox+0x8c>
			}
		default:
			return 0;
 8000c6e:	2300      	movs	r3, #0
	}
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000150 	.word	0x20000150
 8000c7c:	2000009c 	.word	0x2000009c
 8000c80:	200000c4 	.word	0x200000c4
 8000c84:	200000e8 	.word	0x200000e8
 8000c88:	2000014c 	.word	0x2000014c

08000c8c <arraysEqual>:

//Function used to determine if keypadInput and keypadCode are the same
int arraysEqual(int arr1[], int arr2[], int size) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e010      	b.n	8000cc0 <arraysEqual+0x34>
        if (arr1[i] != arr2[i]) {
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	440b      	add	r3, r1
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d001      	beq.n	8000cba <arraysEqual+0x2e>
            return 0; // Arrays are not equal
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e007      	b.n	8000cca <arraysEqual+0x3e>
    for (int i = 0; i < size; i++) {
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbea      	blt.n	8000c9e <arraysEqual+0x12>
        }
    }
    return 1; // Arrays are equal
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <servoPinInit>:

#define GPIOAEN		(1U<<0)
#define SERVO_PIN  0

//Servo pin initialization
void servoPinInit() {
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB2ENR  |= RCC_AHB2ENR_GPIOAEN;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <servoPinInit+0x8c>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <servoPinInit+0x8c>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Step 1: Clear bits
	GPIOA->MODER  	&= ~(0x03 << (2*SERVO_PIN));
 8000ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf2:	f023 0303 	bic.w	r3, r3, #3
 8000cf6:	6013      	str	r3, [r2, #0]

	// Step 2: set AF mode: use Input(00), Output(01), Alternate Function(10), Analog(11)
	GPIOA->MODER  	|=   0x02 << (2*SERVO_PIN);
 8000cf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	6013      	str	r3, [r2, #0]

	// 	Clear AF register
	GPIOA->AFR[0] 	&= ~(0xF << (4*SERVO_PIN));
 8000d08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d12:	f023 030f 	bic.w	r3, r3, #15
 8000d16:	6213      	str	r3, [r2, #32]
	// step 3, set	AF to AF 2 for TIM5_CH1
	GPIOA->AFR[0] 	|=   0x2 << (4*SERVO_PIN);
 8000d18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6213      	str	r3, [r2, #32]

	//Set I/O output speed value as high speed
	// Speed clear bits
	GPIOA->OSPEEDR  &= ~(0x03<<(2*SERVO_PIN));
 8000d28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	6093      	str	r3, [r2, #8]
	// Set Speed
	GPIOA->OSPEEDR  |=   0x03<<(2*SERVO_PIN);
 8000d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d42:	f043 0303 	orr.w	r3, r3, #3
 8000d46:	6093      	str	r3, [r2, #8]

	//Set I/O as no pull-up pull-down
	// No PUPD(00, reset), Pull-up(01), Pull-down(10), Reserved (11)
	GPIOA->PUPDR    |= (0x03<<(2*SERVO_PIN));
 8000d48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d52:	f043 0303 	orr.w	r3, r3, #3
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <TIM5CH1Init>:

//Timer 5 Channel 1 Initialization
void TIM5CH1Init() {
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	// Enable the timer clock
	// Enable TIMER clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM5EN;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <TIM5CH1Init+0x94>)
 8000d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d70:	4a22      	ldr	r2, [pc, #136]	; (8000dfc <TIM5CH1Init+0x94>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6593      	str	r3, [r2, #88]	; 0x58

	// Counting direction: 0 = up-counting, 1 = down-counting
	TIM5->CR1 &= ~TIM_CR1_DIR;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <TIM5CH1Init+0x98>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <TIM5CH1Init+0x98>)
 8000d7e:	f023 0310 	bic.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]

    TIM5->PSC = 39;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <TIM5CH1Init+0x98>)
 8000d86:	2227      	movs	r2, #39	; 0x27
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
    // Auto-reload: Upcouting (0..ARR), Downcouting (ARR..0)
    TIM5->ARR = 2000;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <TIM5CH1Init+0x98>)
 8000d8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
    // Clear ouput compare mode bits for channel 1
	TIM5->CCMR1 &= ~TIM_CCMR1_OC1M;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <TIM5CH1Init+0x98>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <TIM5CH1Init+0x98>)
 8000d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000da0:	6193      	str	r3, [r2, #24]
	// OC1M = 110 for PWM Mode 1 output on ch1
    TIM5->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <TIM5CH1Init+0x98>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <TIM5CH1Init+0x98>)
 8000da8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000dac:	6193      	str	r3, [r2, #24]
    // Output 1 preload enable
    TIM5->CCMR1 |= TIM_CCMR1_OC1PE;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <TIM5CH1Init+0x98>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <TIM5CH1Init+0x98>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6193      	str	r3, [r2, #24]

	// Select output polarity: 0 = active high, 1 = active low
	TIM5->CCMR1 |= TIM_CCER_CC1NP; // select active high
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6193      	str	r3, [r2, #24]

    // Enable output for ch1
	TIM5->CCER |= TIM_CCER_CC1E;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6213      	str	r3, [r2, #32]

    // Main output enable (MOE): 0 = Disable, 1 = Enable
	TIM5->BDTR |= TIM_BDTR_MOE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44

	// Output Compare Register for channel 1
	TIM5->CCR1  = 1000;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <TIM5CH1Init+0x98>)
 8000de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
	// Enable counter
	TIM5->CR1  |= TIM_CR1_CEN;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <TIM5CH1Init+0x98>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <TIM5CH1Init+0x98>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40000c00 	.word	0x40000c00

08000e04 <servoOpen>:

//Opens the servo
void servoOpen() { // 1.7ms
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
	TIM5->CCR1  = 200;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <servoOpen+0x30>)
 8000e0c:	22c8      	movs	r2, #200	; 0xc8
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
	for(int i = 0; i < 64000; i++) {}
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	e002      	b.n	8000e1c <servoOpen+0x18>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000e22:	dbf8      	blt.n	8000e16 <servoOpen+0x12>

}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40000c00 	.word	0x40000c00

08000e38 <servoClose>:

//Closes the servo
void servoClose() { // 1.3ms
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
	TIM5->CCR1  = 100;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <servoClose+0x30>)
 8000e40:	2264      	movs	r2, #100	; 0x64
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
	for(int i = 0; i < 64000; i++) {}
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	e002      	b.n	8000e50 <servoClose+0x18>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000e56:	dbf8      	blt.n	8000e4a <servoClose+0x12>

}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40000c00 	.word	0x40000c00

08000e6c <debug_uart_init>:
int __io_putchar(int ch) {
	uart_write(ch);
	return ch;
}

void debug_uart_init(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=RCC_AHB2ENR_GPIOAEN;
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <debug_uart_init+0x9c>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <debug_uart_init+0x9c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set the mode of PA2 (USART2_TX) to AF mode*/
	GPIOA->MODER &= ~(1U<<4);
 8000e7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e86:	f023 0310 	bic.w	r3, r3, #16
 8000e8a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	6013      	str	r3, [r2, #0]

	/*Set AF type to AF7(UART2_TX)*/
    GPIOA->AFR[0] |=(1U<<8);
 8000e9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<9);
 8000eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<10);
 8000ebc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<11);
 8000ecc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eda:	6213      	str	r3, [r2, #32]

    /*Enable clock access to UART2EN in APB1ENR*/
    RCC->APB1ENR1 |=	UART2EN;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <debug_uart_init+0x9c>)
 8000ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <debug_uart_init+0x9c>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58

	/*Configure UART baud rate */
    uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000ee8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <debug_uart_init+0xa0>)
 8000eee:	f000 f825 	bl	8000f3c <uart_set_baudrate>

	/*Configure transfer direction  (Transmit Enable) */
    USART2->CR1 = CR1_TE; //| CR1_RE/* bit 3*/
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <debug_uart_init+0xa4>)
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]

	/*Enable UART Module (USART Enable)*/
    USART2->CR1 |= CR1_UE; /*bit 0*/
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <debug_uart_init+0xa4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <debug_uart_init+0xa4>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	003d0900 	.word	0x003d0900
 8000f10:	40004400 	.word	0x40004400

08000f14 <compute_uart_bd>:
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);
}


uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	085a      	lsrs	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	441a      	add	r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	b29b      	uxth	r3, r3
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <uart_set_baudrate>:

void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	USART2-> BRR = compute_uart_bd(periph_clk,baudrate);
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ffe3 	bl	8000f14 <compute_uart_bd>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <uart_set_baudrate+0x24>)
 8000f54:	60da      	str	r2, [r3, #12]
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40004400 	.word	0x40004400

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f92:	f000 f819 	bl	8000fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fc97 	bl	80008c8 <main>

08000f9a <LoopForever>:

LoopForever:
  b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8000fa8:	08001030 	.word	0x08001030
  ldr r2, =_sbss
 8000fac:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000fb0:	2000017c 	.word	0x2000017c

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>

08000fb6 <memset>:
 8000fb6:	4402      	add	r2, r0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d100      	bne.n	8000fc0 <memset+0xa>
 8000fbe:	4770      	bx	lr
 8000fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8000fc4:	e7f9      	b.n	8000fba <memset+0x4>
	...

08000fc8 <__libc_init_array>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	4d0d      	ldr	r5, [pc, #52]	; (8001000 <__libc_init_array+0x38>)
 8000fcc:	4c0d      	ldr	r4, [pc, #52]	; (8001004 <__libc_init_array+0x3c>)
 8000fce:	1b64      	subs	r4, r4, r5
 8000fd0:	10a4      	asrs	r4, r4, #2
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	42a6      	cmp	r6, r4
 8000fd6:	d109      	bne.n	8000fec <__libc_init_array+0x24>
 8000fd8:	4d0b      	ldr	r5, [pc, #44]	; (8001008 <__libc_init_array+0x40>)
 8000fda:	4c0c      	ldr	r4, [pc, #48]	; (800100c <__libc_init_array+0x44>)
 8000fdc:	f000 f818 	bl	8001010 <_init>
 8000fe0:	1b64      	subs	r4, r4, r5
 8000fe2:	10a4      	asrs	r4, r4, #2
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	42a6      	cmp	r6, r4
 8000fe8:	d105      	bne.n	8000ff6 <__libc_init_array+0x2e>
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff0:	4798      	blx	r3
 8000ff2:	3601      	adds	r6, #1
 8000ff4:	e7ee      	b.n	8000fd4 <__libc_init_array+0xc>
 8000ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffa:	4798      	blx	r3
 8000ffc:	3601      	adds	r6, #1
 8000ffe:	e7f2      	b.n	8000fe6 <__libc_init_array+0x1e>
 8001000:	08001028 	.word	0x08001028
 8001004:	08001028 	.word	0x08001028
 8001008:	08001028 	.word	0x08001028
 800100c:	0800102c 	.word	0x0800102c

08001010 <_init>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr

0800101c <_fini>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr
