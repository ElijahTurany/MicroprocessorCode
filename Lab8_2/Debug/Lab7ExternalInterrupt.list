
Lab7ExternalInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080015e8  080015e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001628  08001628  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001628  08001628  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001628  08001628  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000227c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000849  00000000  00000000  0002234b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001f0  00000000  00000000  00022b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000014e  00000000  00000000  00022d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e5f4  00000000  00000000  00022ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003127  00000000  00000000  000414ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a4509  00000000  00000000  000445f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d38  00000000  00000000  000e8afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000e9834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080015d0 	.word	0x080015d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080015d0 	.word	0x080015d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <led_init>:
#define LED_PIN 	 (1U<<5)



void led_init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
		// Enable the peripheral clock of GPIO Port
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   		//typo here
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <led_init+0x3c>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <led_init+0x3c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c

		// Set GPIO Mode to AlterFunc(10)
		GPIOA->MODER &= ~(1U<<11);    //typo here
 8000280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800028e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<10);    //typo here
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029e:	6013      	str	r3, [r2, #0]
		  // No pull-up, no pull-down
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000

080002b0 <TIM2_IRQHandler>:

    TIM2->CR1  |= TIM_CR1_CEN;
}


void TIM2_IRQHandler(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	if((TIM2->SR) & (TIM_SR_UIF)) {
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d009      	beq.n	80002d6 <TIM2_IRQHandler+0x26>
		TIM2->SR &= ~TIM_SR_UIF;
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002cc:	f023 0301 	bic.w	r3, r3, #1
 80002d0:	6113      	str	r3, [r2, #16]
		//TIM2->SR = 0;
		TIM2_callback();
 80002d2:	f000 f803 	bl	80002dc <TIM2_callback>

	}
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <TIM2_callback>:

void TIM2_callback(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	printf("Interrupt\n\r");
 80002e0:	4806      	ldr	r0, [pc, #24]	; (80002fc <TIM2_callback+0x20>)
 80002e2:	f000 faff 	bl	80008e4 <iprintf>
	GPIOA->ODR ^=LED_PIN;
 80002e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f0:	f083 0320 	eor.w	r3, r3, #32
 80002f4:	6153      	str	r3, [r2, #20]

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	080015e8 	.word	0x080015e8

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db0b      	blt.n	800032a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <__NVIC_EnableIRQ+0x38>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <pa1_exti_init>:
#define SYSCFGEN (1U<<0)
#define EXTI_MR_MR1 (1U<<1)
#define EXTI_TR1 (1U<<1)
#define EXTI_PR1 (1U<<1)

void pa1_exti_init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop

	__disable_irq();
	RCC->APB2ENR |= GPIOAEN;
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <pa1_exti_init+0x98>)
 8000346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000348:	4a22      	ldr	r2, [pc, #136]	; (80003d4 <pa1_exti_init+0x98>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6613      	str	r3, [r2, #96]	; 0x60

	RCC->APB2ENR |= SYSCFGEN;
 8000350:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <pa1_exti_init+0x98>)
 8000352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000354:	4a1f      	ldr	r2, [pc, #124]	; (80003d4 <pa1_exti_init+0x98>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6613      	str	r3, [r2, #96]	; 0x60

	GPIOA->MODER &=~ (1U<<2);
 800035c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000366:	f023 0304 	bic.w	r3, r3, #4
 800036a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<3);
 800036c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000376:	f023 0308 	bic.w	r3, r3, #8
 800037a:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &=~ (1U<<2);
 800037c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000386:	f023 0304 	bic.w	r3, r3, #4
 800038a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<3);
 800038c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[0] = 0;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <pa1_exti_init+0x9c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]

	EXTI->IMR1 |= EXTI_MR_MR1;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <pa1_exti_init+0xa0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <pa1_exti_init+0xa0>)
 80003a8:	f043 0302 	orr.w	r3, r3, #2
 80003ac:	6013      	str	r3, [r2, #0]

	EXTI->RTSR1 |= EXTI_TR1;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <pa1_exti_init+0xa0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <pa1_exti_init+0xa0>)
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	6093      	str	r3, [r2, #8]

	EXTI->FTSR1 |= EXTI_TR1;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <pa1_exti_init+0xa0>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a07      	ldr	r2, [pc, #28]	; (80003dc <pa1_exti_init+0xa0>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI1_IRQn);
 80003c6:	2007      	movs	r0, #7
 80003c8:	f7ff ff9a 	bl	8000300 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003cc:	b662      	cpsie	i
}
 80003ce:	bf00      	nop
//
//	EXTI->IMR1 |= EXTI_IMR1_IM13;
//
//	EXTI->FTSR1 |= EXTI_FTSR1_FT_13;

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000
 80003dc:	40010400 	.word	0x40010400

080003e0 <exti1_callback>:

uint32_t g_exti1_counter;

void exti1_callback(void) {
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	g_exti1_counter++;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <exti1_callback+0x18>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a03      	ldr	r2, [pc, #12]	; (80003f8 <exti1_callback+0x18>)
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	20000078 	.word	0x20000078

080003fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	exti1_callback();
 8000400:	f7ff ffee 	bl	80003e0 <exti1_callback>

	EXTI->PR1 |= EXTI_PR1;
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <EXTI1_IRQHandler+0x18>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a02      	ldr	r2, [pc, #8]	; (8000414 <EXTI1_IRQHandler+0x18>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6153      	str	r3, [r2, #20]
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40010400 	.word	0x40010400

08000418 <fpu_enable>:
#include "stm32l476xx.h"



void fpu_enable(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
	/*Enable floating point unit: Enable CP10 and CP11 for full access*/
	SCB->CPACR |=(1<20);
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <fpu_enable+0x50>)
 800041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000422:	4a11      	ldr	r2, [pc, #68]	; (8000468 <fpu_enable+0x50>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<21);
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <fpu_enable+0x50>)
 800042e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000432:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <fpu_enable+0x50>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<22);
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <fpu_enable+0x50>)
 800043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000442:	4a09      	ldr	r2, [pc, #36]	; (8000468 <fpu_enable+0x50>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<23);
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <fpu_enable+0x50>)
 800044e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <fpu_enable+0x50>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <main>:
#define PIN5		(1U<<5)
#define LED_PIN		PIN5


int main()
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

	/*Enable FPU*/
	fpu_enable();
 8000470:	f7ff ffd2 	bl	8000418 <fpu_enable>

    /*initialize UART*/
	debug_uart_init();
 8000474:	f000 f8b4 	bl	80005e0 <debug_uart_init>
	//timebase_init();

	led_init();
 8000478:	f7ff fefa 	bl	8000270 <led_init>

	pa1_exti_init();
 800047c:	f7ff ff5e 	bl	800033c <pa1_exti_init>

	while(1)
 8000480:	e7fe      	b.n	8000480 <main+0x14>

08000482 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e00a      	b.n	80004aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000494:	f3af 8000 	nop.w
 8000498:	4601      	mov	r1, r0
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	1c5a      	adds	r2, r3, #1
 800049e:	60ba      	str	r2, [r7, #8]
 80004a0:	b2ca      	uxtb	r2, r1
 80004a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	3301      	adds	r3, #1
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	dbf0      	blt.n	8000494 <_read+0x12>
  }

  return len;
 80004b2:	687b      	ldr	r3, [r7, #4]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3718      	adds	r7, #24
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e009      	b.n	80004e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	60ba      	str	r2, [r7, #8]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f876 	bl	80005c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	dbf1      	blt.n	80004ce <_write+0x12>
  }
  return len;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <_close>:

int _close(int file)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800051c:	605a      	str	r2, [r3, #4]
  return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <_isatty>:

int _isatty(int file)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000534:	2301      	movs	r3, #1
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000542:	b480      	push	{r7}
 8000544:	b085      	sub	sp, #20
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <_sbrk+0x5c>)
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <_sbrk+0x60>)
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d102      	bne.n	800057e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <_sbrk+0x64>)
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <_sbrk+0x68>)
 800057c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	d207      	bcs.n	800059c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800058c:	f000 fa4e 	bl	8000a2c <__errno>
 8000590:	4603      	mov	r3, r0
 8000592:	220c      	movs	r2, #12
 8000594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	e009      	b.n	80005b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <_sbrk+0x64>)
 80005ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20018000 	.word	0x20018000
 80005bc:	00000400 	.word	0x00000400
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	200001d0 	.word	0x200001d0

080005c8 <__io_putchar>:
//#define TX_PIN 2
//#define RX_PIN 3



int __io_putchar(int ch){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f859 	bl	8000688 <uart_write>
	//uart2_write(USART2, ch);
	return ch;
 80005d6:	687b      	ldr	r3, [r7, #4]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <debug_uart_init>:

void debug_uart_init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=RCC_AHB2ENR_GPIOAEN;   //typo here
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <debug_uart_init+0x9c>)
 80005e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <debug_uart_init+0x9c>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set the mode of PA2 (USART2_TX) to AF mode*/
	GPIOA->MODER &= ~(1U<<4);    //typo here
 80005f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fa:	f023 0310 	bic.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);    //typo here
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6013      	str	r3, [r2, #0]

	/*Set AF type to AF7(UART2_TX)*/
    GPIOA->AFR[0] |=(1U<<8);  //typo here
 8000610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000614:	6a1b      	ldr	r3, [r3, #32]
 8000616:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<9);  //typo here
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<10);  //typo here
 8000630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000634:	6a1b      	ldr	r3, [r3, #32]
 8000636:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800063e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<11);  //typo here
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800064e:	6213      	str	r3, [r2, #32]
//        GPIOA->AFR[0] |=(1U<<12);  //typo here
//        GPIOA->AFR[0] |=(1U<<13);  //typo here
//        GPIOA->AFR[0] |=(1U<<14);  //typo here
//        GPIOA->AFR[0] &= ~(1U<<15);  //typo here
    /*Enable clock access to UART2EN in APB1ENR*/
    RCC->APB1ENR1 |=	UART2EN;   //typo here
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <debug_uart_init+0x9c>)
 8000652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <debug_uart_init+0x9c>)
 8000656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065a:	6593      	str	r3, [r2, #88]	; 0x58
    //RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock

	/*Configure UART baud rate */
    uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 800065c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <debug_uart_init+0xa0>)
 8000662:	f000 f83f 	bl	80006e4 <uart_set_baudrate>

	/*Configure transfer direction  (Transmit Enable) */
    USART2->CR1 = CR1_TE; //| CR1_RE/* bit 3*/
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <debug_uart_init+0xa4>)
 8000668:	2208      	movs	r2, #8
 800066a:	601a      	str	r2, [r3, #0]

	/*Enable UART Module (USART Enable)*/
    USART2->CR1 |= CR1_UE; /*bit 0*/
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <debug_uart_init+0xa4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <debug_uart_init+0xa4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	003d0900 	.word	0x003d0900
 8000684:	40004400 	.word	0x40004400

08000688 <uart_write>:

static void uart_write(int ch){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	/*make sure transmitter data register is empty*/
		while(!(USART2->ISR & ISR_TXE)){}  //typo here
 8000690:	bf00      	nop
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <uart_write+0x30>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f9      	beq.n	8000692 <uart_write+0xa>
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);   //typo here
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <uart_write+0x30>)
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	b292      	uxth	r2, r2
 80006a8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40004400 	.word	0x40004400

080006bc <compute_uart_bd>:
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);   //typo here
}

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	085a      	lsrs	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	441a      	add	r2, r3
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	b29b      	uxth	r3, r3
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
	...

080006e4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	USART2-> BRR = compute_uart_bd(periph_clk,baudrate);
 80006ee:	6839      	ldr	r1, [r7, #0]
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffe3 	bl	80006bc <compute_uart_bd>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <uart_set_baudrate+0x24>)
 80006fc:	60da      	str	r2, [r3, #12]
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40004400 	.word	0x40004400

0800070c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000710:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073a:	f000 f97d 	bl	8000a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073e:	f7ff fe95 	bl	800046c <main>

08000742 <LoopForever>:

LoopForever:
  b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   r0, =_estack
 8000744:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000750:	08001630 	.word	0x08001630
  ldr r2, =_sbss
 8000754:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000758:	200001cc 	.word	0x200001cc

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <std>:
 8000760:	2300      	movs	r3, #0
 8000762:	b510      	push	{r4, lr}
 8000764:	4604      	mov	r4, r0
 8000766:	e9c0 3300 	strd	r3, r3, [r0]
 800076a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800076e:	6083      	str	r3, [r0, #8]
 8000770:	8181      	strh	r1, [r0, #12]
 8000772:	6643      	str	r3, [r0, #100]	; 0x64
 8000774:	81c2      	strh	r2, [r0, #14]
 8000776:	6183      	str	r3, [r0, #24]
 8000778:	4619      	mov	r1, r3
 800077a:	2208      	movs	r2, #8
 800077c:	305c      	adds	r0, #92	; 0x5c
 800077e:	f000 f906 	bl	800098e <memset>
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <std+0x58>)
 8000784:	6263      	str	r3, [r4, #36]	; 0x24
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <std+0x5c>)
 8000788:	62a3      	str	r3, [r4, #40]	; 0x28
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <std+0x60>)
 800078c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <std+0x64>)
 8000790:	6323      	str	r3, [r4, #48]	; 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <std+0x68>)
 8000794:	6224      	str	r4, [r4, #32]
 8000796:	429c      	cmp	r4, r3
 8000798:	d006      	beq.n	80007a8 <std+0x48>
 800079a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800079e:	4294      	cmp	r4, r2
 80007a0:	d002      	beq.n	80007a8 <std+0x48>
 80007a2:	33d0      	adds	r3, #208	; 0xd0
 80007a4:	429c      	cmp	r4, r3
 80007a6:	d105      	bne.n	80007b4 <std+0x54>
 80007a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b0:	f000 b966 	b.w	8000a80 <__retarget_lock_init_recursive>
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	bf00      	nop
 80007b8:	08000909 	.word	0x08000909
 80007bc:	0800092b 	.word	0x0800092b
 80007c0:	08000963 	.word	0x08000963
 80007c4:	08000987 	.word	0x08000987
 80007c8:	20000080 	.word	0x20000080

080007cc <stdio_exit_handler>:
 80007cc:	4a02      	ldr	r2, [pc, #8]	; (80007d8 <stdio_exit_handler+0xc>)
 80007ce:	4903      	ldr	r1, [pc, #12]	; (80007dc <stdio_exit_handler+0x10>)
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <stdio_exit_handler+0x14>)
 80007d2:	f000 b869 	b.w	80008a8 <_fwalk_sglue>
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	0800132d 	.word	0x0800132d
 80007e0:	2000000c 	.word	0x2000000c

080007e4 <cleanup_stdio>:
 80007e4:	6841      	ldr	r1, [r0, #4]
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <cleanup_stdio+0x34>)
 80007e8:	4299      	cmp	r1, r3
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	d001      	beq.n	80007f4 <cleanup_stdio+0x10>
 80007f0:	f000 fd9c 	bl	800132c <_fflush_r>
 80007f4:	68a1      	ldr	r1, [r4, #8]
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <cleanup_stdio+0x38>)
 80007f8:	4299      	cmp	r1, r3
 80007fa:	d002      	beq.n	8000802 <cleanup_stdio+0x1e>
 80007fc:	4620      	mov	r0, r4
 80007fe:	f000 fd95 	bl	800132c <_fflush_r>
 8000802:	68e1      	ldr	r1, [r4, #12]
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <cleanup_stdio+0x3c>)
 8000806:	4299      	cmp	r1, r3
 8000808:	d004      	beq.n	8000814 <cleanup_stdio+0x30>
 800080a:	4620      	mov	r0, r4
 800080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000810:	f000 bd8c 	b.w	800132c <_fflush_r>
 8000814:	bd10      	pop	{r4, pc}
 8000816:	bf00      	nop
 8000818:	20000080 	.word	0x20000080
 800081c:	200000e8 	.word	0x200000e8
 8000820:	20000150 	.word	0x20000150

08000824 <global_stdio_init.part.0>:
 8000824:	b510      	push	{r4, lr}
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <global_stdio_init.part.0+0x30>)
 8000828:	4c0b      	ldr	r4, [pc, #44]	; (8000858 <global_stdio_init.part.0+0x34>)
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <global_stdio_init.part.0+0x38>)
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	4620      	mov	r0, r4
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	f7ff ff94 	bl	8000760 <std>
 8000838:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800083c:	2201      	movs	r2, #1
 800083e:	2109      	movs	r1, #9
 8000840:	f7ff ff8e 	bl	8000760 <std>
 8000844:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000848:	2202      	movs	r2, #2
 800084a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800084e:	2112      	movs	r1, #18
 8000850:	f7ff bf86 	b.w	8000760 <std>
 8000854:	200001b8 	.word	0x200001b8
 8000858:	20000080 	.word	0x20000080
 800085c:	080007cd 	.word	0x080007cd

08000860 <__sfp_lock_acquire>:
 8000860:	4801      	ldr	r0, [pc, #4]	; (8000868 <__sfp_lock_acquire+0x8>)
 8000862:	f000 b90e 	b.w	8000a82 <__retarget_lock_acquire_recursive>
 8000866:	bf00      	nop
 8000868:	200001c1 	.word	0x200001c1

0800086c <__sfp_lock_release>:
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <__sfp_lock_release+0x8>)
 800086e:	f000 b909 	b.w	8000a84 <__retarget_lock_release_recursive>
 8000872:	bf00      	nop
 8000874:	200001c1 	.word	0x200001c1

08000878 <__sinit>:
 8000878:	b510      	push	{r4, lr}
 800087a:	4604      	mov	r4, r0
 800087c:	f7ff fff0 	bl	8000860 <__sfp_lock_acquire>
 8000880:	6a23      	ldr	r3, [r4, #32]
 8000882:	b11b      	cbz	r3, 800088c <__sinit+0x14>
 8000884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000888:	f7ff bff0 	b.w	800086c <__sfp_lock_release>
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <__sinit+0x28>)
 800088e:	6223      	str	r3, [r4, #32]
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__sinit+0x2c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f5      	bne.n	8000884 <__sinit+0xc>
 8000898:	f7ff ffc4 	bl	8000824 <global_stdio_init.part.0>
 800089c:	e7f2      	b.n	8000884 <__sinit+0xc>
 800089e:	bf00      	nop
 80008a0:	080007e5 	.word	0x080007e5
 80008a4:	200001b8 	.word	0x200001b8

080008a8 <_fwalk_sglue>:
 80008a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008ac:	4607      	mov	r7, r0
 80008ae:	4688      	mov	r8, r1
 80008b0:	4614      	mov	r4, r2
 80008b2:	2600      	movs	r6, #0
 80008b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008b8:	f1b9 0901 	subs.w	r9, r9, #1
 80008bc:	d505      	bpl.n	80008ca <_fwalk_sglue+0x22>
 80008be:	6824      	ldr	r4, [r4, #0]
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	d1f7      	bne.n	80008b4 <_fwalk_sglue+0xc>
 80008c4:	4630      	mov	r0, r6
 80008c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ca:	89ab      	ldrh	r3, [r5, #12]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d907      	bls.n	80008e0 <_fwalk_sglue+0x38>
 80008d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008d4:	3301      	adds	r3, #1
 80008d6:	d003      	beq.n	80008e0 <_fwalk_sglue+0x38>
 80008d8:	4629      	mov	r1, r5
 80008da:	4638      	mov	r0, r7
 80008dc:	47c0      	blx	r8
 80008de:	4306      	orrs	r6, r0
 80008e0:	3568      	adds	r5, #104	; 0x68
 80008e2:	e7e9      	b.n	80008b8 <_fwalk_sglue+0x10>

080008e4 <iprintf>:
 80008e4:	b40f      	push	{r0, r1, r2, r3}
 80008e6:	b507      	push	{r0, r1, r2, lr}
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <iprintf+0x20>)
 80008ea:	ab04      	add	r3, sp, #16
 80008ec:	6808      	ldr	r0, [r1, #0]
 80008ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80008f2:	6881      	ldr	r1, [r0, #8]
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	f000 f9e9 	bl	8000ccc <_vfiprintf_r>
 80008fa:	b003      	add	sp, #12
 80008fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000900:	b004      	add	sp, #16
 8000902:	4770      	bx	lr
 8000904:	20000058 	.word	0x20000058

08000908 <__sread>:
 8000908:	b510      	push	{r4, lr}
 800090a:	460c      	mov	r4, r1
 800090c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000910:	f000 f868 	bl	80009e4 <_read_r>
 8000914:	2800      	cmp	r0, #0
 8000916:	bfab      	itete	ge
 8000918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800091a:	89a3      	ldrhlt	r3, [r4, #12]
 800091c:	181b      	addge	r3, r3, r0
 800091e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000922:	bfac      	ite	ge
 8000924:	6563      	strge	r3, [r4, #84]	; 0x54
 8000926:	81a3      	strhlt	r3, [r4, #12]
 8000928:	bd10      	pop	{r4, pc}

0800092a <__swrite>:
 800092a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800092e:	461f      	mov	r7, r3
 8000930:	898b      	ldrh	r3, [r1, #12]
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	4605      	mov	r5, r0
 8000936:	460c      	mov	r4, r1
 8000938:	4616      	mov	r6, r2
 800093a:	d505      	bpl.n	8000948 <__swrite+0x1e>
 800093c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000940:	2302      	movs	r3, #2
 8000942:	2200      	movs	r2, #0
 8000944:	f000 f83c 	bl	80009c0 <_lseek_r>
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800094e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000952:	81a3      	strh	r3, [r4, #12]
 8000954:	4632      	mov	r2, r6
 8000956:	463b      	mov	r3, r7
 8000958:	4628      	mov	r0, r5
 800095a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800095e:	f000 b853 	b.w	8000a08 <_write_r>

08000962 <__sseek>:
 8000962:	b510      	push	{r4, lr}
 8000964:	460c      	mov	r4, r1
 8000966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800096a:	f000 f829 	bl	80009c0 <_lseek_r>
 800096e:	1c43      	adds	r3, r0, #1
 8000970:	89a3      	ldrh	r3, [r4, #12]
 8000972:	bf15      	itete	ne
 8000974:	6560      	strne	r0, [r4, #84]	; 0x54
 8000976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800097a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800097e:	81a3      	strheq	r3, [r4, #12]
 8000980:	bf18      	it	ne
 8000982:	81a3      	strhne	r3, [r4, #12]
 8000984:	bd10      	pop	{r4, pc}

08000986 <__sclose>:
 8000986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098a:	f000 b809 	b.w	80009a0 <_close_r>

0800098e <memset>:
 800098e:	4402      	add	r2, r0
 8000990:	4603      	mov	r3, r0
 8000992:	4293      	cmp	r3, r2
 8000994:	d100      	bne.n	8000998 <memset+0xa>
 8000996:	4770      	bx	lr
 8000998:	f803 1b01 	strb.w	r1, [r3], #1
 800099c:	e7f9      	b.n	8000992 <memset+0x4>
	...

080009a0 <_close_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4d06      	ldr	r5, [pc, #24]	; (80009bc <_close_r+0x1c>)
 80009a4:	2300      	movs	r3, #0
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	f7ff fda2 	bl	80004f4 <_close>
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	d102      	bne.n	80009ba <_close_r+0x1a>
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	b103      	cbz	r3, 80009ba <_close_r+0x1a>
 80009b8:	6023      	str	r3, [r4, #0]
 80009ba:	bd38      	pop	{r3, r4, r5, pc}
 80009bc:	200001bc 	.word	0x200001bc

080009c0 <_lseek_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d07      	ldr	r5, [pc, #28]	; (80009e0 <_lseek_r+0x20>)
 80009c4:	4604      	mov	r4, r0
 80009c6:	4608      	mov	r0, r1
 80009c8:	4611      	mov	r1, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	602a      	str	r2, [r5, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f7ff fdb7 	bl	8000542 <_lseek>
 80009d4:	1c43      	adds	r3, r0, #1
 80009d6:	d102      	bne.n	80009de <_lseek_r+0x1e>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b103      	cbz	r3, 80009de <_lseek_r+0x1e>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	bd38      	pop	{r3, r4, r5, pc}
 80009e0:	200001bc 	.word	0x200001bc

080009e4 <_read_r>:
 80009e4:	b538      	push	{r3, r4, r5, lr}
 80009e6:	4d07      	ldr	r5, [pc, #28]	; (8000a04 <_read_r+0x20>)
 80009e8:	4604      	mov	r4, r0
 80009ea:	4608      	mov	r0, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	f7ff fd45 	bl	8000482 <_read>
 80009f8:	1c43      	adds	r3, r0, #1
 80009fa:	d102      	bne.n	8000a02 <_read_r+0x1e>
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	b103      	cbz	r3, 8000a02 <_read_r+0x1e>
 8000a00:	6023      	str	r3, [r4, #0]
 8000a02:	bd38      	pop	{r3, r4, r5, pc}
 8000a04:	200001bc 	.word	0x200001bc

08000a08 <_write_r>:
 8000a08:	b538      	push	{r3, r4, r5, lr}
 8000a0a:	4d07      	ldr	r5, [pc, #28]	; (8000a28 <_write_r+0x20>)
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	4608      	mov	r0, r1
 8000a10:	4611      	mov	r1, r2
 8000a12:	2200      	movs	r2, #0
 8000a14:	602a      	str	r2, [r5, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f7ff fd50 	bl	80004bc <_write>
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	d102      	bne.n	8000a26 <_write_r+0x1e>
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	b103      	cbz	r3, 8000a26 <_write_r+0x1e>
 8000a24:	6023      	str	r3, [r4, #0]
 8000a26:	bd38      	pop	{r3, r4, r5, pc}
 8000a28:	200001bc 	.word	0x200001bc

08000a2c <__errno>:
 8000a2c:	4b01      	ldr	r3, [pc, #4]	; (8000a34 <__errno+0x8>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000058 	.word	0x20000058

08000a38 <__libc_init_array>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	4d0d      	ldr	r5, [pc, #52]	; (8000a70 <__libc_init_array+0x38>)
 8000a3c:	4c0d      	ldr	r4, [pc, #52]	; (8000a74 <__libc_init_array+0x3c>)
 8000a3e:	1b64      	subs	r4, r4, r5
 8000a40:	10a4      	asrs	r4, r4, #2
 8000a42:	2600      	movs	r6, #0
 8000a44:	42a6      	cmp	r6, r4
 8000a46:	d109      	bne.n	8000a5c <__libc_init_array+0x24>
 8000a48:	4d0b      	ldr	r5, [pc, #44]	; (8000a78 <__libc_init_array+0x40>)
 8000a4a:	4c0c      	ldr	r4, [pc, #48]	; (8000a7c <__libc_init_array+0x44>)
 8000a4c:	f000 fdc0 	bl	80015d0 <_init>
 8000a50:	1b64      	subs	r4, r4, r5
 8000a52:	10a4      	asrs	r4, r4, #2
 8000a54:	2600      	movs	r6, #0
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d105      	bne.n	8000a66 <__libc_init_array+0x2e>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a60:	4798      	blx	r3
 8000a62:	3601      	adds	r6, #1
 8000a64:	e7ee      	b.n	8000a44 <__libc_init_array+0xc>
 8000a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6a:	4798      	blx	r3
 8000a6c:	3601      	adds	r6, #1
 8000a6e:	e7f2      	b.n	8000a56 <__libc_init_array+0x1e>
 8000a70:	08001628 	.word	0x08001628
 8000a74:	08001628 	.word	0x08001628
 8000a78:	08001628 	.word	0x08001628
 8000a7c:	0800162c 	.word	0x0800162c

08000a80 <__retarget_lock_init_recursive>:
 8000a80:	4770      	bx	lr

08000a82 <__retarget_lock_acquire_recursive>:
 8000a82:	4770      	bx	lr

08000a84 <__retarget_lock_release_recursive>:
 8000a84:	4770      	bx	lr
	...

08000a88 <_free_r>:
 8000a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a8a:	2900      	cmp	r1, #0
 8000a8c:	d044      	beq.n	8000b18 <_free_r+0x90>
 8000a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a92:	9001      	str	r0, [sp, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f1a1 0404 	sub.w	r4, r1, #4
 8000a9a:	bfb8      	it	lt
 8000a9c:	18e4      	addlt	r4, r4, r3
 8000a9e:	f000 f8df 	bl	8000c60 <__malloc_lock>
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <_free_r+0x94>)
 8000aa4:	9801      	ldr	r0, [sp, #4]
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	b933      	cbnz	r3, 8000ab8 <_free_r+0x30>
 8000aaa:	6063      	str	r3, [r4, #4]
 8000aac:	6014      	str	r4, [r2, #0]
 8000aae:	b003      	add	sp, #12
 8000ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ab4:	f000 b8da 	b.w	8000c6c <__malloc_unlock>
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d908      	bls.n	8000ace <_free_r+0x46>
 8000abc:	6825      	ldr	r5, [r4, #0]
 8000abe:	1961      	adds	r1, r4, r5
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf01      	itttt	eq
 8000ac4:	6819      	ldreq	r1, [r3, #0]
 8000ac6:	685b      	ldreq	r3, [r3, #4]
 8000ac8:	1949      	addeq	r1, r1, r5
 8000aca:	6021      	streq	r1, [r4, #0]
 8000acc:	e7ed      	b.n	8000aaa <_free_r+0x22>
 8000ace:	461a      	mov	r2, r3
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	b10b      	cbz	r3, 8000ad8 <_free_r+0x50>
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d9fa      	bls.n	8000ace <_free_r+0x46>
 8000ad8:	6811      	ldr	r1, [r2, #0]
 8000ada:	1855      	adds	r5, r2, r1
 8000adc:	42a5      	cmp	r5, r4
 8000ade:	d10b      	bne.n	8000af8 <_free_r+0x70>
 8000ae0:	6824      	ldr	r4, [r4, #0]
 8000ae2:	4421      	add	r1, r4
 8000ae4:	1854      	adds	r4, r2, r1
 8000ae6:	42a3      	cmp	r3, r4
 8000ae8:	6011      	str	r1, [r2, #0]
 8000aea:	d1e0      	bne.n	8000aae <_free_r+0x26>
 8000aec:	681c      	ldr	r4, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	6053      	str	r3, [r2, #4]
 8000af2:	440c      	add	r4, r1
 8000af4:	6014      	str	r4, [r2, #0]
 8000af6:	e7da      	b.n	8000aae <_free_r+0x26>
 8000af8:	d902      	bls.n	8000b00 <_free_r+0x78>
 8000afa:	230c      	movs	r3, #12
 8000afc:	6003      	str	r3, [r0, #0]
 8000afe:	e7d6      	b.n	8000aae <_free_r+0x26>
 8000b00:	6825      	ldr	r5, [r4, #0]
 8000b02:	1961      	adds	r1, r4, r5
 8000b04:	428b      	cmp	r3, r1
 8000b06:	bf04      	itt	eq
 8000b08:	6819      	ldreq	r1, [r3, #0]
 8000b0a:	685b      	ldreq	r3, [r3, #4]
 8000b0c:	6063      	str	r3, [r4, #4]
 8000b0e:	bf04      	itt	eq
 8000b10:	1949      	addeq	r1, r1, r5
 8000b12:	6021      	streq	r1, [r4, #0]
 8000b14:	6054      	str	r4, [r2, #4]
 8000b16:	e7ca      	b.n	8000aae <_free_r+0x26>
 8000b18:	b003      	add	sp, #12
 8000b1a:	bd30      	pop	{r4, r5, pc}
 8000b1c:	200001c4 	.word	0x200001c4

08000b20 <sbrk_aligned>:
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	4e0e      	ldr	r6, [pc, #56]	; (8000b5c <sbrk_aligned+0x3c>)
 8000b24:	460c      	mov	r4, r1
 8000b26:	6831      	ldr	r1, [r6, #0]
 8000b28:	4605      	mov	r5, r0
 8000b2a:	b911      	cbnz	r1, 8000b32 <sbrk_aligned+0x12>
 8000b2c:	f000 fcbc 	bl	80014a8 <_sbrk_r>
 8000b30:	6030      	str	r0, [r6, #0]
 8000b32:	4621      	mov	r1, r4
 8000b34:	4628      	mov	r0, r5
 8000b36:	f000 fcb7 	bl	80014a8 <_sbrk_r>
 8000b3a:	1c43      	adds	r3, r0, #1
 8000b3c:	d00a      	beq.n	8000b54 <sbrk_aligned+0x34>
 8000b3e:	1cc4      	adds	r4, r0, #3
 8000b40:	f024 0403 	bic.w	r4, r4, #3
 8000b44:	42a0      	cmp	r0, r4
 8000b46:	d007      	beq.n	8000b58 <sbrk_aligned+0x38>
 8000b48:	1a21      	subs	r1, r4, r0
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f000 fcac 	bl	80014a8 <_sbrk_r>
 8000b50:	3001      	adds	r0, #1
 8000b52:	d101      	bne.n	8000b58 <sbrk_aligned+0x38>
 8000b54:	f04f 34ff 	mov.w	r4, #4294967295
 8000b58:	4620      	mov	r0, r4
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
 8000b5c:	200001c8 	.word	0x200001c8

08000b60 <_malloc_r>:
 8000b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b64:	1ccd      	adds	r5, r1, #3
 8000b66:	f025 0503 	bic.w	r5, r5, #3
 8000b6a:	3508      	adds	r5, #8
 8000b6c:	2d0c      	cmp	r5, #12
 8000b6e:	bf38      	it	cc
 8000b70:	250c      	movcc	r5, #12
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	4607      	mov	r7, r0
 8000b76:	db01      	blt.n	8000b7c <_malloc_r+0x1c>
 8000b78:	42a9      	cmp	r1, r5
 8000b7a:	d905      	bls.n	8000b88 <_malloc_r+0x28>
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	2600      	movs	r6, #0
 8000b82:	4630      	mov	r0, r6
 8000b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c5c <_malloc_r+0xfc>
 8000b8c:	f000 f868 	bl	8000c60 <__malloc_lock>
 8000b90:	f8d8 3000 	ldr.w	r3, [r8]
 8000b94:	461c      	mov	r4, r3
 8000b96:	bb5c      	cbnz	r4, 8000bf0 <_malloc_r+0x90>
 8000b98:	4629      	mov	r1, r5
 8000b9a:	4638      	mov	r0, r7
 8000b9c:	f7ff ffc0 	bl	8000b20 <sbrk_aligned>
 8000ba0:	1c43      	adds	r3, r0, #1
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	d155      	bne.n	8000c52 <_malloc_r+0xf2>
 8000ba6:	f8d8 4000 	ldr.w	r4, [r8]
 8000baa:	4626      	mov	r6, r4
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d145      	bne.n	8000c3c <_malloc_r+0xdc>
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d048      	beq.n	8000c46 <_malloc_r+0xe6>
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	4631      	mov	r1, r6
 8000bb8:	4638      	mov	r0, r7
 8000bba:	eb04 0903 	add.w	r9, r4, r3
 8000bbe:	f000 fc73 	bl	80014a8 <_sbrk_r>
 8000bc2:	4581      	cmp	r9, r0
 8000bc4:	d13f      	bne.n	8000c46 <_malloc_r+0xe6>
 8000bc6:	6821      	ldr	r1, [r4, #0]
 8000bc8:	1a6d      	subs	r5, r5, r1
 8000bca:	4629      	mov	r1, r5
 8000bcc:	4638      	mov	r0, r7
 8000bce:	f7ff ffa7 	bl	8000b20 <sbrk_aligned>
 8000bd2:	3001      	adds	r0, #1
 8000bd4:	d037      	beq.n	8000c46 <_malloc_r+0xe6>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	442b      	add	r3, r5
 8000bda:	6023      	str	r3, [r4, #0]
 8000bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d038      	beq.n	8000c56 <_malloc_r+0xf6>
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	42a2      	cmp	r2, r4
 8000be8:	d12b      	bne.n	8000c42 <_malloc_r+0xe2>
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	e00f      	b.n	8000c10 <_malloc_r+0xb0>
 8000bf0:	6822      	ldr	r2, [r4, #0]
 8000bf2:	1b52      	subs	r2, r2, r5
 8000bf4:	d41f      	bmi.n	8000c36 <_malloc_r+0xd6>
 8000bf6:	2a0b      	cmp	r2, #11
 8000bf8:	d917      	bls.n	8000c2a <_malloc_r+0xca>
 8000bfa:	1961      	adds	r1, r4, r5
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	6025      	str	r5, [r4, #0]
 8000c00:	bf18      	it	ne
 8000c02:	6059      	strne	r1, [r3, #4]
 8000c04:	6863      	ldr	r3, [r4, #4]
 8000c06:	bf08      	it	eq
 8000c08:	f8c8 1000 	streq.w	r1, [r8]
 8000c0c:	5162      	str	r2, [r4, r5]
 8000c0e:	604b      	str	r3, [r1, #4]
 8000c10:	4638      	mov	r0, r7
 8000c12:	f104 060b 	add.w	r6, r4, #11
 8000c16:	f000 f829 	bl	8000c6c <__malloc_unlock>
 8000c1a:	f026 0607 	bic.w	r6, r6, #7
 8000c1e:	1d23      	adds	r3, r4, #4
 8000c20:	1af2      	subs	r2, r6, r3
 8000c22:	d0ae      	beq.n	8000b82 <_malloc_r+0x22>
 8000c24:	1b9b      	subs	r3, r3, r6
 8000c26:	50a3      	str	r3, [r4, r2]
 8000c28:	e7ab      	b.n	8000b82 <_malloc_r+0x22>
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	6862      	ldr	r2, [r4, #4]
 8000c2e:	d1dd      	bne.n	8000bec <_malloc_r+0x8c>
 8000c30:	f8c8 2000 	str.w	r2, [r8]
 8000c34:	e7ec      	b.n	8000c10 <_malloc_r+0xb0>
 8000c36:	4623      	mov	r3, r4
 8000c38:	6864      	ldr	r4, [r4, #4]
 8000c3a:	e7ac      	b.n	8000b96 <_malloc_r+0x36>
 8000c3c:	4634      	mov	r4, r6
 8000c3e:	6876      	ldr	r6, [r6, #4]
 8000c40:	e7b4      	b.n	8000bac <_malloc_r+0x4c>
 8000c42:	4613      	mov	r3, r2
 8000c44:	e7cc      	b.n	8000be0 <_malloc_r+0x80>
 8000c46:	230c      	movs	r3, #12
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	f000 f80e 	bl	8000c6c <__malloc_unlock>
 8000c50:	e797      	b.n	8000b82 <_malloc_r+0x22>
 8000c52:	6025      	str	r5, [r4, #0]
 8000c54:	e7dc      	b.n	8000c10 <_malloc_r+0xb0>
 8000c56:	605b      	str	r3, [r3, #4]
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	bf00      	nop
 8000c5c:	200001c4 	.word	0x200001c4

08000c60 <__malloc_lock>:
 8000c60:	4801      	ldr	r0, [pc, #4]	; (8000c68 <__malloc_lock+0x8>)
 8000c62:	f7ff bf0e 	b.w	8000a82 <__retarget_lock_acquire_recursive>
 8000c66:	bf00      	nop
 8000c68:	200001c0 	.word	0x200001c0

08000c6c <__malloc_unlock>:
 8000c6c:	4801      	ldr	r0, [pc, #4]	; (8000c74 <__malloc_unlock+0x8>)
 8000c6e:	f7ff bf09 	b.w	8000a84 <__retarget_lock_release_recursive>
 8000c72:	bf00      	nop
 8000c74:	200001c0 	.word	0x200001c0

08000c78 <__sfputc_r>:
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	b410      	push	{r4}
 8000c80:	6093      	str	r3, [r2, #8]
 8000c82:	da08      	bge.n	8000c96 <__sfputc_r+0x1e>
 8000c84:	6994      	ldr	r4, [r2, #24]
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	db01      	blt.n	8000c8e <__sfputc_r+0x16>
 8000c8a:	290a      	cmp	r1, #10
 8000c8c:	d103      	bne.n	8000c96 <__sfputc_r+0x1e>
 8000c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c92:	f000 bb73 	b.w	800137c <__swbuf_r>
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	1c58      	adds	r0, r3, #1
 8000c9a:	6010      	str	r0, [r2, #0]
 8000c9c:	7019      	strb	r1, [r3, #0]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <__sfputs_r>:
 8000ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca8:	4606      	mov	r6, r0
 8000caa:	460f      	mov	r7, r1
 8000cac:	4614      	mov	r4, r2
 8000cae:	18d5      	adds	r5, r2, r3
 8000cb0:	42ac      	cmp	r4, r5
 8000cb2:	d101      	bne.n	8000cb8 <__sfputs_r+0x12>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e007      	b.n	8000cc8 <__sfputs_r+0x22>
 8000cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cbc:	463a      	mov	r2, r7
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff ffda 	bl	8000c78 <__sfputc_r>
 8000cc4:	1c43      	adds	r3, r0, #1
 8000cc6:	d1f3      	bne.n	8000cb0 <__sfputs_r+0xa>
 8000cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ccc <_vfiprintf_r>:
 8000ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	b09d      	sub	sp, #116	; 0x74
 8000cd4:	4614      	mov	r4, r2
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	4606      	mov	r6, r0
 8000cda:	b118      	cbz	r0, 8000ce4 <_vfiprintf_r+0x18>
 8000cdc:	6a03      	ldr	r3, [r0, #32]
 8000cde:	b90b      	cbnz	r3, 8000ce4 <_vfiprintf_r+0x18>
 8000ce0:	f7ff fdca 	bl	8000878 <__sinit>
 8000ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ce6:	07d9      	lsls	r1, r3, #31
 8000ce8:	d405      	bmi.n	8000cf6 <_vfiprintf_r+0x2a>
 8000cea:	89ab      	ldrh	r3, [r5, #12]
 8000cec:	059a      	lsls	r2, r3, #22
 8000cee:	d402      	bmi.n	8000cf6 <_vfiprintf_r+0x2a>
 8000cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cf2:	f7ff fec6 	bl	8000a82 <__retarget_lock_acquire_recursive>
 8000cf6:	89ab      	ldrh	r3, [r5, #12]
 8000cf8:	071b      	lsls	r3, r3, #28
 8000cfa:	d501      	bpl.n	8000d00 <_vfiprintf_r+0x34>
 8000cfc:	692b      	ldr	r3, [r5, #16]
 8000cfe:	b99b      	cbnz	r3, 8000d28 <_vfiprintf_r+0x5c>
 8000d00:	4629      	mov	r1, r5
 8000d02:	4630      	mov	r0, r6
 8000d04:	f000 fb78 	bl	80013f8 <__swsetup_r>
 8000d08:	b170      	cbz	r0, 8000d28 <_vfiprintf_r+0x5c>
 8000d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d0c:	07dc      	lsls	r4, r3, #31
 8000d0e:	d504      	bpl.n	8000d1a <_vfiprintf_r+0x4e>
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	b01d      	add	sp, #116	; 0x74
 8000d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d1a:	89ab      	ldrh	r3, [r5, #12]
 8000d1c:	0598      	lsls	r0, r3, #22
 8000d1e:	d4f7      	bmi.n	8000d10 <_vfiprintf_r+0x44>
 8000d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d22:	f7ff feaf 	bl	8000a84 <__retarget_lock_release_recursive>
 8000d26:	e7f3      	b.n	8000d10 <_vfiprintf_r+0x44>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d36:	2330      	movs	r3, #48	; 0x30
 8000d38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000eec <_vfiprintf_r+0x220>
 8000d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d40:	f04f 0901 	mov.w	r9, #1
 8000d44:	4623      	mov	r3, r4
 8000d46:	469a      	mov	sl, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	b10a      	cbz	r2, 8000d52 <_vfiprintf_r+0x86>
 8000d4e:	2a25      	cmp	r2, #37	; 0x25
 8000d50:	d1f9      	bne.n	8000d46 <_vfiprintf_r+0x7a>
 8000d52:	ebba 0b04 	subs.w	fp, sl, r4
 8000d56:	d00b      	beq.n	8000d70 <_vfiprintf_r+0xa4>
 8000d58:	465b      	mov	r3, fp
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff ffa1 	bl	8000ca6 <__sfputs_r>
 8000d64:	3001      	adds	r0, #1
 8000d66:	f000 80a9 	beq.w	8000ebc <_vfiprintf_r+0x1f0>
 8000d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d6c:	445a      	add	r2, fp
 8000d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8000d70:	f89a 3000 	ldrb.w	r3, [sl]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a1 	beq.w	8000ebc <_vfiprintf_r+0x1f0>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d84:	f10a 0a01 	add.w	sl, sl, #1
 8000d88:	9304      	str	r3, [sp, #16]
 8000d8a:	9307      	str	r3, [sp, #28]
 8000d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d90:	931a      	str	r3, [sp, #104]	; 0x68
 8000d92:	4654      	mov	r4, sl
 8000d94:	2205      	movs	r2, #5
 8000d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9a:	4854      	ldr	r0, [pc, #336]	; (8000eec <_vfiprintf_r+0x220>)
 8000d9c:	f7ff fa18 	bl	80001d0 <memchr>
 8000da0:	9a04      	ldr	r2, [sp, #16]
 8000da2:	b9d8      	cbnz	r0, 8000ddc <_vfiprintf_r+0x110>
 8000da4:	06d1      	lsls	r1, r2, #27
 8000da6:	bf44      	itt	mi
 8000da8:	2320      	movmi	r3, #32
 8000daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dae:	0713      	lsls	r3, r2, #28
 8000db0:	bf44      	itt	mi
 8000db2:	232b      	movmi	r3, #43	; 0x2b
 8000db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000db8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8000dbe:	d015      	beq.n	8000dec <_vfiprintf_r+0x120>
 8000dc0:	9a07      	ldr	r2, [sp, #28]
 8000dc2:	4654      	mov	r4, sl
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f04f 0c0a 	mov.w	ip, #10
 8000dca:	4621      	mov	r1, r4
 8000dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dd0:	3b30      	subs	r3, #48	; 0x30
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d94d      	bls.n	8000e72 <_vfiprintf_r+0x1a6>
 8000dd6:	b1b0      	cbz	r0, 8000e06 <_vfiprintf_r+0x13a>
 8000dd8:	9207      	str	r2, [sp, #28]
 8000dda:	e014      	b.n	8000e06 <_vfiprintf_r+0x13a>
 8000ddc:	eba0 0308 	sub.w	r3, r0, r8
 8000de0:	fa09 f303 	lsl.w	r3, r9, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	9304      	str	r3, [sp, #16]
 8000de8:	46a2      	mov	sl, r4
 8000dea:	e7d2      	b.n	8000d92 <_vfiprintf_r+0xc6>
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	1d19      	adds	r1, r3, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	9103      	str	r1, [sp, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bfbb      	ittet	lt
 8000df8:	425b      	neglt	r3, r3
 8000dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8000dfe:	9307      	strge	r3, [sp, #28]
 8000e00:	9307      	strlt	r3, [sp, #28]
 8000e02:	bfb8      	it	lt
 8000e04:	9204      	strlt	r2, [sp, #16]
 8000e06:	7823      	ldrb	r3, [r4, #0]
 8000e08:	2b2e      	cmp	r3, #46	; 0x2e
 8000e0a:	d10c      	bne.n	8000e26 <_vfiprintf_r+0x15a>
 8000e0c:	7863      	ldrb	r3, [r4, #1]
 8000e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e10:	d134      	bne.n	8000e7c <_vfiprintf_r+0x1b0>
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	1d1a      	adds	r2, r3, #4
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	9203      	str	r2, [sp, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bfb8      	it	lt
 8000e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e22:	3402      	adds	r4, #2
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000efc <_vfiprintf_r+0x230>
 8000e2a:	7821      	ldrb	r1, [r4, #0]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4650      	mov	r0, sl
 8000e30:	f7ff f9ce 	bl	80001d0 <memchr>
 8000e34:	b138      	cbz	r0, 8000e46 <_vfiprintf_r+0x17a>
 8000e36:	9b04      	ldr	r3, [sp, #16]
 8000e38:	eba0 000a 	sub.w	r0, r0, sl
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	4082      	lsls	r2, r0
 8000e40:	4313      	orrs	r3, r2
 8000e42:	3401      	adds	r4, #1
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e4a:	4829      	ldr	r0, [pc, #164]	; (8000ef0 <_vfiprintf_r+0x224>)
 8000e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e50:	2206      	movs	r2, #6
 8000e52:	f7ff f9bd 	bl	80001d0 <memchr>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d03f      	beq.n	8000eda <_vfiprintf_r+0x20e>
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <_vfiprintf_r+0x228>)
 8000e5c:	bb1b      	cbnz	r3, 8000ea6 <_vfiprintf_r+0x1da>
 8000e5e:	9b03      	ldr	r3, [sp, #12]
 8000e60:	3307      	adds	r3, #7
 8000e62:	f023 0307 	bic.w	r3, r3, #7
 8000e66:	3308      	adds	r3, #8
 8000e68:	9303      	str	r3, [sp, #12]
 8000e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e6c:	443b      	add	r3, r7
 8000e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e70:	e768      	b.n	8000d44 <_vfiprintf_r+0x78>
 8000e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e76:	460c      	mov	r4, r1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	e7a6      	b.n	8000dca <_vfiprintf_r+0xfe>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	3401      	adds	r4, #1
 8000e80:	9305      	str	r3, [sp, #20]
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 0c0a 	mov.w	ip, #10
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e8e:	3a30      	subs	r2, #48	; 0x30
 8000e90:	2a09      	cmp	r2, #9
 8000e92:	d903      	bls.n	8000e9c <_vfiprintf_r+0x1d0>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0c6      	beq.n	8000e26 <_vfiprintf_r+0x15a>
 8000e98:	9105      	str	r1, [sp, #20]
 8000e9a:	e7c4      	b.n	8000e26 <_vfiprintf_r+0x15a>
 8000e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e7f0      	b.n	8000e88 <_vfiprintf_r+0x1bc>
 8000ea6:	ab03      	add	r3, sp, #12
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	462a      	mov	r2, r5
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <_vfiprintf_r+0x22c>)
 8000eae:	a904      	add	r1, sp, #16
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4607      	mov	r7, r0
 8000eb8:	1c78      	adds	r0, r7, #1
 8000eba:	d1d6      	bne.n	8000e6a <_vfiprintf_r+0x19e>
 8000ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ebe:	07d9      	lsls	r1, r3, #31
 8000ec0:	d405      	bmi.n	8000ece <_vfiprintf_r+0x202>
 8000ec2:	89ab      	ldrh	r3, [r5, #12]
 8000ec4:	059a      	lsls	r2, r3, #22
 8000ec6:	d402      	bmi.n	8000ece <_vfiprintf_r+0x202>
 8000ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eca:	f7ff fddb 	bl	8000a84 <__retarget_lock_release_recursive>
 8000ece:	89ab      	ldrh	r3, [r5, #12]
 8000ed0:	065b      	lsls	r3, r3, #25
 8000ed2:	f53f af1d 	bmi.w	8000d10 <_vfiprintf_r+0x44>
 8000ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ed8:	e71c      	b.n	8000d14 <_vfiprintf_r+0x48>
 8000eda:	ab03      	add	r3, sp, #12
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	462a      	mov	r2, r5
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_vfiprintf_r+0x22c>)
 8000ee2:	a904      	add	r1, sp, #16
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f000 f879 	bl	8000fdc <_printf_i>
 8000eea:	e7e4      	b.n	8000eb6 <_vfiprintf_r+0x1ea>
 8000eec:	080015f4 	.word	0x080015f4
 8000ef0:	080015fe 	.word	0x080015fe
 8000ef4:	00000000 	.word	0x00000000
 8000ef8:	08000ca7 	.word	0x08000ca7
 8000efc:	080015fa 	.word	0x080015fa

08000f00 <_printf_common>:
 8000f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f04:	4616      	mov	r6, r2
 8000f06:	4699      	mov	r9, r3
 8000f08:	688a      	ldr	r2, [r1, #8]
 8000f0a:	690b      	ldr	r3, [r1, #16]
 8000f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	bfb8      	it	lt
 8000f14:	4613      	movlt	r3, r2
 8000f16:	6033      	str	r3, [r6, #0]
 8000f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f1c:	4607      	mov	r7, r0
 8000f1e:	460c      	mov	r4, r1
 8000f20:	b10a      	cbz	r2, 8000f26 <_printf_common+0x26>
 8000f22:	3301      	adds	r3, #1
 8000f24:	6033      	str	r3, [r6, #0]
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	0699      	lsls	r1, r3, #26
 8000f2a:	bf42      	ittt	mi
 8000f2c:	6833      	ldrmi	r3, [r6, #0]
 8000f2e:	3302      	addmi	r3, #2
 8000f30:	6033      	strmi	r3, [r6, #0]
 8000f32:	6825      	ldr	r5, [r4, #0]
 8000f34:	f015 0506 	ands.w	r5, r5, #6
 8000f38:	d106      	bne.n	8000f48 <_printf_common+0x48>
 8000f3a:	f104 0a19 	add.w	sl, r4, #25
 8000f3e:	68e3      	ldr	r3, [r4, #12]
 8000f40:	6832      	ldr	r2, [r6, #0]
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	42ab      	cmp	r3, r5
 8000f46:	dc26      	bgt.n	8000f96 <_printf_common+0x96>
 8000f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f4c:	1e13      	subs	r3, r2, #0
 8000f4e:	6822      	ldr	r2, [r4, #0]
 8000f50:	bf18      	it	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	0692      	lsls	r2, r2, #26
 8000f56:	d42b      	bmi.n	8000fb0 <_printf_common+0xb0>
 8000f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	4638      	mov	r0, r7
 8000f60:	47c0      	blx	r8
 8000f62:	3001      	adds	r0, #1
 8000f64:	d01e      	beq.n	8000fa4 <_printf_common+0xa4>
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	6922      	ldr	r2, [r4, #16]
 8000f6a:	f003 0306 	and.w	r3, r3, #6
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf02      	ittt	eq
 8000f72:	68e5      	ldreq	r5, [r4, #12]
 8000f74:	6833      	ldreq	r3, [r6, #0]
 8000f76:	1aed      	subeq	r5, r5, r3
 8000f78:	68a3      	ldr	r3, [r4, #8]
 8000f7a:	bf0c      	ite	eq
 8000f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f80:	2500      	movne	r5, #0
 8000f82:	4293      	cmp	r3, r2
 8000f84:	bfc4      	itt	gt
 8000f86:	1a9b      	subgt	r3, r3, r2
 8000f88:	18ed      	addgt	r5, r5, r3
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	341a      	adds	r4, #26
 8000f8e:	42b5      	cmp	r5, r6
 8000f90:	d11a      	bne.n	8000fc8 <_printf_common+0xc8>
 8000f92:	2000      	movs	r0, #0
 8000f94:	e008      	b.n	8000fa8 <_printf_common+0xa8>
 8000f96:	2301      	movs	r3, #1
 8000f98:	4652      	mov	r2, sl
 8000f9a:	4649      	mov	r1, r9
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	47c0      	blx	r8
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	d103      	bne.n	8000fac <_printf_common+0xac>
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fac:	3501      	adds	r5, #1
 8000fae:	e7c6      	b.n	8000f3e <_printf_common+0x3e>
 8000fb0:	18e1      	adds	r1, r4, r3
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	2030      	movs	r0, #48	; 0x30
 8000fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fba:	4422      	add	r2, r4
 8000fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	e7c7      	b.n	8000f58 <_printf_common+0x58>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4622      	mov	r2, r4
 8000fcc:	4649      	mov	r1, r9
 8000fce:	4638      	mov	r0, r7
 8000fd0:	47c0      	blx	r8
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	d0e6      	beq.n	8000fa4 <_printf_common+0xa4>
 8000fd6:	3601      	adds	r6, #1
 8000fd8:	e7d9      	b.n	8000f8e <_printf_common+0x8e>
	...

08000fdc <_printf_i>:
 8000fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe0:	7e0f      	ldrb	r7, [r1, #24]
 8000fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000fe4:	2f78      	cmp	r7, #120	; 0x78
 8000fe6:	4691      	mov	r9, r2
 8000fe8:	4680      	mov	r8, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	469a      	mov	sl, r3
 8000fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ff2:	d807      	bhi.n	8001004 <_printf_i+0x28>
 8000ff4:	2f62      	cmp	r7, #98	; 0x62
 8000ff6:	d80a      	bhi.n	800100e <_printf_i+0x32>
 8000ff8:	2f00      	cmp	r7, #0
 8000ffa:	f000 80d4 	beq.w	80011a6 <_printf_i+0x1ca>
 8000ffe:	2f58      	cmp	r7, #88	; 0x58
 8001000:	f000 80c0 	beq.w	8001184 <_printf_i+0x1a8>
 8001004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800100c:	e03a      	b.n	8001084 <_printf_i+0xa8>
 800100e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001012:	2b15      	cmp	r3, #21
 8001014:	d8f6      	bhi.n	8001004 <_printf_i+0x28>
 8001016:	a101      	add	r1, pc, #4	; (adr r1, 800101c <_printf_i+0x40>)
 8001018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800101c:	08001075 	.word	0x08001075
 8001020:	08001089 	.word	0x08001089
 8001024:	08001005 	.word	0x08001005
 8001028:	08001005 	.word	0x08001005
 800102c:	08001005 	.word	0x08001005
 8001030:	08001005 	.word	0x08001005
 8001034:	08001089 	.word	0x08001089
 8001038:	08001005 	.word	0x08001005
 800103c:	08001005 	.word	0x08001005
 8001040:	08001005 	.word	0x08001005
 8001044:	08001005 	.word	0x08001005
 8001048:	0800118d 	.word	0x0800118d
 800104c:	080010b5 	.word	0x080010b5
 8001050:	08001147 	.word	0x08001147
 8001054:	08001005 	.word	0x08001005
 8001058:	08001005 	.word	0x08001005
 800105c:	080011af 	.word	0x080011af
 8001060:	08001005 	.word	0x08001005
 8001064:	080010b5 	.word	0x080010b5
 8001068:	08001005 	.word	0x08001005
 800106c:	08001005 	.word	0x08001005
 8001070:	0800114f 	.word	0x0800114f
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	1d1a      	adds	r2, r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	602a      	str	r2, [r5, #0]
 800107c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001084:	2301      	movs	r3, #1
 8001086:	e09f      	b.n	80011c8 <_printf_i+0x1ec>
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	682b      	ldr	r3, [r5, #0]
 800108c:	0607      	lsls	r7, r0, #24
 800108e:	f103 0104 	add.w	r1, r3, #4
 8001092:	6029      	str	r1, [r5, #0]
 8001094:	d501      	bpl.n	800109a <_printf_i+0xbe>
 8001096:	681e      	ldr	r6, [r3, #0]
 8001098:	e003      	b.n	80010a2 <_printf_i+0xc6>
 800109a:	0646      	lsls	r6, r0, #25
 800109c:	d5fb      	bpl.n	8001096 <_printf_i+0xba>
 800109e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	da03      	bge.n	80010ae <_printf_i+0xd2>
 80010a6:	232d      	movs	r3, #45	; 0x2d
 80010a8:	4276      	negs	r6, r6
 80010aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010ae:	485a      	ldr	r0, [pc, #360]	; (8001218 <_printf_i+0x23c>)
 80010b0:	230a      	movs	r3, #10
 80010b2:	e012      	b.n	80010da <_printf_i+0xfe>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	1d19      	adds	r1, r3, #4
 80010ba:	6029      	str	r1, [r5, #0]
 80010bc:	0605      	lsls	r5, r0, #24
 80010be:	d501      	bpl.n	80010c4 <_printf_i+0xe8>
 80010c0:	681e      	ldr	r6, [r3, #0]
 80010c2:	e002      	b.n	80010ca <_printf_i+0xee>
 80010c4:	0641      	lsls	r1, r0, #25
 80010c6:	d5fb      	bpl.n	80010c0 <_printf_i+0xe4>
 80010c8:	881e      	ldrh	r6, [r3, #0]
 80010ca:	4853      	ldr	r0, [pc, #332]	; (8001218 <_printf_i+0x23c>)
 80010cc:	2f6f      	cmp	r7, #111	; 0x6f
 80010ce:	bf0c      	ite	eq
 80010d0:	2308      	moveq	r3, #8
 80010d2:	230a      	movne	r3, #10
 80010d4:	2100      	movs	r1, #0
 80010d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010da:	6865      	ldr	r5, [r4, #4]
 80010dc:	60a5      	str	r5, [r4, #8]
 80010de:	2d00      	cmp	r5, #0
 80010e0:	bfa2      	ittt	ge
 80010e2:	6821      	ldrge	r1, [r4, #0]
 80010e4:	f021 0104 	bicge.w	r1, r1, #4
 80010e8:	6021      	strge	r1, [r4, #0]
 80010ea:	b90e      	cbnz	r6, 80010f0 <_printf_i+0x114>
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	d04b      	beq.n	8001188 <_printf_i+0x1ac>
 80010f0:	4615      	mov	r5, r2
 80010f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80010f6:	fb03 6711 	mls	r7, r3, r1, r6
 80010fa:	5dc7      	ldrb	r7, [r0, r7]
 80010fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001100:	4637      	mov	r7, r6
 8001102:	42bb      	cmp	r3, r7
 8001104:	460e      	mov	r6, r1
 8001106:	d9f4      	bls.n	80010f2 <_printf_i+0x116>
 8001108:	2b08      	cmp	r3, #8
 800110a:	d10b      	bne.n	8001124 <_printf_i+0x148>
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	07de      	lsls	r6, r3, #31
 8001110:	d508      	bpl.n	8001124 <_printf_i+0x148>
 8001112:	6923      	ldr	r3, [r4, #16]
 8001114:	6861      	ldr	r1, [r4, #4]
 8001116:	4299      	cmp	r1, r3
 8001118:	bfde      	ittt	le
 800111a:	2330      	movle	r3, #48	; 0x30
 800111c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001120:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001124:	1b52      	subs	r2, r2, r5
 8001126:	6122      	str	r2, [r4, #16]
 8001128:	f8cd a000 	str.w	sl, [sp]
 800112c:	464b      	mov	r3, r9
 800112e:	aa03      	add	r2, sp, #12
 8001130:	4621      	mov	r1, r4
 8001132:	4640      	mov	r0, r8
 8001134:	f7ff fee4 	bl	8000f00 <_printf_common>
 8001138:	3001      	adds	r0, #1
 800113a:	d14a      	bne.n	80011d2 <_printf_i+0x1f6>
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	b004      	add	sp, #16
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6023      	str	r3, [r4, #0]
 800114e:	4833      	ldr	r0, [pc, #204]	; (800121c <_printf_i+0x240>)
 8001150:	2778      	movs	r7, #120	; 0x78
 8001152:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	6829      	ldr	r1, [r5, #0]
 800115a:	061f      	lsls	r7, r3, #24
 800115c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001160:	d402      	bmi.n	8001168 <_printf_i+0x18c>
 8001162:	065f      	lsls	r7, r3, #25
 8001164:	bf48      	it	mi
 8001166:	b2b6      	uxthmi	r6, r6
 8001168:	07df      	lsls	r7, r3, #31
 800116a:	bf48      	it	mi
 800116c:	f043 0320 	orrmi.w	r3, r3, #32
 8001170:	6029      	str	r1, [r5, #0]
 8001172:	bf48      	it	mi
 8001174:	6023      	strmi	r3, [r4, #0]
 8001176:	b91e      	cbnz	r6, 8001180 <_printf_i+0x1a4>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	f023 0320 	bic.w	r3, r3, #32
 800117e:	6023      	str	r3, [r4, #0]
 8001180:	2310      	movs	r3, #16
 8001182:	e7a7      	b.n	80010d4 <_printf_i+0xf8>
 8001184:	4824      	ldr	r0, [pc, #144]	; (8001218 <_printf_i+0x23c>)
 8001186:	e7e4      	b.n	8001152 <_printf_i+0x176>
 8001188:	4615      	mov	r5, r2
 800118a:	e7bd      	b.n	8001108 <_printf_i+0x12c>
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	6826      	ldr	r6, [r4, #0]
 8001190:	6961      	ldr	r1, [r4, #20]
 8001192:	1d18      	adds	r0, r3, #4
 8001194:	6028      	str	r0, [r5, #0]
 8001196:	0635      	lsls	r5, r6, #24
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	d501      	bpl.n	80011a0 <_printf_i+0x1c4>
 800119c:	6019      	str	r1, [r3, #0]
 800119e:	e002      	b.n	80011a6 <_printf_i+0x1ca>
 80011a0:	0670      	lsls	r0, r6, #25
 80011a2:	d5fb      	bpl.n	800119c <_printf_i+0x1c0>
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	6123      	str	r3, [r4, #16]
 80011aa:	4615      	mov	r5, r2
 80011ac:	e7bc      	b.n	8001128 <_printf_i+0x14c>
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	1d1a      	adds	r2, r3, #4
 80011b2:	602a      	str	r2, [r5, #0]
 80011b4:	681d      	ldr	r5, [r3, #0]
 80011b6:	6862      	ldr	r2, [r4, #4]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4628      	mov	r0, r5
 80011bc:	f7ff f808 	bl	80001d0 <memchr>
 80011c0:	b108      	cbz	r0, 80011c6 <_printf_i+0x1ea>
 80011c2:	1b40      	subs	r0, r0, r5
 80011c4:	6060      	str	r0, [r4, #4]
 80011c6:	6863      	ldr	r3, [r4, #4]
 80011c8:	6123      	str	r3, [r4, #16]
 80011ca:	2300      	movs	r3, #0
 80011cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011d0:	e7aa      	b.n	8001128 <_printf_i+0x14c>
 80011d2:	6923      	ldr	r3, [r4, #16]
 80011d4:	462a      	mov	r2, r5
 80011d6:	4649      	mov	r1, r9
 80011d8:	4640      	mov	r0, r8
 80011da:	47d0      	blx	sl
 80011dc:	3001      	adds	r0, #1
 80011de:	d0ad      	beq.n	800113c <_printf_i+0x160>
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	079b      	lsls	r3, r3, #30
 80011e4:	d413      	bmi.n	800120e <_printf_i+0x232>
 80011e6:	68e0      	ldr	r0, [r4, #12]
 80011e8:	9b03      	ldr	r3, [sp, #12]
 80011ea:	4298      	cmp	r0, r3
 80011ec:	bfb8      	it	lt
 80011ee:	4618      	movlt	r0, r3
 80011f0:	e7a6      	b.n	8001140 <_printf_i+0x164>
 80011f2:	2301      	movs	r3, #1
 80011f4:	4632      	mov	r2, r6
 80011f6:	4649      	mov	r1, r9
 80011f8:	4640      	mov	r0, r8
 80011fa:	47d0      	blx	sl
 80011fc:	3001      	adds	r0, #1
 80011fe:	d09d      	beq.n	800113c <_printf_i+0x160>
 8001200:	3501      	adds	r5, #1
 8001202:	68e3      	ldr	r3, [r4, #12]
 8001204:	9903      	ldr	r1, [sp, #12]
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	42ab      	cmp	r3, r5
 800120a:	dcf2      	bgt.n	80011f2 <_printf_i+0x216>
 800120c:	e7eb      	b.n	80011e6 <_printf_i+0x20a>
 800120e:	2500      	movs	r5, #0
 8001210:	f104 0619 	add.w	r6, r4, #25
 8001214:	e7f5      	b.n	8001202 <_printf_i+0x226>
 8001216:	bf00      	nop
 8001218:	08001605 	.word	0x08001605
 800121c:	08001616 	.word	0x08001616

08001220 <__sflush_r>:
 8001220:	898a      	ldrh	r2, [r1, #12]
 8001222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001226:	4605      	mov	r5, r0
 8001228:	0710      	lsls	r0, r2, #28
 800122a:	460c      	mov	r4, r1
 800122c:	d458      	bmi.n	80012e0 <__sflush_r+0xc0>
 800122e:	684b      	ldr	r3, [r1, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	dc05      	bgt.n	8001240 <__sflush_r+0x20>
 8001234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	dc02      	bgt.n	8001240 <__sflush_r+0x20>
 800123a:	2000      	movs	r0, #0
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001242:	2e00      	cmp	r6, #0
 8001244:	d0f9      	beq.n	800123a <__sflush_r+0x1a>
 8001246:	2300      	movs	r3, #0
 8001248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800124c:	682f      	ldr	r7, [r5, #0]
 800124e:	6a21      	ldr	r1, [r4, #32]
 8001250:	602b      	str	r3, [r5, #0]
 8001252:	d032      	beq.n	80012ba <__sflush_r+0x9a>
 8001254:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	075a      	lsls	r2, r3, #29
 800125a:	d505      	bpl.n	8001268 <__sflush_r+0x48>
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	1ac0      	subs	r0, r0, r3
 8001260:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001262:	b10b      	cbz	r3, 8001268 <__sflush_r+0x48>
 8001264:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001266:	1ac0      	subs	r0, r0, r3
 8001268:	2300      	movs	r3, #0
 800126a:	4602      	mov	r2, r0
 800126c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800126e:	6a21      	ldr	r1, [r4, #32]
 8001270:	4628      	mov	r0, r5
 8001272:	47b0      	blx	r6
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	d106      	bne.n	8001288 <__sflush_r+0x68>
 800127a:	6829      	ldr	r1, [r5, #0]
 800127c:	291d      	cmp	r1, #29
 800127e:	d82b      	bhi.n	80012d8 <__sflush_r+0xb8>
 8001280:	4a29      	ldr	r2, [pc, #164]	; (8001328 <__sflush_r+0x108>)
 8001282:	410a      	asrs	r2, r1
 8001284:	07d6      	lsls	r6, r2, #31
 8001286:	d427      	bmi.n	80012d8 <__sflush_r+0xb8>
 8001288:	2200      	movs	r2, #0
 800128a:	6062      	str	r2, [r4, #4]
 800128c:	04d9      	lsls	r1, r3, #19
 800128e:	6922      	ldr	r2, [r4, #16]
 8001290:	6022      	str	r2, [r4, #0]
 8001292:	d504      	bpl.n	800129e <__sflush_r+0x7e>
 8001294:	1c42      	adds	r2, r0, #1
 8001296:	d101      	bne.n	800129c <__sflush_r+0x7c>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	b903      	cbnz	r3, 800129e <__sflush_r+0x7e>
 800129c:	6560      	str	r0, [r4, #84]	; 0x54
 800129e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012a0:	602f      	str	r7, [r5, #0]
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d0c9      	beq.n	800123a <__sflush_r+0x1a>
 80012a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012aa:	4299      	cmp	r1, r3
 80012ac:	d002      	beq.n	80012b4 <__sflush_r+0x94>
 80012ae:	4628      	mov	r0, r5
 80012b0:	f7ff fbea 	bl	8000a88 <_free_r>
 80012b4:	2000      	movs	r0, #0
 80012b6:	6360      	str	r0, [r4, #52]	; 0x34
 80012b8:	e7c0      	b.n	800123c <__sflush_r+0x1c>
 80012ba:	2301      	movs	r3, #1
 80012bc:	4628      	mov	r0, r5
 80012be:	47b0      	blx	r6
 80012c0:	1c41      	adds	r1, r0, #1
 80012c2:	d1c8      	bne.n	8001256 <__sflush_r+0x36>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0c5      	beq.n	8001256 <__sflush_r+0x36>
 80012ca:	2b1d      	cmp	r3, #29
 80012cc:	d001      	beq.n	80012d2 <__sflush_r+0xb2>
 80012ce:	2b16      	cmp	r3, #22
 80012d0:	d101      	bne.n	80012d6 <__sflush_r+0xb6>
 80012d2:	602f      	str	r7, [r5, #0]
 80012d4:	e7b1      	b.n	800123a <__sflush_r+0x1a>
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012dc:	81a3      	strh	r3, [r4, #12]
 80012de:	e7ad      	b.n	800123c <__sflush_r+0x1c>
 80012e0:	690f      	ldr	r7, [r1, #16]
 80012e2:	2f00      	cmp	r7, #0
 80012e4:	d0a9      	beq.n	800123a <__sflush_r+0x1a>
 80012e6:	0793      	lsls	r3, r2, #30
 80012e8:	680e      	ldr	r6, [r1, #0]
 80012ea:	bf08      	it	eq
 80012ec:	694b      	ldreq	r3, [r1, #20]
 80012ee:	600f      	str	r7, [r1, #0]
 80012f0:	bf18      	it	ne
 80012f2:	2300      	movne	r3, #0
 80012f4:	eba6 0807 	sub.w	r8, r6, r7
 80012f8:	608b      	str	r3, [r1, #8]
 80012fa:	f1b8 0f00 	cmp.w	r8, #0
 80012fe:	dd9c      	ble.n	800123a <__sflush_r+0x1a>
 8001300:	6a21      	ldr	r1, [r4, #32]
 8001302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001304:	4643      	mov	r3, r8
 8001306:	463a      	mov	r2, r7
 8001308:	4628      	mov	r0, r5
 800130a:	47b0      	blx	r6
 800130c:	2800      	cmp	r0, #0
 800130e:	dc06      	bgt.n	800131e <__sflush_r+0xfe>
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001316:	81a3      	strh	r3, [r4, #12]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	e78e      	b.n	800123c <__sflush_r+0x1c>
 800131e:	4407      	add	r7, r0
 8001320:	eba8 0800 	sub.w	r8, r8, r0
 8001324:	e7e9      	b.n	80012fa <__sflush_r+0xda>
 8001326:	bf00      	nop
 8001328:	dfbffffe 	.word	0xdfbffffe

0800132c <_fflush_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	690b      	ldr	r3, [r1, #16]
 8001330:	4605      	mov	r5, r0
 8001332:	460c      	mov	r4, r1
 8001334:	b913      	cbnz	r3, 800133c <_fflush_r+0x10>
 8001336:	2500      	movs	r5, #0
 8001338:	4628      	mov	r0, r5
 800133a:	bd38      	pop	{r3, r4, r5, pc}
 800133c:	b118      	cbz	r0, 8001346 <_fflush_r+0x1a>
 800133e:	6a03      	ldr	r3, [r0, #32]
 8001340:	b90b      	cbnz	r3, 8001346 <_fflush_r+0x1a>
 8001342:	f7ff fa99 	bl	8000878 <__sinit>
 8001346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f3      	beq.n	8001336 <_fflush_r+0xa>
 800134e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001350:	07d0      	lsls	r0, r2, #31
 8001352:	d404      	bmi.n	800135e <_fflush_r+0x32>
 8001354:	0599      	lsls	r1, r3, #22
 8001356:	d402      	bmi.n	800135e <_fflush_r+0x32>
 8001358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800135a:	f7ff fb92 	bl	8000a82 <__retarget_lock_acquire_recursive>
 800135e:	4628      	mov	r0, r5
 8001360:	4621      	mov	r1, r4
 8001362:	f7ff ff5d 	bl	8001220 <__sflush_r>
 8001366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001368:	07da      	lsls	r2, r3, #31
 800136a:	4605      	mov	r5, r0
 800136c:	d4e4      	bmi.n	8001338 <_fflush_r+0xc>
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	059b      	lsls	r3, r3, #22
 8001372:	d4e1      	bmi.n	8001338 <_fflush_r+0xc>
 8001374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001376:	f7ff fb85 	bl	8000a84 <__retarget_lock_release_recursive>
 800137a:	e7dd      	b.n	8001338 <_fflush_r+0xc>

0800137c <__swbuf_r>:
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	460e      	mov	r6, r1
 8001380:	4614      	mov	r4, r2
 8001382:	4605      	mov	r5, r0
 8001384:	b118      	cbz	r0, 800138e <__swbuf_r+0x12>
 8001386:	6a03      	ldr	r3, [r0, #32]
 8001388:	b90b      	cbnz	r3, 800138e <__swbuf_r+0x12>
 800138a:	f7ff fa75 	bl	8000878 <__sinit>
 800138e:	69a3      	ldr	r3, [r4, #24]
 8001390:	60a3      	str	r3, [r4, #8]
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	071a      	lsls	r2, r3, #28
 8001396:	d525      	bpl.n	80013e4 <__swbuf_r+0x68>
 8001398:	6923      	ldr	r3, [r4, #16]
 800139a:	b31b      	cbz	r3, 80013e4 <__swbuf_r+0x68>
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	6922      	ldr	r2, [r4, #16]
 80013a0:	1a98      	subs	r0, r3, r2
 80013a2:	6963      	ldr	r3, [r4, #20]
 80013a4:	b2f6      	uxtb	r6, r6
 80013a6:	4283      	cmp	r3, r0
 80013a8:	4637      	mov	r7, r6
 80013aa:	dc04      	bgt.n	80013b6 <__swbuf_r+0x3a>
 80013ac:	4621      	mov	r1, r4
 80013ae:	4628      	mov	r0, r5
 80013b0:	f7ff ffbc 	bl	800132c <_fflush_r>
 80013b4:	b9e0      	cbnz	r0, 80013f0 <__swbuf_r+0x74>
 80013b6:	68a3      	ldr	r3, [r4, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60a3      	str	r3, [r4, #8]
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	6022      	str	r2, [r4, #0]
 80013c2:	701e      	strb	r6, [r3, #0]
 80013c4:	6962      	ldr	r2, [r4, #20]
 80013c6:	1c43      	adds	r3, r0, #1
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d004      	beq.n	80013d6 <__swbuf_r+0x5a>
 80013cc:	89a3      	ldrh	r3, [r4, #12]
 80013ce:	07db      	lsls	r3, r3, #31
 80013d0:	d506      	bpl.n	80013e0 <__swbuf_r+0x64>
 80013d2:	2e0a      	cmp	r6, #10
 80013d4:	d104      	bne.n	80013e0 <__swbuf_r+0x64>
 80013d6:	4621      	mov	r1, r4
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff ffa7 	bl	800132c <_fflush_r>
 80013de:	b938      	cbnz	r0, 80013f0 <__swbuf_r+0x74>
 80013e0:	4638      	mov	r0, r7
 80013e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e4:	4621      	mov	r1, r4
 80013e6:	4628      	mov	r0, r5
 80013e8:	f000 f806 	bl	80013f8 <__swsetup_r>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d0d5      	beq.n	800139c <__swbuf_r+0x20>
 80013f0:	f04f 37ff 	mov.w	r7, #4294967295
 80013f4:	e7f4      	b.n	80013e0 <__swbuf_r+0x64>
	...

080013f8 <__swsetup_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <__swsetup_r+0xac>)
 80013fc:	4605      	mov	r5, r0
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	460c      	mov	r4, r1
 8001402:	b118      	cbz	r0, 800140c <__swsetup_r+0x14>
 8001404:	6a03      	ldr	r3, [r0, #32]
 8001406:	b90b      	cbnz	r3, 800140c <__swsetup_r+0x14>
 8001408:	f7ff fa36 	bl	8000878 <__sinit>
 800140c:	89a3      	ldrh	r3, [r4, #12]
 800140e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001412:	0718      	lsls	r0, r3, #28
 8001414:	d422      	bmi.n	800145c <__swsetup_r+0x64>
 8001416:	06d9      	lsls	r1, r3, #27
 8001418:	d407      	bmi.n	800142a <__swsetup_r+0x32>
 800141a:	2309      	movs	r3, #9
 800141c:	602b      	str	r3, [r5, #0]
 800141e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	e034      	b.n	8001494 <__swsetup_r+0x9c>
 800142a:	0758      	lsls	r0, r3, #29
 800142c:	d512      	bpl.n	8001454 <__swsetup_r+0x5c>
 800142e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001430:	b141      	cbz	r1, 8001444 <__swsetup_r+0x4c>
 8001432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001436:	4299      	cmp	r1, r3
 8001438:	d002      	beq.n	8001440 <__swsetup_r+0x48>
 800143a:	4628      	mov	r0, r5
 800143c:	f7ff fb24 	bl	8000a88 <_free_r>
 8001440:	2300      	movs	r3, #0
 8001442:	6363      	str	r3, [r4, #52]	; 0x34
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800144a:	81a3      	strh	r3, [r4, #12]
 800144c:	2300      	movs	r3, #0
 800144e:	6063      	str	r3, [r4, #4]
 8001450:	6923      	ldr	r3, [r4, #16]
 8001452:	6023      	str	r3, [r4, #0]
 8001454:	89a3      	ldrh	r3, [r4, #12]
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	81a3      	strh	r3, [r4, #12]
 800145c:	6923      	ldr	r3, [r4, #16]
 800145e:	b94b      	cbnz	r3, 8001474 <__swsetup_r+0x7c>
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146a:	d003      	beq.n	8001474 <__swsetup_r+0x7c>
 800146c:	4621      	mov	r1, r4
 800146e:	4628      	mov	r0, r5
 8001470:	f000 f850 	bl	8001514 <__smakebuf_r>
 8001474:	89a0      	ldrh	r0, [r4, #12]
 8001476:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800147a:	f010 0301 	ands.w	r3, r0, #1
 800147e:	d00a      	beq.n	8001496 <__swsetup_r+0x9e>
 8001480:	2300      	movs	r3, #0
 8001482:	60a3      	str	r3, [r4, #8]
 8001484:	6963      	ldr	r3, [r4, #20]
 8001486:	425b      	negs	r3, r3
 8001488:	61a3      	str	r3, [r4, #24]
 800148a:	6923      	ldr	r3, [r4, #16]
 800148c:	b943      	cbnz	r3, 80014a0 <__swsetup_r+0xa8>
 800148e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001492:	d1c4      	bne.n	800141e <__swsetup_r+0x26>
 8001494:	bd38      	pop	{r3, r4, r5, pc}
 8001496:	0781      	lsls	r1, r0, #30
 8001498:	bf58      	it	pl
 800149a:	6963      	ldrpl	r3, [r4, #20]
 800149c:	60a3      	str	r3, [r4, #8]
 800149e:	e7f4      	b.n	800148a <__swsetup_r+0x92>
 80014a0:	2000      	movs	r0, #0
 80014a2:	e7f7      	b.n	8001494 <__swsetup_r+0x9c>
 80014a4:	20000058 	.word	0x20000058

080014a8 <_sbrk_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4d06      	ldr	r5, [pc, #24]	; (80014c4 <_sbrk_r+0x1c>)
 80014ac:	2300      	movs	r3, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	f7ff f852 	bl	800055c <_sbrk>
 80014b8:	1c43      	adds	r3, r0, #1
 80014ba:	d102      	bne.n	80014c2 <_sbrk_r+0x1a>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	b103      	cbz	r3, 80014c2 <_sbrk_r+0x1a>
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
 80014c4:	200001bc 	.word	0x200001bc

080014c8 <__swhatbuf_r>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	460c      	mov	r4, r1
 80014cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d0:	2900      	cmp	r1, #0
 80014d2:	b096      	sub	sp, #88	; 0x58
 80014d4:	4615      	mov	r5, r2
 80014d6:	461e      	mov	r6, r3
 80014d8:	da0d      	bge.n	80014f6 <__swhatbuf_r+0x2e>
 80014da:	89a3      	ldrh	r3, [r4, #12]
 80014dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	bf0c      	ite	eq
 80014e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80014ea:	2340      	movne	r3, #64	; 0x40
 80014ec:	2000      	movs	r0, #0
 80014ee:	6031      	str	r1, [r6, #0]
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	b016      	add	sp, #88	; 0x58
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
 80014f6:	466a      	mov	r2, sp
 80014f8:	f000 f848 	bl	800158c <_fstat_r>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	dbec      	blt.n	80014da <__swhatbuf_r+0x12>
 8001500:	9901      	ldr	r1, [sp, #4]
 8001502:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001506:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800150a:	4259      	negs	r1, r3
 800150c:	4159      	adcs	r1, r3
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	e7eb      	b.n	80014ec <__swhatbuf_r+0x24>

08001514 <__smakebuf_r>:
 8001514:	898b      	ldrh	r3, [r1, #12]
 8001516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001518:	079d      	lsls	r5, r3, #30
 800151a:	4606      	mov	r6, r0
 800151c:	460c      	mov	r4, r1
 800151e:	d507      	bpl.n	8001530 <__smakebuf_r+0x1c>
 8001520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	6123      	str	r3, [r4, #16]
 8001528:	2301      	movs	r3, #1
 800152a:	6163      	str	r3, [r4, #20]
 800152c:	b002      	add	sp, #8
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	ab01      	add	r3, sp, #4
 8001532:	466a      	mov	r2, sp
 8001534:	f7ff ffc8 	bl	80014c8 <__swhatbuf_r>
 8001538:	9900      	ldr	r1, [sp, #0]
 800153a:	4605      	mov	r5, r0
 800153c:	4630      	mov	r0, r6
 800153e:	f7ff fb0f 	bl	8000b60 <_malloc_r>
 8001542:	b948      	cbnz	r0, 8001558 <__smakebuf_r+0x44>
 8001544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001548:	059a      	lsls	r2, r3, #22
 800154a:	d4ef      	bmi.n	800152c <__smakebuf_r+0x18>
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	81a3      	strh	r3, [r4, #12]
 8001556:	e7e3      	b.n	8001520 <__smakebuf_r+0xc>
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	6020      	str	r0, [r4, #0]
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	81a3      	strh	r3, [r4, #12]
 8001562:	9b00      	ldr	r3, [sp, #0]
 8001564:	6163      	str	r3, [r4, #20]
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	6120      	str	r0, [r4, #16]
 800156a:	b15b      	cbz	r3, 8001584 <__smakebuf_r+0x70>
 800156c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001570:	4630      	mov	r0, r6
 8001572:	f000 f81d 	bl	80015b0 <_isatty_r>
 8001576:	b128      	cbz	r0, 8001584 <__smakebuf_r+0x70>
 8001578:	89a3      	ldrh	r3, [r4, #12]
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	81a3      	strh	r3, [r4, #12]
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	431d      	orrs	r5, r3
 8001588:	81a5      	strh	r5, [r4, #12]
 800158a:	e7cf      	b.n	800152c <__smakebuf_r+0x18>

0800158c <_fstat_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d07      	ldr	r5, [pc, #28]	; (80015ac <_fstat_r+0x20>)
 8001590:	2300      	movs	r3, #0
 8001592:	4604      	mov	r4, r0
 8001594:	4608      	mov	r0, r1
 8001596:	4611      	mov	r1, r2
 8001598:	602b      	str	r3, [r5, #0]
 800159a:	f7fe ffb7 	bl	800050c <_fstat>
 800159e:	1c43      	adds	r3, r0, #1
 80015a0:	d102      	bne.n	80015a8 <_fstat_r+0x1c>
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	b103      	cbz	r3, 80015a8 <_fstat_r+0x1c>
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	bd38      	pop	{r3, r4, r5, pc}
 80015aa:	bf00      	nop
 80015ac:	200001bc 	.word	0x200001bc

080015b0 <_isatty_r>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4d06      	ldr	r5, [pc, #24]	; (80015cc <_isatty_r+0x1c>)
 80015b4:	2300      	movs	r3, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	f7fe ffb6 	bl	800052c <_isatty>
 80015c0:	1c43      	adds	r3, r0, #1
 80015c2:	d102      	bne.n	80015ca <_isatty_r+0x1a>
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	b103      	cbz	r3, 80015ca <_isatty_r+0x1a>
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
 80015cc:	200001bc 	.word	0x200001bc

080015d0 <_init>:
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d2:	bf00      	nop
 80015d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d6:	bc08      	pop	{r3}
 80015d8:	469e      	mov	lr, r3
 80015da:	4770      	bx	lr

080015dc <_fini>:
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015de:	bf00      	nop
 80015e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015e2:	bc08      	pop	{r3}
 80015e4:	469e      	mov	lr, r3
 80015e6:	4770      	bx	lr
