
Lab13Part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018c0  080018c0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080018c0  080018c0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018c0  080018c0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018c0  080018c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018c4  080018c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080018c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001ec  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001c35  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000958  00000000  00000000  00021d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000238  00000000  00000000  00022660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000018b  00000000  00000000  00022898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000180a  00000000  00000000  00022a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003461  00000000  00000000  0002422d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a4669  00000000  00000000  0002768e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e9c  00000000  00000000  000cbcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000ccb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800186c 	.word	0x0800186c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800186c 	.word	0x0800186c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <circular_buffer_init>:
circular_buffer * _rx_buffer2;
circular_buffer * _tx_buffer2;

/*initialize buffer */
void circular_buffer_init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	/*Initialize buffer with de-referencing pointers (&)*/
	_rx_buffer1 = &rx_buffer1;
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <circular_buffer_init+0x40>)
 8000276:	4a0f      	ldr	r2, [pc, #60]	; (80002b4 <circular_buffer_init+0x44>)
 8000278:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;                                 //missing code here
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <circular_buffer_init+0x48>)
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <circular_buffer_init+0x4c>)
 800027e:	601a      	str	r2, [r3, #0]
	                                  //missing code here
	_rx_buffer2 = &rx_buffer2;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <circular_buffer_init+0x50>)
 8000282:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <circular_buffer_init+0x54>)
 8000284:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <circular_buffer_init+0x58>)
 8000288:	4a10      	ldr	r2, [pc, #64]	; (80002cc <circular_buffer_init+0x5c>)
 800028a:	601a      	str	r2, [r3, #0]

	/*Initialize UART RX Not Empty Interrupt for USART1 and USART2*/
	USART1->CR1 |=CR1_RXNEIE;
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <circular_buffer_init+0x60>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <circular_buffer_init+0x60>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6013      	str	r3, [r2, #0]
	USART2->CR1 |=CR1_RXNEIE;
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <circular_buffer_init+0x64>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <circular_buffer_init+0x64>)
 800029e:	f043 0320 	orr.w	r3, r3, #32
 80002a2:	6013      	str	r3, [r2, #0]
	                                    //missing code here
										//missing code here
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	200000e8 	.word	0x200000e8
 80002b4:	200000b0 	.word	0x200000b0
 80002b8:	200000ec 	.word	0x200000ec
 80002bc:	200000cc 	.word	0x200000cc
 80002c0:	200000f0 	.word	0x200000f0
 80002c4:	20000078 	.word	0x20000078
 80002c8:	200000f4 	.word	0x200000f4
 80002cc:	20000094 	.word	0x20000094
 80002d0:	40013800 	.word	0x40013800
 80002d4:	40004400 	.word	0x40004400

080002d8 <buff_store_char>:


static void buff_store_char(unsigned char c, circular_buffer * buffer)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	71fb      	strb	r3, [r7, #7]
	int loc =(uint32_t) (buffer->head + 1)%UART_BUFFER_SIZE;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	1c59      	adds	r1, r3, #1
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <buff_store_char+0x4c>)
 80002ec:	fba3 2301 	umull	r2, r3, r3, r1
 80002f0:	091a      	lsrs	r2, r3, #4
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	1aca      	subs	r2, r1, r3
 80002fc:	60fa      	str	r2, [r7, #12]
	/*Check if no overflow will occur*/
	if( loc != buffer->tail)
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	699a      	ldr	r2, [r3, #24]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	429a      	cmp	r2, r3
 8000306:	d007      	beq.n	8000318 <buff_store_char+0x40>
	{
		/*Store character*/
		buffer->buffer[buffer->head] = c;
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	79f9      	ldrb	r1, [r7, #7]
 8000310:	54d1      	strb	r1, [r2, r3]

		/*Update head*/
		buffer->head = loc;
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	615a      	str	r2, [r3, #20]
	}
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	cccccccd 	.word	0xcccccccd

08000328 <bluetooth_uart_callback>:
 * and receive operations instead of polling mode; and are executed 
 for every character being received/transmitted;
 * Therefore, the interrupts are executed in a callback function respectively */

void bluetooth_uart_callback(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	/*Check if RXNE (RX not empty)is raised and if RXNEIE is enabled*/
	if(((USART1->ISR & ISR_RXNE) !=0 ) && ((USART1->CR1 & CR1_RXNEIE) !=0))
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	2b00      	cmp	r3, #0
 8000338:	d010      	beq.n	800035c <bluetooth_uart_callback+0x34>
 800033a:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0320 	and.w	r3, r3, #32
 8000342:	2b00      	cmp	r3, #0
 8000344:	d00a      	beq.n	800035c <bluetooth_uart_callback+0x34>
		{
		  	  unsigned char c = USART1 ->RDR;
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 8000348:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800034a:	b29b      	uxth	r3, r3
 800034c:	71fb      	strb	r3, [r7, #7]
		  	  buff_store_char(c, _rx_buffer1);
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <bluetooth_uart_callback+0xa0>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4611      	mov	r1, r2
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ffbe 	bl	80002d8 <buff_store_char>
		}

	/*Check if TXEIE is enabled*/
	if(((USART1->ISR & ISR_TXE) !=0 ) && ((USART1->CR1 & CR1_TXEIE) !=0))
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000364:	2b00      	cmp	r3, #0
 8000366:	d029      	beq.n	80003bc <bluetooth_uart_callback+0x94>
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000370:	2b00      	cmp	r3, #0
 8000372:	d023      	beq.n	80003bc <bluetooth_uart_callback+0x94>
	{
		if(tx_buffer1.head == tx_buffer1.tail)
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <bluetooth_uart_callback+0xa4>)
 8000376:	695a      	ldr	r2, [r3, #20]
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <bluetooth_uart_callback+0xa4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	429a      	cmp	r2, r3
 800037e:	d106      	bne.n	800038e <bluetooth_uart_callback+0x66>
		{
			  USART1->CR1 &=~ CR1_TXEIE;
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0f      	ldr	r2, [pc, #60]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 8000386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800038a:	6013      	str	r3, [r2, #0]
	    	tx_buffer1.tail = (tx_buffer1.tail + 1)%UART_BUFFER_SIZE;
	    	/*Transmit character*/
	    	USART1-> TDR = c;
		}
	}
}
 800038c:	e016      	b.n	80003bc <bluetooth_uart_callback+0x94>
	    	unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <bluetooth_uart_callback+0xa4>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <bluetooth_uart_callback+0xa4>)
 8000394:	5cd3      	ldrb	r3, [r2, r3]
 8000396:	71bb      	strb	r3, [r7, #6]
	    	tx_buffer1.tail = (tx_buffer1.tail + 1)%UART_BUFFER_SIZE;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <bluetooth_uart_callback+0xa4>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	1c59      	adds	r1, r3, #1
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <bluetooth_uart_callback+0xa8>)
 80003a0:	fba3 2301 	umull	r2, r3, r3, r1
 80003a4:	091a      	lsrs	r2, r3, #4
 80003a6:	4613      	mov	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	1aca      	subs	r2, r1, r3
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <bluetooth_uart_callback+0xa4>)
 80003b2:	619a      	str	r2, [r3, #24]
	    	USART1-> TDR = c;
 80003b4:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <bluetooth_uart_callback+0x9c>)
 80003b6:	79ba      	ldrb	r2, [r7, #6]
 80003b8:	b292      	uxth	r2, r2
 80003ba:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40013800 	.word	0x40013800
 80003c8:	200000e8 	.word	0x200000e8
 80003cc:	200000cc 	.word	0x200000cc
 80003d0:	cccccccd 	.word	0xcccccccd

080003d4 <debug_uart_callback>:

void debug_uart_callback(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
	/*Check if RXNE (RX not empty)is raised and if RXNEIE is enabled*/
	if(((USART2->ISR & ISR_RXNE) !=0 ) && ((USART2->CR1 & CR1_RXNEIE) !=0))
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <debug_uart_callback+0x9c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 0320 	and.w	r3, r3, #32
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d010      	beq.n	8000408 <debug_uart_callback+0x34>
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <debug_uart_callback+0x9c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0320 	and.w	r3, r3, #32
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d00a      	beq.n	8000408 <debug_uart_callback+0x34>
		{
		  	  unsigned char c = USART2 ->RDR;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <debug_uart_callback+0x9c>)
 80003f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	71fb      	strb	r3, [r7, #7]
		  	  buff_store_char(c, _rx_buffer2);
 80003fa:	4b1e      	ldr	r3, [pc, #120]	; (8000474 <debug_uart_callback+0xa0>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	4611      	mov	r1, r2
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff68 	bl	80002d8 <buff_store_char>
		}

	/*Check if TXEIE is enabled*/
	if(((USART2->ISR & ISR_TXE) !=0 ) && ((USART2->CR1 & CR1_TXEIE) !=0))
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <debug_uart_callback+0x9c>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000410:	2b00      	cmp	r3, #0
 8000412:	d029      	beq.n	8000468 <debug_uart_callback+0x94>
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <debug_uart_callback+0x9c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800041c:	2b00      	cmp	r3, #0
 800041e:	d023      	beq.n	8000468 <debug_uart_callback+0x94>
	{
		if(tx_buffer2.head == tx_buffer2.tail)
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <debug_uart_callback+0xa4>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <debug_uart_callback+0xa4>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	429a      	cmp	r2, r3
 800042a:	d106      	bne.n	800043a <debug_uart_callback+0x66>
		{
			  USART2->CR1 &=~ CR1_TXEIE;
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <debug_uart_callback+0x9c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <debug_uart_callback+0x9c>)
 8000432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000436:	6013      	str	r3, [r2, #0]
	    	tx_buffer2.tail = (tx_buffer2.tail + 1)%UART_BUFFER_SIZE;
	    	/*Transmit character*/
	    	USART2-> TDR = c;
		}
	}
}
 8000438:	e016      	b.n	8000468 <debug_uart_callback+0x94>
	    	unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <debug_uart_callback+0xa4>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <debug_uart_callback+0xa4>)
 8000440:	5cd3      	ldrb	r3, [r2, r3]
 8000442:	71bb      	strb	r3, [r7, #6]
	    	tx_buffer2.tail = (tx_buffer2.tail + 1)%UART_BUFFER_SIZE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <debug_uart_callback+0xa4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	1c59      	adds	r1, r3, #1
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <debug_uart_callback+0xa8>)
 800044c:	fba3 2301 	umull	r2, r3, r3, r1
 8000450:	091a      	lsrs	r2, r3, #4
 8000452:	4613      	mov	r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	1aca      	subs	r2, r1, r3
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <debug_uart_callback+0xa4>)
 800045e:	619a      	str	r2, [r3, #24]
	    	USART2-> TDR = c;
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <debug_uart_callback+0x9c>)
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	b292      	uxth	r2, r2
 8000466:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40004400 	.word	0x40004400
 8000474:	200000f0 	.word	0x200000f0
 8000478:	20000094 	.word	0x20000094
 800047c:	cccccccd 	.word	0xcccccccd

08000480 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	bluetooth_uart_callback();
 8000484:	f7ff ff50 	bl	8000328 <bluetooth_uart_callback>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	debug_uart_callback();
 8000490:	f7ff ffa0 	bl	80003d4 <debug_uart_callback>
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <fpu_enable>:
#include "stm32l476xx.h"



void fpu_enable(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	/*Enable floating point unit: Enable CP10 and CP11 for full access*/
	SCB->CPACR |=(1<20);
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <fpu_enable+0x50>)
 800049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a2:	4a11      	ldr	r2, [pc, #68]	; (80004e8 <fpu_enable+0x50>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<21);
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <fpu_enable+0x50>)
 80004ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <fpu_enable+0x50>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<22);
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <fpu_enable+0x50>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <fpu_enable+0x50>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<23);
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <fpu_enable+0x50>)
 80004ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <fpu_enable+0x50>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <uart_write>:
#define DBG_UART_BAUDRATE 9600

static void uart_write(int ch);
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);

static void uart_write(int ch) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & ISR_TXE)){}
 8000530:	bf00      	nop
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <uart_write+0x30>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <uart_write+0xa>
	USART2->TDR = (ch &0xFF);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	b29a      	uxth	r2, r3
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <uart_write+0x30>)
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	b292      	uxth	r2, r2
 8000548:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40004400 	.word	0x40004400

0800055c <__io_putchar>:

int __io_putchar(int ch) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ffdf 	bl	8000528 <uart_write>
	return ch;
 800056a:	687b      	ldr	r3, [r7, #4]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <debug_uart_init>:

void debug_uart_init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=GPIOAEN;   //typo here
 8000578:	4b44      	ldr	r3, [pc, #272]	; (800068c <debug_uart_init+0x118>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057c:	4a43      	ldr	r2, [pc, #268]	; (800068c <debug_uart_init+0x118>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set the mode of PA2 (USART2_TX) to AF mode*/
	GPIOA->MODER &= ~(1U<<4);
 8000584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058e:	f023 0310 	bic.w	r3, r3, #16
 8000592:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000594:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA3 (USART2_TX) to AF mode*/
	GPIOA->MODER &=~(1U<<6);
 80005a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80005b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c2:	6013      	str	r3, [r2, #0]

	/*Set AF type to AF7(UART2_TX)*/
    GPIOA->AFR[0] |=(1U<<8);  //typo here
 80005c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c8:	6a1b      	ldr	r3, [r3, #32]
 80005ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<9);  //typo here
 80005d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d8:	6a1b      	ldr	r3, [r3, #32]
 80005da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<10);  //typo here
 80005e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<11);  //typo here
 80005f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f8:	6a1b      	ldr	r3, [r3, #32]
 80005fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000602:	6213      	str	r3, [r2, #32]

    GPIOA->AFR[0] |=(1U<<12);  //typo here
 8000604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000608:	6a1b      	ldr	r3, [r3, #32]
 800060a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000612:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<13);  //typo here
 8000614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000618:	6a1b      	ldr	r3, [r3, #32]
 800061a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000622:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<14);  //typo here
 8000624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<15);  //typo here
 8000634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000638:	6a1b      	ldr	r3, [r3, #32]
 800063a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000642:	6213      	str	r3, [r2, #32]

    /*Enable clock access to UART2EN in APB1ENR*/
    RCC->APB1ENR1 |= UART2EN;   //typo here
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <debug_uart_init+0x118>)
 8000646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000648:	4a10      	ldr	r2, [pc, #64]	; (800068c <debug_uart_init+0x118>)
 800064a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064e:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable UART Module (USART Enable)*/
    USART2->CR1 &=~ CR1_UE; /*bit 0*/
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <debug_uart_init+0x11c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <debug_uart_init+0x11c>)
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]

    USART2->BRR = compute_uart_bd(APB1_CLK,DBG_UART_BAUDRATE);
 800065c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <debug_uart_init+0x120>)
 8000662:	f000 f8ab 	bl	80007bc <compute_uart_bd>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <debug_uart_init+0x11c>)
 800066c:	60da      	str	r2, [r3, #12]

    USART2->CR1 = (CR1_TE | CR1_RE);
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <debug_uart_init+0x11c>)
 8000670:	220c      	movs	r2, #12
 8000672:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(USART2_IRQn);
 8000674:	2026      	movs	r0, #38	; 0x26
 8000676:	f7ff ff39 	bl	80004ec <__NVIC_EnableIRQ>

    USART2->CR1 |= CR1_UE;
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <debug_uart_init+0x11c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <debug_uart_init+0x11c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6013      	str	r3, [r2, #0]
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	40004400 	.word	0x40004400
 8000694:	003d0900 	.word	0x003d0900

08000698 <bluetooth_uart_init>:

void bluetooth_uart_init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=GPIOAEN;   //typo here
 800069c:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <bluetooth_uart_init+0x118>)
 800069e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a0:	4a43      	ldr	r2, [pc, #268]	; (80007b0 <bluetooth_uart_init+0x118>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set the mode of PA9 (USART2_TX) to AF mode*/
	GPIOA->MODER &= ~(1U<<18);
 80006a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<19);
 80006b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c6:	6013      	str	r3, [r2, #0]

	/*Set the mode of PA10 (USART2_TX) to AF mode*/
	GPIOA->MODER &=~(1U<<20);
 80006c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<21);
 80006d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e6:	6013      	str	r3, [r2, #0]

	/*Set AF type to AF7(UART2_TX)*/
    GPIOA->AFR[0] |=(1U<<4);  //typo here
 80006e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<5);  //typo here
 80006f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fc:	6a1b      	ldr	r3, [r3, #32]
 80006fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000702:	f043 0320 	orr.w	r3, r3, #32
 8000706:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<6);  //typo here
 8000708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000716:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<7);  //typo here
 8000718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800071c:	6a1b      	ldr	r3, [r3, #32]
 800071e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000726:	6213      	str	r3, [r2, #32]

    GPIOA->AFR[0] |=(1U<<8);  //typo here
 8000728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000736:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<9);  //typo here
 8000738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000746:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<10);  //typo here
 8000748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800074c:	6a1b      	ldr	r3, [r3, #32]
 800074e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000756:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<11);  //typo here
 8000758:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000766:	6213      	str	r3, [r2, #32]

    /*Enable clock access to UART2EN in APB1ENR*/
    RCC->APB2ENR |= UART1EN;   //typo here
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <bluetooth_uart_init+0x118>)
 800076a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076c:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <bluetooth_uart_init+0x118>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6613      	str	r3, [r2, #96]	; 0x60
    /*Enable UART Module (USART Enable)*/
    USART1->CR1 &=~ CR1_UE; /*bit 0*/
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <bluetooth_uart_init+0x11c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <bluetooth_uart_init+0x11c>)
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	6013      	str	r3, [r2, #0]

    USART1->BRR = compute_uart_bd(APB1_CLK,DBG_UART_BAUDRATE);
 8000780:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <bluetooth_uart_init+0x120>)
 8000786:	f000 f819 	bl	80007bc <compute_uart_bd>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <bluetooth_uart_init+0x11c>)
 8000790:	60da      	str	r2, [r3, #12]

    USART1->CR1 = (CR1_TE | CR1_RE);
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <bluetooth_uart_init+0x11c>)
 8000794:	220c      	movs	r2, #12
 8000796:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(USART1_IRQn);
 8000798:	2025      	movs	r0, #37	; 0x25
 800079a:	f7ff fea7 	bl	80004ec <__NVIC_EnableIRQ>

    USART1->CR1 |= CR1_UE;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <bluetooth_uart_init+0x11c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <bluetooth_uart_init+0x11c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40013800 	.word	0x40013800
 80007b8:	003d0900 	.word	0x003d0900

080007bc <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	085a      	lsrs	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	441a      	add	r2, r3
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d4:	b29b      	uxth	r3, r3
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <main>:
#include "timebase.h"
#include "circular_buffer.h"


int main()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	fpu_enable();
 80007e8:	f7ff fe56 	bl	8000498 <fpu_enable>
	debug_uart_init();
 80007ec:	f7ff fec2 	bl	8000574 <debug_uart_init>
	bluetooth_uart_init();
 80007f0:	f7ff ff52 	bl	8000698 <bluetooth_uart_init>
	circular_buffer_init();
 80007f4:	f7ff fd3c 	bl	8000270 <circular_buffer_init>

	while(1) {
		systickDelayMs(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f000 f8aa 	bl	8000954 <systickDelayMs>
	 	printf("Test\n\r");
 8000800:	4801      	ldr	r0, [pc, #4]	; (8000808 <main+0x24>)
 8000802:	f000 f9bd 	bl	8000b80 <iprintf>
		systickDelayMs(1000);
 8000806:	e7f7      	b.n	80007f8 <main+0x14>
 8000808:	08001884 	.word	0x08001884

0800080c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
  }

  return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe7b 	bl	800055c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
  }
  return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a6:	605a      	str	r2, [r3, #4]
  return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f000 f9d6 	bl	8000cc8 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20018000 	.word	0x20018000
 8000948:	00000400 	.word	0x00000400
 800094c:	200000f8 	.word	0x200000f8
 8000950:	20000248 	.word	0x20000248

08000954 <systickDelayMs>:

volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq = 1;

void systickDelayMs(uint32_t delay) {
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	SysTick-> LOAD = SYSTICK_LOAD_VAL;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <systickDelayMs+0x50>)
 800095e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000962:	605a      	str	r2, [r3, #4]

	SysTick-> VAL = 0;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <systickDelayMs+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]

	SysTick-> CTRL = CTRL_CLCKSRC | CTRL_ENABLE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <systickDelayMs+0x50>)
 800096c:	2205      	movs	r2, #5
 800096e:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < delay; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e009      	b.n	800098a <systickDelayMs+0x36>
		while((SysTick->CTRL & CTRL_COUNTFLAG)==0){}
 8000976:	bf00      	nop
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <systickDelayMs+0x50>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f9      	beq.n	8000978 <systickDelayMs+0x24>
	for(int i = 0; i < delay; i++) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3301      	adds	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	d8f1      	bhi.n	8000976 <systickDelayMs+0x22>
	}
	SysTick-> CTRL = 0;
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <systickDelayMs+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f97d 	bl	8000cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff ff03 	bl	80007e4 <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009ec:	080018c8 	.word	0x080018c8
  ldr r2, =_sbss
 80009f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009f4:	20000248 	.word	0x20000248

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <std>:
 80009fc:	2300      	movs	r3, #0
 80009fe:	b510      	push	{r4, lr}
 8000a00:	4604      	mov	r4, r0
 8000a02:	e9c0 3300 	strd	r3, r3, [r0]
 8000a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a0a:	6083      	str	r3, [r0, #8]
 8000a0c:	8181      	strh	r1, [r0, #12]
 8000a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8000a10:	81c2      	strh	r2, [r0, #14]
 8000a12:	6183      	str	r3, [r0, #24]
 8000a14:	4619      	mov	r1, r3
 8000a16:	2208      	movs	r2, #8
 8000a18:	305c      	adds	r0, #92	; 0x5c
 8000a1a:	f000 f906 	bl	8000c2a <memset>
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <std+0x58>)
 8000a20:	6263      	str	r3, [r4, #36]	; 0x24
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <std+0x5c>)
 8000a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <std+0x60>)
 8000a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <std+0x64>)
 8000a2c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <std+0x68>)
 8000a30:	6224      	str	r4, [r4, #32]
 8000a32:	429c      	cmp	r4, r3
 8000a34:	d006      	beq.n	8000a44 <std+0x48>
 8000a36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000a3a:	4294      	cmp	r4, r2
 8000a3c:	d002      	beq.n	8000a44 <std+0x48>
 8000a3e:	33d0      	adds	r3, #208	; 0xd0
 8000a40:	429c      	cmp	r4, r3
 8000a42:	d105      	bne.n	8000a50 <std+0x54>
 8000a44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a4c:	f000 b966 	b.w	8000d1c <__retarget_lock_init_recursive>
 8000a50:	bd10      	pop	{r4, pc}
 8000a52:	bf00      	nop
 8000a54:	08000ba5 	.word	0x08000ba5
 8000a58:	08000bc7 	.word	0x08000bc7
 8000a5c:	08000bff 	.word	0x08000bff
 8000a60:	08000c23 	.word	0x08000c23
 8000a64:	200000fc 	.word	0x200000fc

08000a68 <stdio_exit_handler>:
 8000a68:	4a02      	ldr	r2, [pc, #8]	; (8000a74 <stdio_exit_handler+0xc>)
 8000a6a:	4903      	ldr	r1, [pc, #12]	; (8000a78 <stdio_exit_handler+0x10>)
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <stdio_exit_handler+0x14>)
 8000a6e:	f000 b869 	b.w	8000b44 <_fwalk_sglue>
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000
 8000a78:	080015c9 	.word	0x080015c9
 8000a7c:	2000000c 	.word	0x2000000c

08000a80 <cleanup_stdio>:
 8000a80:	6841      	ldr	r1, [r0, #4]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <cleanup_stdio+0x34>)
 8000a84:	4299      	cmp	r1, r3
 8000a86:	b510      	push	{r4, lr}
 8000a88:	4604      	mov	r4, r0
 8000a8a:	d001      	beq.n	8000a90 <cleanup_stdio+0x10>
 8000a8c:	f000 fd9c 	bl	80015c8 <_fflush_r>
 8000a90:	68a1      	ldr	r1, [r4, #8]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <cleanup_stdio+0x38>)
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d002      	beq.n	8000a9e <cleanup_stdio+0x1e>
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f000 fd95 	bl	80015c8 <_fflush_r>
 8000a9e:	68e1      	ldr	r1, [r4, #12]
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <cleanup_stdio+0x3c>)
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d004      	beq.n	8000ab0 <cleanup_stdio+0x30>
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aac:	f000 bd8c 	b.w	80015c8 <_fflush_r>
 8000ab0:	bd10      	pop	{r4, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000fc 	.word	0x200000fc
 8000ab8:	20000164 	.word	0x20000164
 8000abc:	200001cc 	.word	0x200001cc

08000ac0 <global_stdio_init.part.0>:
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <global_stdio_init.part.0+0x30>)
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <global_stdio_init.part.0+0x34>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <global_stdio_init.part.0+0x38>)
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	4620      	mov	r0, r4
 8000acc:	2200      	movs	r2, #0
 8000ace:	2104      	movs	r1, #4
 8000ad0:	f7ff ff94 	bl	80009fc <std>
 8000ad4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2109      	movs	r1, #9
 8000adc:	f7ff ff8e 	bl	80009fc <std>
 8000ae0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aea:	2112      	movs	r1, #18
 8000aec:	f7ff bf86 	b.w	80009fc <std>
 8000af0:	20000234 	.word	0x20000234
 8000af4:	200000fc 	.word	0x200000fc
 8000af8:	08000a69 	.word	0x08000a69

08000afc <__sfp_lock_acquire>:
 8000afc:	4801      	ldr	r0, [pc, #4]	; (8000b04 <__sfp_lock_acquire+0x8>)
 8000afe:	f000 b90e 	b.w	8000d1e <__retarget_lock_acquire_recursive>
 8000b02:	bf00      	nop
 8000b04:	2000023d 	.word	0x2000023d

08000b08 <__sfp_lock_release>:
 8000b08:	4801      	ldr	r0, [pc, #4]	; (8000b10 <__sfp_lock_release+0x8>)
 8000b0a:	f000 b909 	b.w	8000d20 <__retarget_lock_release_recursive>
 8000b0e:	bf00      	nop
 8000b10:	2000023d 	.word	0x2000023d

08000b14 <__sinit>:
 8000b14:	b510      	push	{r4, lr}
 8000b16:	4604      	mov	r4, r0
 8000b18:	f7ff fff0 	bl	8000afc <__sfp_lock_acquire>
 8000b1c:	6a23      	ldr	r3, [r4, #32]
 8000b1e:	b11b      	cbz	r3, 8000b28 <__sinit+0x14>
 8000b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b24:	f7ff bff0 	b.w	8000b08 <__sfp_lock_release>
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__sinit+0x28>)
 8000b2a:	6223      	str	r3, [r4, #32]
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__sinit+0x2c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1f5      	bne.n	8000b20 <__sinit+0xc>
 8000b34:	f7ff ffc4 	bl	8000ac0 <global_stdio_init.part.0>
 8000b38:	e7f2      	b.n	8000b20 <__sinit+0xc>
 8000b3a:	bf00      	nop
 8000b3c:	08000a81 	.word	0x08000a81
 8000b40:	20000234 	.word	0x20000234

08000b44 <_fwalk_sglue>:
 8000b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b48:	4607      	mov	r7, r0
 8000b4a:	4688      	mov	r8, r1
 8000b4c:	4614      	mov	r4, r2
 8000b4e:	2600      	movs	r6, #0
 8000b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b54:	f1b9 0901 	subs.w	r9, r9, #1
 8000b58:	d505      	bpl.n	8000b66 <_fwalk_sglue+0x22>
 8000b5a:	6824      	ldr	r4, [r4, #0]
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d1f7      	bne.n	8000b50 <_fwalk_sglue+0xc>
 8000b60:	4630      	mov	r0, r6
 8000b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b66:	89ab      	ldrh	r3, [r5, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d907      	bls.n	8000b7c <_fwalk_sglue+0x38>
 8000b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b70:	3301      	adds	r3, #1
 8000b72:	d003      	beq.n	8000b7c <_fwalk_sglue+0x38>
 8000b74:	4629      	mov	r1, r5
 8000b76:	4638      	mov	r0, r7
 8000b78:	47c0      	blx	r8
 8000b7a:	4306      	orrs	r6, r0
 8000b7c:	3568      	adds	r5, #104	; 0x68
 8000b7e:	e7e9      	b.n	8000b54 <_fwalk_sglue+0x10>

08000b80 <iprintf>:
 8000b80:	b40f      	push	{r0, r1, r2, r3}
 8000b82:	b507      	push	{r0, r1, r2, lr}
 8000b84:	4906      	ldr	r1, [pc, #24]	; (8000ba0 <iprintf+0x20>)
 8000b86:	ab04      	add	r3, sp, #16
 8000b88:	6808      	ldr	r0, [r1, #0]
 8000b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b8e:	6881      	ldr	r1, [r0, #8]
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	f000 f9e9 	bl	8000f68 <_vfiprintf_r>
 8000b96:	b003      	add	sp, #12
 8000b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr
 8000ba0:	20000058 	.word	0x20000058

08000ba4 <__sread>:
 8000ba4:	b510      	push	{r4, lr}
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bac:	f000 f868 	bl	8000c80 <_read_r>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	bfab      	itete	ge
 8000bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8000bb8:	181b      	addge	r3, r3, r0
 8000bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000bbe:	bfac      	ite	ge
 8000bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bc2:	81a3      	strhlt	r3, [r4, #12]
 8000bc4:	bd10      	pop	{r4, pc}

08000bc6 <__swrite>:
 8000bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bca:	461f      	mov	r7, r3
 8000bcc:	898b      	ldrh	r3, [r1, #12]
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	4605      	mov	r5, r0
 8000bd2:	460c      	mov	r4, r1
 8000bd4:	4616      	mov	r6, r2
 8000bd6:	d505      	bpl.n	8000be4 <__swrite+0x1e>
 8000bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	2200      	movs	r2, #0
 8000be0:	f000 f83c 	bl	8000c5c <_lseek_r>
 8000be4:	89a3      	ldrh	r3, [r4, #12]
 8000be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	4632      	mov	r2, r6
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bfa:	f000 b853 	b.w	8000ca4 <_write_r>

08000bfe <__sseek>:
 8000bfe:	b510      	push	{r4, lr}
 8000c00:	460c      	mov	r4, r1
 8000c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c06:	f000 f829 	bl	8000c5c <_lseek_r>
 8000c0a:	1c43      	adds	r3, r0, #1
 8000c0c:	89a3      	ldrh	r3, [r4, #12]
 8000c0e:	bf15      	itete	ne
 8000c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c1a:	81a3      	strheq	r3, [r4, #12]
 8000c1c:	bf18      	it	ne
 8000c1e:	81a3      	strhne	r3, [r4, #12]
 8000c20:	bd10      	pop	{r4, pc}

08000c22 <__sclose>:
 8000c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c26:	f000 b809 	b.w	8000c3c <_close_r>

08000c2a <memset>:
 8000c2a:	4402      	add	r2, r0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d100      	bne.n	8000c34 <memset+0xa>
 8000c32:	4770      	bx	lr
 8000c34:	f803 1b01 	strb.w	r1, [r3], #1
 8000c38:	e7f9      	b.n	8000c2e <memset+0x4>
	...

08000c3c <_close_r>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4d06      	ldr	r5, [pc, #24]	; (8000c58 <_close_r+0x1c>)
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	4608      	mov	r0, r1
 8000c46:	602b      	str	r3, [r5, #0]
 8000c48:	f7ff fe19 	bl	800087e <_close>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d102      	bne.n	8000c56 <_close_r+0x1a>
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	b103      	cbz	r3, 8000c56 <_close_r+0x1a>
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	20000238 	.word	0x20000238

08000c5c <_lseek_r>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4d07      	ldr	r5, [pc, #28]	; (8000c7c <_lseek_r+0x20>)
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	602a      	str	r2, [r5, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f7ff fe2e 	bl	80008cc <_lseek>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_lseek_r+0x1e>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_lseek_r+0x1e>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	20000238 	.word	0x20000238

08000c80 <_read_r>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	4d07      	ldr	r5, [pc, #28]	; (8000ca0 <_read_r+0x20>)
 8000c84:	4604      	mov	r4, r0
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	602a      	str	r2, [r5, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f7ff fdbc 	bl	800080c <_read>
 8000c94:	1c43      	adds	r3, r0, #1
 8000c96:	d102      	bne.n	8000c9e <_read_r+0x1e>
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	b103      	cbz	r3, 8000c9e <_read_r+0x1e>
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ca0:	20000238 	.word	0x20000238

08000ca4 <_write_r>:
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4d07      	ldr	r5, [pc, #28]	; (8000cc4 <_write_r+0x20>)
 8000ca8:	4604      	mov	r4, r0
 8000caa:	4608      	mov	r0, r1
 8000cac:	4611      	mov	r1, r2
 8000cae:	2200      	movs	r2, #0
 8000cb0:	602a      	str	r2, [r5, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f7ff fdc7 	bl	8000846 <_write>
 8000cb8:	1c43      	adds	r3, r0, #1
 8000cba:	d102      	bne.n	8000cc2 <_write_r+0x1e>
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	b103      	cbz	r3, 8000cc2 <_write_r+0x1e>
 8000cc0:	6023      	str	r3, [r4, #0]
 8000cc2:	bd38      	pop	{r3, r4, r5, pc}
 8000cc4:	20000238 	.word	0x20000238

08000cc8 <__errno>:
 8000cc8:	4b01      	ldr	r3, [pc, #4]	; (8000cd0 <__errno+0x8>)
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000058 	.word	0x20000058

08000cd4 <__libc_init_array>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	4d0d      	ldr	r5, [pc, #52]	; (8000d0c <__libc_init_array+0x38>)
 8000cd8:	4c0d      	ldr	r4, [pc, #52]	; (8000d10 <__libc_init_array+0x3c>)
 8000cda:	1b64      	subs	r4, r4, r5
 8000cdc:	10a4      	asrs	r4, r4, #2
 8000cde:	2600      	movs	r6, #0
 8000ce0:	42a6      	cmp	r6, r4
 8000ce2:	d109      	bne.n	8000cf8 <__libc_init_array+0x24>
 8000ce4:	4d0b      	ldr	r5, [pc, #44]	; (8000d14 <__libc_init_array+0x40>)
 8000ce6:	4c0c      	ldr	r4, [pc, #48]	; (8000d18 <__libc_init_array+0x44>)
 8000ce8:	f000 fdc0 	bl	800186c <_init>
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	10a4      	asrs	r4, r4, #2
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	42a6      	cmp	r6, r4
 8000cf4:	d105      	bne.n	8000d02 <__libc_init_array+0x2e>
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfc:	4798      	blx	r3
 8000cfe:	3601      	adds	r6, #1
 8000d00:	e7ee      	b.n	8000ce0 <__libc_init_array+0xc>
 8000d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d06:	4798      	blx	r3
 8000d08:	3601      	adds	r6, #1
 8000d0a:	e7f2      	b.n	8000cf2 <__libc_init_array+0x1e>
 8000d0c:	080018c0 	.word	0x080018c0
 8000d10:	080018c0 	.word	0x080018c0
 8000d14:	080018c0 	.word	0x080018c0
 8000d18:	080018c4 	.word	0x080018c4

08000d1c <__retarget_lock_init_recursive>:
 8000d1c:	4770      	bx	lr

08000d1e <__retarget_lock_acquire_recursive>:
 8000d1e:	4770      	bx	lr

08000d20 <__retarget_lock_release_recursive>:
 8000d20:	4770      	bx	lr
	...

08000d24 <_free_r>:
 8000d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d044      	beq.n	8000db4 <_free_r+0x90>
 8000d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d2e:	9001      	str	r0, [sp, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f1a1 0404 	sub.w	r4, r1, #4
 8000d36:	bfb8      	it	lt
 8000d38:	18e4      	addlt	r4, r4, r3
 8000d3a:	f000 f8df 	bl	8000efc <__malloc_lock>
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <_free_r+0x94>)
 8000d40:	9801      	ldr	r0, [sp, #4]
 8000d42:	6813      	ldr	r3, [r2, #0]
 8000d44:	b933      	cbnz	r3, 8000d54 <_free_r+0x30>
 8000d46:	6063      	str	r3, [r4, #4]
 8000d48:	6014      	str	r4, [r2, #0]
 8000d4a:	b003      	add	sp, #12
 8000d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d50:	f000 b8da 	b.w	8000f08 <__malloc_unlock>
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d908      	bls.n	8000d6a <_free_r+0x46>
 8000d58:	6825      	ldr	r5, [r4, #0]
 8000d5a:	1961      	adds	r1, r4, r5
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	bf01      	itttt	eq
 8000d60:	6819      	ldreq	r1, [r3, #0]
 8000d62:	685b      	ldreq	r3, [r3, #4]
 8000d64:	1949      	addeq	r1, r1, r5
 8000d66:	6021      	streq	r1, [r4, #0]
 8000d68:	e7ed      	b.n	8000d46 <_free_r+0x22>
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	b10b      	cbz	r3, 8000d74 <_free_r+0x50>
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d9fa      	bls.n	8000d6a <_free_r+0x46>
 8000d74:	6811      	ldr	r1, [r2, #0]
 8000d76:	1855      	adds	r5, r2, r1
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	d10b      	bne.n	8000d94 <_free_r+0x70>
 8000d7c:	6824      	ldr	r4, [r4, #0]
 8000d7e:	4421      	add	r1, r4
 8000d80:	1854      	adds	r4, r2, r1
 8000d82:	42a3      	cmp	r3, r4
 8000d84:	6011      	str	r1, [r2, #0]
 8000d86:	d1e0      	bne.n	8000d4a <_free_r+0x26>
 8000d88:	681c      	ldr	r4, [r3, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	6053      	str	r3, [r2, #4]
 8000d8e:	440c      	add	r4, r1
 8000d90:	6014      	str	r4, [r2, #0]
 8000d92:	e7da      	b.n	8000d4a <_free_r+0x26>
 8000d94:	d902      	bls.n	8000d9c <_free_r+0x78>
 8000d96:	230c      	movs	r3, #12
 8000d98:	6003      	str	r3, [r0, #0]
 8000d9a:	e7d6      	b.n	8000d4a <_free_r+0x26>
 8000d9c:	6825      	ldr	r5, [r4, #0]
 8000d9e:	1961      	adds	r1, r4, r5
 8000da0:	428b      	cmp	r3, r1
 8000da2:	bf04      	itt	eq
 8000da4:	6819      	ldreq	r1, [r3, #0]
 8000da6:	685b      	ldreq	r3, [r3, #4]
 8000da8:	6063      	str	r3, [r4, #4]
 8000daa:	bf04      	itt	eq
 8000dac:	1949      	addeq	r1, r1, r5
 8000dae:	6021      	streq	r1, [r4, #0]
 8000db0:	6054      	str	r4, [r2, #4]
 8000db2:	e7ca      	b.n	8000d4a <_free_r+0x26>
 8000db4:	b003      	add	sp, #12
 8000db6:	bd30      	pop	{r4, r5, pc}
 8000db8:	20000240 	.word	0x20000240

08000dbc <sbrk_aligned>:
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	4e0e      	ldr	r6, [pc, #56]	; (8000df8 <sbrk_aligned+0x3c>)
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	6831      	ldr	r1, [r6, #0]
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	b911      	cbnz	r1, 8000dce <sbrk_aligned+0x12>
 8000dc8:	f000 fcbc 	bl	8001744 <_sbrk_r>
 8000dcc:	6030      	str	r0, [r6, #0]
 8000dce:	4621      	mov	r1, r4
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f000 fcb7 	bl	8001744 <_sbrk_r>
 8000dd6:	1c43      	adds	r3, r0, #1
 8000dd8:	d00a      	beq.n	8000df0 <sbrk_aligned+0x34>
 8000dda:	1cc4      	adds	r4, r0, #3
 8000ddc:	f024 0403 	bic.w	r4, r4, #3
 8000de0:	42a0      	cmp	r0, r4
 8000de2:	d007      	beq.n	8000df4 <sbrk_aligned+0x38>
 8000de4:	1a21      	subs	r1, r4, r0
 8000de6:	4628      	mov	r0, r5
 8000de8:	f000 fcac 	bl	8001744 <_sbrk_r>
 8000dec:	3001      	adds	r0, #1
 8000dee:	d101      	bne.n	8000df4 <sbrk_aligned+0x38>
 8000df0:	f04f 34ff 	mov.w	r4, #4294967295
 8000df4:	4620      	mov	r0, r4
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	20000244 	.word	0x20000244

08000dfc <_malloc_r>:
 8000dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e00:	1ccd      	adds	r5, r1, #3
 8000e02:	f025 0503 	bic.w	r5, r5, #3
 8000e06:	3508      	adds	r5, #8
 8000e08:	2d0c      	cmp	r5, #12
 8000e0a:	bf38      	it	cc
 8000e0c:	250c      	movcc	r5, #12
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	4607      	mov	r7, r0
 8000e12:	db01      	blt.n	8000e18 <_malloc_r+0x1c>
 8000e14:	42a9      	cmp	r1, r5
 8000e16:	d905      	bls.n	8000e24 <_malloc_r+0x28>
 8000e18:	230c      	movs	r3, #12
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ef8 <_malloc_r+0xfc>
 8000e28:	f000 f868 	bl	8000efc <__malloc_lock>
 8000e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8000e30:	461c      	mov	r4, r3
 8000e32:	bb5c      	cbnz	r4, 8000e8c <_malloc_r+0x90>
 8000e34:	4629      	mov	r1, r5
 8000e36:	4638      	mov	r0, r7
 8000e38:	f7ff ffc0 	bl	8000dbc <sbrk_aligned>
 8000e3c:	1c43      	adds	r3, r0, #1
 8000e3e:	4604      	mov	r4, r0
 8000e40:	d155      	bne.n	8000eee <_malloc_r+0xf2>
 8000e42:	f8d8 4000 	ldr.w	r4, [r8]
 8000e46:	4626      	mov	r6, r4
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d145      	bne.n	8000ed8 <_malloc_r+0xdc>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d048      	beq.n	8000ee2 <_malloc_r+0xe6>
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	4631      	mov	r1, r6
 8000e54:	4638      	mov	r0, r7
 8000e56:	eb04 0903 	add.w	r9, r4, r3
 8000e5a:	f000 fc73 	bl	8001744 <_sbrk_r>
 8000e5e:	4581      	cmp	r9, r0
 8000e60:	d13f      	bne.n	8000ee2 <_malloc_r+0xe6>
 8000e62:	6821      	ldr	r1, [r4, #0]
 8000e64:	1a6d      	subs	r5, r5, r1
 8000e66:	4629      	mov	r1, r5
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f7ff ffa7 	bl	8000dbc <sbrk_aligned>
 8000e6e:	3001      	adds	r0, #1
 8000e70:	d037      	beq.n	8000ee2 <_malloc_r+0xe6>
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	442b      	add	r3, r5
 8000e76:	6023      	str	r3, [r4, #0]
 8000e78:	f8d8 3000 	ldr.w	r3, [r8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d038      	beq.n	8000ef2 <_malloc_r+0xf6>
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	42a2      	cmp	r2, r4
 8000e84:	d12b      	bne.n	8000ede <_malloc_r+0xe2>
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	e00f      	b.n	8000eac <_malloc_r+0xb0>
 8000e8c:	6822      	ldr	r2, [r4, #0]
 8000e8e:	1b52      	subs	r2, r2, r5
 8000e90:	d41f      	bmi.n	8000ed2 <_malloc_r+0xd6>
 8000e92:	2a0b      	cmp	r2, #11
 8000e94:	d917      	bls.n	8000ec6 <_malloc_r+0xca>
 8000e96:	1961      	adds	r1, r4, r5
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	6025      	str	r5, [r4, #0]
 8000e9c:	bf18      	it	ne
 8000e9e:	6059      	strne	r1, [r3, #4]
 8000ea0:	6863      	ldr	r3, [r4, #4]
 8000ea2:	bf08      	it	eq
 8000ea4:	f8c8 1000 	streq.w	r1, [r8]
 8000ea8:	5162      	str	r2, [r4, r5]
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	4638      	mov	r0, r7
 8000eae:	f104 060b 	add.w	r6, r4, #11
 8000eb2:	f000 f829 	bl	8000f08 <__malloc_unlock>
 8000eb6:	f026 0607 	bic.w	r6, r6, #7
 8000eba:	1d23      	adds	r3, r4, #4
 8000ebc:	1af2      	subs	r2, r6, r3
 8000ebe:	d0ae      	beq.n	8000e1e <_malloc_r+0x22>
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	50a3      	str	r3, [r4, r2]
 8000ec4:	e7ab      	b.n	8000e1e <_malloc_r+0x22>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	6862      	ldr	r2, [r4, #4]
 8000eca:	d1dd      	bne.n	8000e88 <_malloc_r+0x8c>
 8000ecc:	f8c8 2000 	str.w	r2, [r8]
 8000ed0:	e7ec      	b.n	8000eac <_malloc_r+0xb0>
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	6864      	ldr	r4, [r4, #4]
 8000ed6:	e7ac      	b.n	8000e32 <_malloc_r+0x36>
 8000ed8:	4634      	mov	r4, r6
 8000eda:	6876      	ldr	r6, [r6, #4]
 8000edc:	e7b4      	b.n	8000e48 <_malloc_r+0x4c>
 8000ede:	4613      	mov	r3, r2
 8000ee0:	e7cc      	b.n	8000e7c <_malloc_r+0x80>
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	f000 f80e 	bl	8000f08 <__malloc_unlock>
 8000eec:	e797      	b.n	8000e1e <_malloc_r+0x22>
 8000eee:	6025      	str	r5, [r4, #0]
 8000ef0:	e7dc      	b.n	8000eac <_malloc_r+0xb0>
 8000ef2:	605b      	str	r3, [r3, #4]
 8000ef4:	deff      	udf	#255	; 0xff
 8000ef6:	bf00      	nop
 8000ef8:	20000240 	.word	0x20000240

08000efc <__malloc_lock>:
 8000efc:	4801      	ldr	r0, [pc, #4]	; (8000f04 <__malloc_lock+0x8>)
 8000efe:	f7ff bf0e 	b.w	8000d1e <__retarget_lock_acquire_recursive>
 8000f02:	bf00      	nop
 8000f04:	2000023c 	.word	0x2000023c

08000f08 <__malloc_unlock>:
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <__malloc_unlock+0x8>)
 8000f0a:	f7ff bf09 	b.w	8000d20 <__retarget_lock_release_recursive>
 8000f0e:	bf00      	nop
 8000f10:	2000023c 	.word	0x2000023c

08000f14 <__sfputc_r>:
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	b410      	push	{r4}
 8000f1c:	6093      	str	r3, [r2, #8]
 8000f1e:	da08      	bge.n	8000f32 <__sfputc_r+0x1e>
 8000f20:	6994      	ldr	r4, [r2, #24]
 8000f22:	42a3      	cmp	r3, r4
 8000f24:	db01      	blt.n	8000f2a <__sfputc_r+0x16>
 8000f26:	290a      	cmp	r1, #10
 8000f28:	d103      	bne.n	8000f32 <__sfputc_r+0x1e>
 8000f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2e:	f000 bb73 	b.w	8001618 <__swbuf_r>
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	1c58      	adds	r0, r3, #1
 8000f36:	6010      	str	r0, [r2, #0]
 8000f38:	7019      	strb	r1, [r3, #0]
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <__sfputs_r>:
 8000f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f44:	4606      	mov	r6, r0
 8000f46:	460f      	mov	r7, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	18d5      	adds	r5, r2, r3
 8000f4c:	42ac      	cmp	r4, r5
 8000f4e:	d101      	bne.n	8000f54 <__sfputs_r+0x12>
 8000f50:	2000      	movs	r0, #0
 8000f52:	e007      	b.n	8000f64 <__sfputs_r+0x22>
 8000f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f58:	463a      	mov	r2, r7
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	f7ff ffda 	bl	8000f14 <__sfputc_r>
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	d1f3      	bne.n	8000f4c <__sfputs_r+0xa>
 8000f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f68 <_vfiprintf_r>:
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	b09d      	sub	sp, #116	; 0x74
 8000f70:	4614      	mov	r4, r2
 8000f72:	4698      	mov	r8, r3
 8000f74:	4606      	mov	r6, r0
 8000f76:	b118      	cbz	r0, 8000f80 <_vfiprintf_r+0x18>
 8000f78:	6a03      	ldr	r3, [r0, #32]
 8000f7a:	b90b      	cbnz	r3, 8000f80 <_vfiprintf_r+0x18>
 8000f7c:	f7ff fdca 	bl	8000b14 <__sinit>
 8000f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f82:	07d9      	lsls	r1, r3, #31
 8000f84:	d405      	bmi.n	8000f92 <_vfiprintf_r+0x2a>
 8000f86:	89ab      	ldrh	r3, [r5, #12]
 8000f88:	059a      	lsls	r2, r3, #22
 8000f8a:	d402      	bmi.n	8000f92 <_vfiprintf_r+0x2a>
 8000f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f8e:	f7ff fec6 	bl	8000d1e <__retarget_lock_acquire_recursive>
 8000f92:	89ab      	ldrh	r3, [r5, #12]
 8000f94:	071b      	lsls	r3, r3, #28
 8000f96:	d501      	bpl.n	8000f9c <_vfiprintf_r+0x34>
 8000f98:	692b      	ldr	r3, [r5, #16]
 8000f9a:	b99b      	cbnz	r3, 8000fc4 <_vfiprintf_r+0x5c>
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f000 fb78 	bl	8001694 <__swsetup_r>
 8000fa4:	b170      	cbz	r0, 8000fc4 <_vfiprintf_r+0x5c>
 8000fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fa8:	07dc      	lsls	r4, r3, #31
 8000faa:	d504      	bpl.n	8000fb6 <_vfiprintf_r+0x4e>
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	b01d      	add	sp, #116	; 0x74
 8000fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb6:	89ab      	ldrh	r3, [r5, #12]
 8000fb8:	0598      	lsls	r0, r3, #22
 8000fba:	d4f7      	bmi.n	8000fac <_vfiprintf_r+0x44>
 8000fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000fbe:	f7ff feaf 	bl	8000d20 <__retarget_lock_release_recursive>
 8000fc2:	e7f3      	b.n	8000fac <_vfiprintf_r+0x44>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8000fc8:	2320      	movs	r3, #32
 8000fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fd2:	2330      	movs	r3, #48	; 0x30
 8000fd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001188 <_vfiprintf_r+0x220>
 8000fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fdc:	f04f 0901 	mov.w	r9, #1
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fe8:	b10a      	cbz	r2, 8000fee <_vfiprintf_r+0x86>
 8000fea:	2a25      	cmp	r2, #37	; 0x25
 8000fec:	d1f9      	bne.n	8000fe2 <_vfiprintf_r+0x7a>
 8000fee:	ebba 0b04 	subs.w	fp, sl, r4
 8000ff2:	d00b      	beq.n	800100c <_vfiprintf_r+0xa4>
 8000ff4:	465b      	mov	r3, fp
 8000ff6:	4622      	mov	r2, r4
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f7ff ffa1 	bl	8000f42 <__sfputs_r>
 8001000:	3001      	adds	r0, #1
 8001002:	f000 80a9 	beq.w	8001158 <_vfiprintf_r+0x1f0>
 8001006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001008:	445a      	add	r2, fp
 800100a:	9209      	str	r2, [sp, #36]	; 0x24
 800100c:	f89a 3000 	ldrb.w	r3, [sl]
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a1 	beq.w	8001158 <_vfiprintf_r+0x1f0>
 8001016:	2300      	movs	r3, #0
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001020:	f10a 0a01 	add.w	sl, sl, #1
 8001024:	9304      	str	r3, [sp, #16]
 8001026:	9307      	str	r3, [sp, #28]
 8001028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800102c:	931a      	str	r3, [sp, #104]	; 0x68
 800102e:	4654      	mov	r4, sl
 8001030:	2205      	movs	r2, #5
 8001032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001036:	4854      	ldr	r0, [pc, #336]	; (8001188 <_vfiprintf_r+0x220>)
 8001038:	f7ff f8ca 	bl	80001d0 <memchr>
 800103c:	9a04      	ldr	r2, [sp, #16]
 800103e:	b9d8      	cbnz	r0, 8001078 <_vfiprintf_r+0x110>
 8001040:	06d1      	lsls	r1, r2, #27
 8001042:	bf44      	itt	mi
 8001044:	2320      	movmi	r3, #32
 8001046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800104a:	0713      	lsls	r3, r2, #28
 800104c:	bf44      	itt	mi
 800104e:	232b      	movmi	r3, #43	; 0x2b
 8001050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001054:	f89a 3000 	ldrb.w	r3, [sl]
 8001058:	2b2a      	cmp	r3, #42	; 0x2a
 800105a:	d015      	beq.n	8001088 <_vfiprintf_r+0x120>
 800105c:	9a07      	ldr	r2, [sp, #28]
 800105e:	4654      	mov	r4, sl
 8001060:	2000      	movs	r0, #0
 8001062:	f04f 0c0a 	mov.w	ip, #10
 8001066:	4621      	mov	r1, r4
 8001068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800106c:	3b30      	subs	r3, #48	; 0x30
 800106e:	2b09      	cmp	r3, #9
 8001070:	d94d      	bls.n	800110e <_vfiprintf_r+0x1a6>
 8001072:	b1b0      	cbz	r0, 80010a2 <_vfiprintf_r+0x13a>
 8001074:	9207      	str	r2, [sp, #28]
 8001076:	e014      	b.n	80010a2 <_vfiprintf_r+0x13a>
 8001078:	eba0 0308 	sub.w	r3, r0, r8
 800107c:	fa09 f303 	lsl.w	r3, r9, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	9304      	str	r3, [sp, #16]
 8001084:	46a2      	mov	sl, r4
 8001086:	e7d2      	b.n	800102e <_vfiprintf_r+0xc6>
 8001088:	9b03      	ldr	r3, [sp, #12]
 800108a:	1d19      	adds	r1, r3, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	9103      	str	r1, [sp, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfbb      	ittet	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	f042 0202 	orrlt.w	r2, r2, #2
 800109a:	9307      	strge	r3, [sp, #28]
 800109c:	9307      	strlt	r3, [sp, #28]
 800109e:	bfb8      	it	lt
 80010a0:	9204      	strlt	r2, [sp, #16]
 80010a2:	7823      	ldrb	r3, [r4, #0]
 80010a4:	2b2e      	cmp	r3, #46	; 0x2e
 80010a6:	d10c      	bne.n	80010c2 <_vfiprintf_r+0x15a>
 80010a8:	7863      	ldrb	r3, [r4, #1]
 80010aa:	2b2a      	cmp	r3, #42	; 0x2a
 80010ac:	d134      	bne.n	8001118 <_vfiprintf_r+0x1b0>
 80010ae:	9b03      	ldr	r3, [sp, #12]
 80010b0:	1d1a      	adds	r2, r3, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	9203      	str	r2, [sp, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bfb8      	it	lt
 80010ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80010be:	3402      	adds	r4, #2
 80010c0:	9305      	str	r3, [sp, #20]
 80010c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001198 <_vfiprintf_r+0x230>
 80010c6:	7821      	ldrb	r1, [r4, #0]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4650      	mov	r0, sl
 80010cc:	f7ff f880 	bl	80001d0 <memchr>
 80010d0:	b138      	cbz	r0, 80010e2 <_vfiprintf_r+0x17a>
 80010d2:	9b04      	ldr	r3, [sp, #16]
 80010d4:	eba0 000a 	sub.w	r0, r0, sl
 80010d8:	2240      	movs	r2, #64	; 0x40
 80010da:	4082      	lsls	r2, r0
 80010dc:	4313      	orrs	r3, r2
 80010de:	3401      	adds	r4, #1
 80010e0:	9304      	str	r3, [sp, #16]
 80010e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010e6:	4829      	ldr	r0, [pc, #164]	; (800118c <_vfiprintf_r+0x224>)
 80010e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010ec:	2206      	movs	r2, #6
 80010ee:	f7ff f86f 	bl	80001d0 <memchr>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d03f      	beq.n	8001176 <_vfiprintf_r+0x20e>
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <_vfiprintf_r+0x228>)
 80010f8:	bb1b      	cbnz	r3, 8001142 <_vfiprintf_r+0x1da>
 80010fa:	9b03      	ldr	r3, [sp, #12]
 80010fc:	3307      	adds	r3, #7
 80010fe:	f023 0307 	bic.w	r3, r3, #7
 8001102:	3308      	adds	r3, #8
 8001104:	9303      	str	r3, [sp, #12]
 8001106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001108:	443b      	add	r3, r7
 800110a:	9309      	str	r3, [sp, #36]	; 0x24
 800110c:	e768      	b.n	8000fe0 <_vfiprintf_r+0x78>
 800110e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001112:	460c      	mov	r4, r1
 8001114:	2001      	movs	r0, #1
 8001116:	e7a6      	b.n	8001066 <_vfiprintf_r+0xfe>
 8001118:	2300      	movs	r3, #0
 800111a:	3401      	adds	r4, #1
 800111c:	9305      	str	r3, [sp, #20]
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 0c0a 	mov.w	ip, #10
 8001124:	4620      	mov	r0, r4
 8001126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800112a:	3a30      	subs	r2, #48	; 0x30
 800112c:	2a09      	cmp	r2, #9
 800112e:	d903      	bls.n	8001138 <_vfiprintf_r+0x1d0>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0c6      	beq.n	80010c2 <_vfiprintf_r+0x15a>
 8001134:	9105      	str	r1, [sp, #20]
 8001136:	e7c4      	b.n	80010c2 <_vfiprintf_r+0x15a>
 8001138:	fb0c 2101 	mla	r1, ip, r1, r2
 800113c:	4604      	mov	r4, r0
 800113e:	2301      	movs	r3, #1
 8001140:	e7f0      	b.n	8001124 <_vfiprintf_r+0x1bc>
 8001142:	ab03      	add	r3, sp, #12
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	462a      	mov	r2, r5
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <_vfiprintf_r+0x22c>)
 800114a:	a904      	add	r1, sp, #16
 800114c:	4630      	mov	r0, r6
 800114e:	f3af 8000 	nop.w
 8001152:	4607      	mov	r7, r0
 8001154:	1c78      	adds	r0, r7, #1
 8001156:	d1d6      	bne.n	8001106 <_vfiprintf_r+0x19e>
 8001158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800115a:	07d9      	lsls	r1, r3, #31
 800115c:	d405      	bmi.n	800116a <_vfiprintf_r+0x202>
 800115e:	89ab      	ldrh	r3, [r5, #12]
 8001160:	059a      	lsls	r2, r3, #22
 8001162:	d402      	bmi.n	800116a <_vfiprintf_r+0x202>
 8001164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001166:	f7ff fddb 	bl	8000d20 <__retarget_lock_release_recursive>
 800116a:	89ab      	ldrh	r3, [r5, #12]
 800116c:	065b      	lsls	r3, r3, #25
 800116e:	f53f af1d 	bmi.w	8000fac <_vfiprintf_r+0x44>
 8001172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001174:	e71c      	b.n	8000fb0 <_vfiprintf_r+0x48>
 8001176:	ab03      	add	r3, sp, #12
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	462a      	mov	r2, r5
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <_vfiprintf_r+0x22c>)
 800117e:	a904      	add	r1, sp, #16
 8001180:	4630      	mov	r0, r6
 8001182:	f000 f879 	bl	8001278 <_printf_i>
 8001186:	e7e4      	b.n	8001152 <_vfiprintf_r+0x1ea>
 8001188:	0800188b 	.word	0x0800188b
 800118c:	08001895 	.word	0x08001895
 8001190:	00000000 	.word	0x00000000
 8001194:	08000f43 	.word	0x08000f43
 8001198:	08001891 	.word	0x08001891

0800119c <_printf_common>:
 800119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a0:	4616      	mov	r6, r2
 80011a2:	4699      	mov	r9, r3
 80011a4:	688a      	ldr	r2, [r1, #8]
 80011a6:	690b      	ldr	r3, [r1, #16]
 80011a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80011ac:	4293      	cmp	r3, r2
 80011ae:	bfb8      	it	lt
 80011b0:	4613      	movlt	r3, r2
 80011b2:	6033      	str	r3, [r6, #0]
 80011b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011b8:	4607      	mov	r7, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	b10a      	cbz	r2, 80011c2 <_printf_common+0x26>
 80011be:	3301      	adds	r3, #1
 80011c0:	6033      	str	r3, [r6, #0]
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	0699      	lsls	r1, r3, #26
 80011c6:	bf42      	ittt	mi
 80011c8:	6833      	ldrmi	r3, [r6, #0]
 80011ca:	3302      	addmi	r3, #2
 80011cc:	6033      	strmi	r3, [r6, #0]
 80011ce:	6825      	ldr	r5, [r4, #0]
 80011d0:	f015 0506 	ands.w	r5, r5, #6
 80011d4:	d106      	bne.n	80011e4 <_printf_common+0x48>
 80011d6:	f104 0a19 	add.w	sl, r4, #25
 80011da:	68e3      	ldr	r3, [r4, #12]
 80011dc:	6832      	ldr	r2, [r6, #0]
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	42ab      	cmp	r3, r5
 80011e2:	dc26      	bgt.n	8001232 <_printf_common+0x96>
 80011e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011e8:	1e13      	subs	r3, r2, #0
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	bf18      	it	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	0692      	lsls	r2, r2, #26
 80011f2:	d42b      	bmi.n	800124c <_printf_common+0xb0>
 80011f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011f8:	4649      	mov	r1, r9
 80011fa:	4638      	mov	r0, r7
 80011fc:	47c0      	blx	r8
 80011fe:	3001      	adds	r0, #1
 8001200:	d01e      	beq.n	8001240 <_printf_common+0xa4>
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	6922      	ldr	r2, [r4, #16]
 8001206:	f003 0306 	and.w	r3, r3, #6
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf02      	ittt	eq
 800120e:	68e5      	ldreq	r5, [r4, #12]
 8001210:	6833      	ldreq	r3, [r6, #0]
 8001212:	1aed      	subeq	r5, r5, r3
 8001214:	68a3      	ldr	r3, [r4, #8]
 8001216:	bf0c      	ite	eq
 8001218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800121c:	2500      	movne	r5, #0
 800121e:	4293      	cmp	r3, r2
 8001220:	bfc4      	itt	gt
 8001222:	1a9b      	subgt	r3, r3, r2
 8001224:	18ed      	addgt	r5, r5, r3
 8001226:	2600      	movs	r6, #0
 8001228:	341a      	adds	r4, #26
 800122a:	42b5      	cmp	r5, r6
 800122c:	d11a      	bne.n	8001264 <_printf_common+0xc8>
 800122e:	2000      	movs	r0, #0
 8001230:	e008      	b.n	8001244 <_printf_common+0xa8>
 8001232:	2301      	movs	r3, #1
 8001234:	4652      	mov	r2, sl
 8001236:	4649      	mov	r1, r9
 8001238:	4638      	mov	r0, r7
 800123a:	47c0      	blx	r8
 800123c:	3001      	adds	r0, #1
 800123e:	d103      	bne.n	8001248 <_printf_common+0xac>
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001248:	3501      	adds	r5, #1
 800124a:	e7c6      	b.n	80011da <_printf_common+0x3e>
 800124c:	18e1      	adds	r1, r4, r3
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	2030      	movs	r0, #48	; 0x30
 8001252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001256:	4422      	add	r2, r4
 8001258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800125c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001260:	3302      	adds	r3, #2
 8001262:	e7c7      	b.n	80011f4 <_printf_common+0x58>
 8001264:	2301      	movs	r3, #1
 8001266:	4622      	mov	r2, r4
 8001268:	4649      	mov	r1, r9
 800126a:	4638      	mov	r0, r7
 800126c:	47c0      	blx	r8
 800126e:	3001      	adds	r0, #1
 8001270:	d0e6      	beq.n	8001240 <_printf_common+0xa4>
 8001272:	3601      	adds	r6, #1
 8001274:	e7d9      	b.n	800122a <_printf_common+0x8e>
	...

08001278 <_printf_i>:
 8001278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800127c:	7e0f      	ldrb	r7, [r1, #24]
 800127e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001280:	2f78      	cmp	r7, #120	; 0x78
 8001282:	4691      	mov	r9, r2
 8001284:	4680      	mov	r8, r0
 8001286:	460c      	mov	r4, r1
 8001288:	469a      	mov	sl, r3
 800128a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800128e:	d807      	bhi.n	80012a0 <_printf_i+0x28>
 8001290:	2f62      	cmp	r7, #98	; 0x62
 8001292:	d80a      	bhi.n	80012aa <_printf_i+0x32>
 8001294:	2f00      	cmp	r7, #0
 8001296:	f000 80d4 	beq.w	8001442 <_printf_i+0x1ca>
 800129a:	2f58      	cmp	r7, #88	; 0x58
 800129c:	f000 80c0 	beq.w	8001420 <_printf_i+0x1a8>
 80012a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80012a8:	e03a      	b.n	8001320 <_printf_i+0xa8>
 80012aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80012ae:	2b15      	cmp	r3, #21
 80012b0:	d8f6      	bhi.n	80012a0 <_printf_i+0x28>
 80012b2:	a101      	add	r1, pc, #4	; (adr r1, 80012b8 <_printf_i+0x40>)
 80012b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012b8:	08001311 	.word	0x08001311
 80012bc:	08001325 	.word	0x08001325
 80012c0:	080012a1 	.word	0x080012a1
 80012c4:	080012a1 	.word	0x080012a1
 80012c8:	080012a1 	.word	0x080012a1
 80012cc:	080012a1 	.word	0x080012a1
 80012d0:	08001325 	.word	0x08001325
 80012d4:	080012a1 	.word	0x080012a1
 80012d8:	080012a1 	.word	0x080012a1
 80012dc:	080012a1 	.word	0x080012a1
 80012e0:	080012a1 	.word	0x080012a1
 80012e4:	08001429 	.word	0x08001429
 80012e8:	08001351 	.word	0x08001351
 80012ec:	080013e3 	.word	0x080013e3
 80012f0:	080012a1 	.word	0x080012a1
 80012f4:	080012a1 	.word	0x080012a1
 80012f8:	0800144b 	.word	0x0800144b
 80012fc:	080012a1 	.word	0x080012a1
 8001300:	08001351 	.word	0x08001351
 8001304:	080012a1 	.word	0x080012a1
 8001308:	080012a1 	.word	0x080012a1
 800130c:	080013eb 	.word	0x080013eb
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	1d1a      	adds	r2, r3, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	602a      	str	r2, [r5, #0]
 8001318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800131c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001320:	2301      	movs	r3, #1
 8001322:	e09f      	b.n	8001464 <_printf_i+0x1ec>
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	0607      	lsls	r7, r0, #24
 800132a:	f103 0104 	add.w	r1, r3, #4
 800132e:	6029      	str	r1, [r5, #0]
 8001330:	d501      	bpl.n	8001336 <_printf_i+0xbe>
 8001332:	681e      	ldr	r6, [r3, #0]
 8001334:	e003      	b.n	800133e <_printf_i+0xc6>
 8001336:	0646      	lsls	r6, r0, #25
 8001338:	d5fb      	bpl.n	8001332 <_printf_i+0xba>
 800133a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800133e:	2e00      	cmp	r6, #0
 8001340:	da03      	bge.n	800134a <_printf_i+0xd2>
 8001342:	232d      	movs	r3, #45	; 0x2d
 8001344:	4276      	negs	r6, r6
 8001346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800134a:	485a      	ldr	r0, [pc, #360]	; (80014b4 <_printf_i+0x23c>)
 800134c:	230a      	movs	r3, #10
 800134e:	e012      	b.n	8001376 <_printf_i+0xfe>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	1d19      	adds	r1, r3, #4
 8001356:	6029      	str	r1, [r5, #0]
 8001358:	0605      	lsls	r5, r0, #24
 800135a:	d501      	bpl.n	8001360 <_printf_i+0xe8>
 800135c:	681e      	ldr	r6, [r3, #0]
 800135e:	e002      	b.n	8001366 <_printf_i+0xee>
 8001360:	0641      	lsls	r1, r0, #25
 8001362:	d5fb      	bpl.n	800135c <_printf_i+0xe4>
 8001364:	881e      	ldrh	r6, [r3, #0]
 8001366:	4853      	ldr	r0, [pc, #332]	; (80014b4 <_printf_i+0x23c>)
 8001368:	2f6f      	cmp	r7, #111	; 0x6f
 800136a:	bf0c      	ite	eq
 800136c:	2308      	moveq	r3, #8
 800136e:	230a      	movne	r3, #10
 8001370:	2100      	movs	r1, #0
 8001372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001376:	6865      	ldr	r5, [r4, #4]
 8001378:	60a5      	str	r5, [r4, #8]
 800137a:	2d00      	cmp	r5, #0
 800137c:	bfa2      	ittt	ge
 800137e:	6821      	ldrge	r1, [r4, #0]
 8001380:	f021 0104 	bicge.w	r1, r1, #4
 8001384:	6021      	strge	r1, [r4, #0]
 8001386:	b90e      	cbnz	r6, 800138c <_printf_i+0x114>
 8001388:	2d00      	cmp	r5, #0
 800138a:	d04b      	beq.n	8001424 <_printf_i+0x1ac>
 800138c:	4615      	mov	r5, r2
 800138e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001392:	fb03 6711 	mls	r7, r3, r1, r6
 8001396:	5dc7      	ldrb	r7, [r0, r7]
 8001398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800139c:	4637      	mov	r7, r6
 800139e:	42bb      	cmp	r3, r7
 80013a0:	460e      	mov	r6, r1
 80013a2:	d9f4      	bls.n	800138e <_printf_i+0x116>
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d10b      	bne.n	80013c0 <_printf_i+0x148>
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	07de      	lsls	r6, r3, #31
 80013ac:	d508      	bpl.n	80013c0 <_printf_i+0x148>
 80013ae:	6923      	ldr	r3, [r4, #16]
 80013b0:	6861      	ldr	r1, [r4, #4]
 80013b2:	4299      	cmp	r1, r3
 80013b4:	bfde      	ittt	le
 80013b6:	2330      	movle	r3, #48	; 0x30
 80013b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80013c0:	1b52      	subs	r2, r2, r5
 80013c2:	6122      	str	r2, [r4, #16]
 80013c4:	f8cd a000 	str.w	sl, [sp]
 80013c8:	464b      	mov	r3, r9
 80013ca:	aa03      	add	r2, sp, #12
 80013cc:	4621      	mov	r1, r4
 80013ce:	4640      	mov	r0, r8
 80013d0:	f7ff fee4 	bl	800119c <_printf_common>
 80013d4:	3001      	adds	r0, #1
 80013d6:	d14a      	bne.n	800146e <_printf_i+0x1f6>
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	b004      	add	sp, #16
 80013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	4833      	ldr	r0, [pc, #204]	; (80014b8 <_printf_i+0x240>)
 80013ec:	2778      	movs	r7, #120	; 0x78
 80013ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	6829      	ldr	r1, [r5, #0]
 80013f6:	061f      	lsls	r7, r3, #24
 80013f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80013fc:	d402      	bmi.n	8001404 <_printf_i+0x18c>
 80013fe:	065f      	lsls	r7, r3, #25
 8001400:	bf48      	it	mi
 8001402:	b2b6      	uxthmi	r6, r6
 8001404:	07df      	lsls	r7, r3, #31
 8001406:	bf48      	it	mi
 8001408:	f043 0320 	orrmi.w	r3, r3, #32
 800140c:	6029      	str	r1, [r5, #0]
 800140e:	bf48      	it	mi
 8001410:	6023      	strmi	r3, [r4, #0]
 8001412:	b91e      	cbnz	r6, 800141c <_printf_i+0x1a4>
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	f023 0320 	bic.w	r3, r3, #32
 800141a:	6023      	str	r3, [r4, #0]
 800141c:	2310      	movs	r3, #16
 800141e:	e7a7      	b.n	8001370 <_printf_i+0xf8>
 8001420:	4824      	ldr	r0, [pc, #144]	; (80014b4 <_printf_i+0x23c>)
 8001422:	e7e4      	b.n	80013ee <_printf_i+0x176>
 8001424:	4615      	mov	r5, r2
 8001426:	e7bd      	b.n	80013a4 <_printf_i+0x12c>
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	6826      	ldr	r6, [r4, #0]
 800142c:	6961      	ldr	r1, [r4, #20]
 800142e:	1d18      	adds	r0, r3, #4
 8001430:	6028      	str	r0, [r5, #0]
 8001432:	0635      	lsls	r5, r6, #24
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	d501      	bpl.n	800143c <_printf_i+0x1c4>
 8001438:	6019      	str	r1, [r3, #0]
 800143a:	e002      	b.n	8001442 <_printf_i+0x1ca>
 800143c:	0670      	lsls	r0, r6, #25
 800143e:	d5fb      	bpl.n	8001438 <_printf_i+0x1c0>
 8001440:	8019      	strh	r1, [r3, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	6123      	str	r3, [r4, #16]
 8001446:	4615      	mov	r5, r2
 8001448:	e7bc      	b.n	80013c4 <_printf_i+0x14c>
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	1d1a      	adds	r2, r3, #4
 800144e:	602a      	str	r2, [r5, #0]
 8001450:	681d      	ldr	r5, [r3, #0]
 8001452:	6862      	ldr	r2, [r4, #4]
 8001454:	2100      	movs	r1, #0
 8001456:	4628      	mov	r0, r5
 8001458:	f7fe feba 	bl	80001d0 <memchr>
 800145c:	b108      	cbz	r0, 8001462 <_printf_i+0x1ea>
 800145e:	1b40      	subs	r0, r0, r5
 8001460:	6060      	str	r0, [r4, #4]
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	6123      	str	r3, [r4, #16]
 8001466:	2300      	movs	r3, #0
 8001468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800146c:	e7aa      	b.n	80013c4 <_printf_i+0x14c>
 800146e:	6923      	ldr	r3, [r4, #16]
 8001470:	462a      	mov	r2, r5
 8001472:	4649      	mov	r1, r9
 8001474:	4640      	mov	r0, r8
 8001476:	47d0      	blx	sl
 8001478:	3001      	adds	r0, #1
 800147a:	d0ad      	beq.n	80013d8 <_printf_i+0x160>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	079b      	lsls	r3, r3, #30
 8001480:	d413      	bmi.n	80014aa <_printf_i+0x232>
 8001482:	68e0      	ldr	r0, [r4, #12]
 8001484:	9b03      	ldr	r3, [sp, #12]
 8001486:	4298      	cmp	r0, r3
 8001488:	bfb8      	it	lt
 800148a:	4618      	movlt	r0, r3
 800148c:	e7a6      	b.n	80013dc <_printf_i+0x164>
 800148e:	2301      	movs	r3, #1
 8001490:	4632      	mov	r2, r6
 8001492:	4649      	mov	r1, r9
 8001494:	4640      	mov	r0, r8
 8001496:	47d0      	blx	sl
 8001498:	3001      	adds	r0, #1
 800149a:	d09d      	beq.n	80013d8 <_printf_i+0x160>
 800149c:	3501      	adds	r5, #1
 800149e:	68e3      	ldr	r3, [r4, #12]
 80014a0:	9903      	ldr	r1, [sp, #12]
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	42ab      	cmp	r3, r5
 80014a6:	dcf2      	bgt.n	800148e <_printf_i+0x216>
 80014a8:	e7eb      	b.n	8001482 <_printf_i+0x20a>
 80014aa:	2500      	movs	r5, #0
 80014ac:	f104 0619 	add.w	r6, r4, #25
 80014b0:	e7f5      	b.n	800149e <_printf_i+0x226>
 80014b2:	bf00      	nop
 80014b4:	0800189c 	.word	0x0800189c
 80014b8:	080018ad 	.word	0x080018ad

080014bc <__sflush_r>:
 80014bc:	898a      	ldrh	r2, [r1, #12]
 80014be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c2:	4605      	mov	r5, r0
 80014c4:	0710      	lsls	r0, r2, #28
 80014c6:	460c      	mov	r4, r1
 80014c8:	d458      	bmi.n	800157c <__sflush_r+0xc0>
 80014ca:	684b      	ldr	r3, [r1, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dc05      	bgt.n	80014dc <__sflush_r+0x20>
 80014d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dc02      	bgt.n	80014dc <__sflush_r+0x20>
 80014d6:	2000      	movs	r0, #0
 80014d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d0f9      	beq.n	80014d6 <__sflush_r+0x1a>
 80014e2:	2300      	movs	r3, #0
 80014e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014e8:	682f      	ldr	r7, [r5, #0]
 80014ea:	6a21      	ldr	r1, [r4, #32]
 80014ec:	602b      	str	r3, [r5, #0]
 80014ee:	d032      	beq.n	8001556 <__sflush_r+0x9a>
 80014f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014f2:	89a3      	ldrh	r3, [r4, #12]
 80014f4:	075a      	lsls	r2, r3, #29
 80014f6:	d505      	bpl.n	8001504 <__sflush_r+0x48>
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	1ac0      	subs	r0, r0, r3
 80014fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014fe:	b10b      	cbz	r3, 8001504 <__sflush_r+0x48>
 8001500:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001502:	1ac0      	subs	r0, r0, r3
 8001504:	2300      	movs	r3, #0
 8001506:	4602      	mov	r2, r0
 8001508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800150a:	6a21      	ldr	r1, [r4, #32]
 800150c:	4628      	mov	r0, r5
 800150e:	47b0      	blx	r6
 8001510:	1c43      	adds	r3, r0, #1
 8001512:	89a3      	ldrh	r3, [r4, #12]
 8001514:	d106      	bne.n	8001524 <__sflush_r+0x68>
 8001516:	6829      	ldr	r1, [r5, #0]
 8001518:	291d      	cmp	r1, #29
 800151a:	d82b      	bhi.n	8001574 <__sflush_r+0xb8>
 800151c:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <__sflush_r+0x108>)
 800151e:	410a      	asrs	r2, r1
 8001520:	07d6      	lsls	r6, r2, #31
 8001522:	d427      	bmi.n	8001574 <__sflush_r+0xb8>
 8001524:	2200      	movs	r2, #0
 8001526:	6062      	str	r2, [r4, #4]
 8001528:	04d9      	lsls	r1, r3, #19
 800152a:	6922      	ldr	r2, [r4, #16]
 800152c:	6022      	str	r2, [r4, #0]
 800152e:	d504      	bpl.n	800153a <__sflush_r+0x7e>
 8001530:	1c42      	adds	r2, r0, #1
 8001532:	d101      	bne.n	8001538 <__sflush_r+0x7c>
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	b903      	cbnz	r3, 800153a <__sflush_r+0x7e>
 8001538:	6560      	str	r0, [r4, #84]	; 0x54
 800153a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800153c:	602f      	str	r7, [r5, #0]
 800153e:	2900      	cmp	r1, #0
 8001540:	d0c9      	beq.n	80014d6 <__sflush_r+0x1a>
 8001542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001546:	4299      	cmp	r1, r3
 8001548:	d002      	beq.n	8001550 <__sflush_r+0x94>
 800154a:	4628      	mov	r0, r5
 800154c:	f7ff fbea 	bl	8000d24 <_free_r>
 8001550:	2000      	movs	r0, #0
 8001552:	6360      	str	r0, [r4, #52]	; 0x34
 8001554:	e7c0      	b.n	80014d8 <__sflush_r+0x1c>
 8001556:	2301      	movs	r3, #1
 8001558:	4628      	mov	r0, r5
 800155a:	47b0      	blx	r6
 800155c:	1c41      	adds	r1, r0, #1
 800155e:	d1c8      	bne.n	80014f2 <__sflush_r+0x36>
 8001560:	682b      	ldr	r3, [r5, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0c5      	beq.n	80014f2 <__sflush_r+0x36>
 8001566:	2b1d      	cmp	r3, #29
 8001568:	d001      	beq.n	800156e <__sflush_r+0xb2>
 800156a:	2b16      	cmp	r3, #22
 800156c:	d101      	bne.n	8001572 <__sflush_r+0xb6>
 800156e:	602f      	str	r7, [r5, #0]
 8001570:	e7b1      	b.n	80014d6 <__sflush_r+0x1a>
 8001572:	89a3      	ldrh	r3, [r4, #12]
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	81a3      	strh	r3, [r4, #12]
 800157a:	e7ad      	b.n	80014d8 <__sflush_r+0x1c>
 800157c:	690f      	ldr	r7, [r1, #16]
 800157e:	2f00      	cmp	r7, #0
 8001580:	d0a9      	beq.n	80014d6 <__sflush_r+0x1a>
 8001582:	0793      	lsls	r3, r2, #30
 8001584:	680e      	ldr	r6, [r1, #0]
 8001586:	bf08      	it	eq
 8001588:	694b      	ldreq	r3, [r1, #20]
 800158a:	600f      	str	r7, [r1, #0]
 800158c:	bf18      	it	ne
 800158e:	2300      	movne	r3, #0
 8001590:	eba6 0807 	sub.w	r8, r6, r7
 8001594:	608b      	str	r3, [r1, #8]
 8001596:	f1b8 0f00 	cmp.w	r8, #0
 800159a:	dd9c      	ble.n	80014d6 <__sflush_r+0x1a>
 800159c:	6a21      	ldr	r1, [r4, #32]
 800159e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015a0:	4643      	mov	r3, r8
 80015a2:	463a      	mov	r2, r7
 80015a4:	4628      	mov	r0, r5
 80015a6:	47b0      	blx	r6
 80015a8:	2800      	cmp	r0, #0
 80015aa:	dc06      	bgt.n	80015ba <__sflush_r+0xfe>
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b2:	81a3      	strh	r3, [r4, #12]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	e78e      	b.n	80014d8 <__sflush_r+0x1c>
 80015ba:	4407      	add	r7, r0
 80015bc:	eba8 0800 	sub.w	r8, r8, r0
 80015c0:	e7e9      	b.n	8001596 <__sflush_r+0xda>
 80015c2:	bf00      	nop
 80015c4:	dfbffffe 	.word	0xdfbffffe

080015c8 <_fflush_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	690b      	ldr	r3, [r1, #16]
 80015cc:	4605      	mov	r5, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	b913      	cbnz	r3, 80015d8 <_fflush_r+0x10>
 80015d2:	2500      	movs	r5, #0
 80015d4:	4628      	mov	r0, r5
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	b118      	cbz	r0, 80015e2 <_fflush_r+0x1a>
 80015da:	6a03      	ldr	r3, [r0, #32]
 80015dc:	b90b      	cbnz	r3, 80015e2 <_fflush_r+0x1a>
 80015de:	f7ff fa99 	bl	8000b14 <__sinit>
 80015e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f3      	beq.n	80015d2 <_fflush_r+0xa>
 80015ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015ec:	07d0      	lsls	r0, r2, #31
 80015ee:	d404      	bmi.n	80015fa <_fflush_r+0x32>
 80015f0:	0599      	lsls	r1, r3, #22
 80015f2:	d402      	bmi.n	80015fa <_fflush_r+0x32>
 80015f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015f6:	f7ff fb92 	bl	8000d1e <__retarget_lock_acquire_recursive>
 80015fa:	4628      	mov	r0, r5
 80015fc:	4621      	mov	r1, r4
 80015fe:	f7ff ff5d 	bl	80014bc <__sflush_r>
 8001602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001604:	07da      	lsls	r2, r3, #31
 8001606:	4605      	mov	r5, r0
 8001608:	d4e4      	bmi.n	80015d4 <_fflush_r+0xc>
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	059b      	lsls	r3, r3, #22
 800160e:	d4e1      	bmi.n	80015d4 <_fflush_r+0xc>
 8001610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001612:	f7ff fb85 	bl	8000d20 <__retarget_lock_release_recursive>
 8001616:	e7dd      	b.n	80015d4 <_fflush_r+0xc>

08001618 <__swbuf_r>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	460e      	mov	r6, r1
 800161c:	4614      	mov	r4, r2
 800161e:	4605      	mov	r5, r0
 8001620:	b118      	cbz	r0, 800162a <__swbuf_r+0x12>
 8001622:	6a03      	ldr	r3, [r0, #32]
 8001624:	b90b      	cbnz	r3, 800162a <__swbuf_r+0x12>
 8001626:	f7ff fa75 	bl	8000b14 <__sinit>
 800162a:	69a3      	ldr	r3, [r4, #24]
 800162c:	60a3      	str	r3, [r4, #8]
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	071a      	lsls	r2, r3, #28
 8001632:	d525      	bpl.n	8001680 <__swbuf_r+0x68>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	b31b      	cbz	r3, 8001680 <__swbuf_r+0x68>
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	6922      	ldr	r2, [r4, #16]
 800163c:	1a98      	subs	r0, r3, r2
 800163e:	6963      	ldr	r3, [r4, #20]
 8001640:	b2f6      	uxtb	r6, r6
 8001642:	4283      	cmp	r3, r0
 8001644:	4637      	mov	r7, r6
 8001646:	dc04      	bgt.n	8001652 <__swbuf_r+0x3a>
 8001648:	4621      	mov	r1, r4
 800164a:	4628      	mov	r0, r5
 800164c:	f7ff ffbc 	bl	80015c8 <_fflush_r>
 8001650:	b9e0      	cbnz	r0, 800168c <__swbuf_r+0x74>
 8001652:	68a3      	ldr	r3, [r4, #8]
 8001654:	3b01      	subs	r3, #1
 8001656:	60a3      	str	r3, [r4, #8]
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	6022      	str	r2, [r4, #0]
 800165e:	701e      	strb	r6, [r3, #0]
 8001660:	6962      	ldr	r2, [r4, #20]
 8001662:	1c43      	adds	r3, r0, #1
 8001664:	429a      	cmp	r2, r3
 8001666:	d004      	beq.n	8001672 <__swbuf_r+0x5a>
 8001668:	89a3      	ldrh	r3, [r4, #12]
 800166a:	07db      	lsls	r3, r3, #31
 800166c:	d506      	bpl.n	800167c <__swbuf_r+0x64>
 800166e:	2e0a      	cmp	r6, #10
 8001670:	d104      	bne.n	800167c <__swbuf_r+0x64>
 8001672:	4621      	mov	r1, r4
 8001674:	4628      	mov	r0, r5
 8001676:	f7ff ffa7 	bl	80015c8 <_fflush_r>
 800167a:	b938      	cbnz	r0, 800168c <__swbuf_r+0x74>
 800167c:	4638      	mov	r0, r7
 800167e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001680:	4621      	mov	r1, r4
 8001682:	4628      	mov	r0, r5
 8001684:	f000 f806 	bl	8001694 <__swsetup_r>
 8001688:	2800      	cmp	r0, #0
 800168a:	d0d5      	beq.n	8001638 <__swbuf_r+0x20>
 800168c:	f04f 37ff 	mov.w	r7, #4294967295
 8001690:	e7f4      	b.n	800167c <__swbuf_r+0x64>
	...

08001694 <__swsetup_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <__swsetup_r+0xac>)
 8001698:	4605      	mov	r5, r0
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	460c      	mov	r4, r1
 800169e:	b118      	cbz	r0, 80016a8 <__swsetup_r+0x14>
 80016a0:	6a03      	ldr	r3, [r0, #32]
 80016a2:	b90b      	cbnz	r3, 80016a8 <__swsetup_r+0x14>
 80016a4:	f7ff fa36 	bl	8000b14 <__sinit>
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016ae:	0718      	lsls	r0, r3, #28
 80016b0:	d422      	bmi.n	80016f8 <__swsetup_r+0x64>
 80016b2:	06d9      	lsls	r1, r3, #27
 80016b4:	d407      	bmi.n	80016c6 <__swsetup_r+0x32>
 80016b6:	2309      	movs	r3, #9
 80016b8:	602b      	str	r3, [r5, #0]
 80016ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	e034      	b.n	8001730 <__swsetup_r+0x9c>
 80016c6:	0758      	lsls	r0, r3, #29
 80016c8:	d512      	bpl.n	80016f0 <__swsetup_r+0x5c>
 80016ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016cc:	b141      	cbz	r1, 80016e0 <__swsetup_r+0x4c>
 80016ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016d2:	4299      	cmp	r1, r3
 80016d4:	d002      	beq.n	80016dc <__swsetup_r+0x48>
 80016d6:	4628      	mov	r0, r5
 80016d8:	f7ff fb24 	bl	8000d24 <_free_r>
 80016dc:	2300      	movs	r3, #0
 80016de:	6363      	str	r3, [r4, #52]	; 0x34
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016e6:	81a3      	strh	r3, [r4, #12]
 80016e8:	2300      	movs	r3, #0
 80016ea:	6063      	str	r3, [r4, #4]
 80016ec:	6923      	ldr	r3, [r4, #16]
 80016ee:	6023      	str	r3, [r4, #0]
 80016f0:	89a3      	ldrh	r3, [r4, #12]
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	81a3      	strh	r3, [r4, #12]
 80016f8:	6923      	ldr	r3, [r4, #16]
 80016fa:	b94b      	cbnz	r3, 8001710 <__swsetup_r+0x7c>
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001706:	d003      	beq.n	8001710 <__swsetup_r+0x7c>
 8001708:	4621      	mov	r1, r4
 800170a:	4628      	mov	r0, r5
 800170c:	f000 f850 	bl	80017b0 <__smakebuf_r>
 8001710:	89a0      	ldrh	r0, [r4, #12]
 8001712:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001716:	f010 0301 	ands.w	r3, r0, #1
 800171a:	d00a      	beq.n	8001732 <__swsetup_r+0x9e>
 800171c:	2300      	movs	r3, #0
 800171e:	60a3      	str	r3, [r4, #8]
 8001720:	6963      	ldr	r3, [r4, #20]
 8001722:	425b      	negs	r3, r3
 8001724:	61a3      	str	r3, [r4, #24]
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	b943      	cbnz	r3, 800173c <__swsetup_r+0xa8>
 800172a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800172e:	d1c4      	bne.n	80016ba <__swsetup_r+0x26>
 8001730:	bd38      	pop	{r3, r4, r5, pc}
 8001732:	0781      	lsls	r1, r0, #30
 8001734:	bf58      	it	pl
 8001736:	6963      	ldrpl	r3, [r4, #20]
 8001738:	60a3      	str	r3, [r4, #8]
 800173a:	e7f4      	b.n	8001726 <__swsetup_r+0x92>
 800173c:	2000      	movs	r0, #0
 800173e:	e7f7      	b.n	8001730 <__swsetup_r+0x9c>
 8001740:	20000058 	.word	0x20000058

08001744 <_sbrk_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4d06      	ldr	r5, [pc, #24]	; (8001760 <_sbrk_r+0x1c>)
 8001748:	2300      	movs	r3, #0
 800174a:	4604      	mov	r4, r0
 800174c:	4608      	mov	r0, r1
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	f7ff f8ca 	bl	80008e8 <_sbrk>
 8001754:	1c43      	adds	r3, r0, #1
 8001756:	d102      	bne.n	800175e <_sbrk_r+0x1a>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	b103      	cbz	r3, 800175e <_sbrk_r+0x1a>
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	20000238 	.word	0x20000238

08001764 <__swhatbuf_r>:
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	460c      	mov	r4, r1
 8001768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800176c:	2900      	cmp	r1, #0
 800176e:	b096      	sub	sp, #88	; 0x58
 8001770:	4615      	mov	r5, r2
 8001772:	461e      	mov	r6, r3
 8001774:	da0d      	bge.n	8001792 <__swhatbuf_r+0x2e>
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	f013 0f80 	tst.w	r3, #128	; 0x80
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	bf0c      	ite	eq
 8001782:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001786:	2340      	movne	r3, #64	; 0x40
 8001788:	2000      	movs	r0, #0
 800178a:	6031      	str	r1, [r6, #0]
 800178c:	602b      	str	r3, [r5, #0]
 800178e:	b016      	add	sp, #88	; 0x58
 8001790:	bd70      	pop	{r4, r5, r6, pc}
 8001792:	466a      	mov	r2, sp
 8001794:	f000 f848 	bl	8001828 <_fstat_r>
 8001798:	2800      	cmp	r0, #0
 800179a:	dbec      	blt.n	8001776 <__swhatbuf_r+0x12>
 800179c:	9901      	ldr	r1, [sp, #4]
 800179e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80017a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80017a6:	4259      	negs	r1, r3
 80017a8:	4159      	adcs	r1, r3
 80017aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ae:	e7eb      	b.n	8001788 <__swhatbuf_r+0x24>

080017b0 <__smakebuf_r>:
 80017b0:	898b      	ldrh	r3, [r1, #12]
 80017b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017b4:	079d      	lsls	r5, r3, #30
 80017b6:	4606      	mov	r6, r0
 80017b8:	460c      	mov	r4, r1
 80017ba:	d507      	bpl.n	80017cc <__smakebuf_r+0x1c>
 80017bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	6123      	str	r3, [r4, #16]
 80017c4:	2301      	movs	r3, #1
 80017c6:	6163      	str	r3, [r4, #20]
 80017c8:	b002      	add	sp, #8
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	ab01      	add	r3, sp, #4
 80017ce:	466a      	mov	r2, sp
 80017d0:	f7ff ffc8 	bl	8001764 <__swhatbuf_r>
 80017d4:	9900      	ldr	r1, [sp, #0]
 80017d6:	4605      	mov	r5, r0
 80017d8:	4630      	mov	r0, r6
 80017da:	f7ff fb0f 	bl	8000dfc <_malloc_r>
 80017de:	b948      	cbnz	r0, 80017f4 <__smakebuf_r+0x44>
 80017e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e4:	059a      	lsls	r2, r3, #22
 80017e6:	d4ef      	bmi.n	80017c8 <__smakebuf_r+0x18>
 80017e8:	f023 0303 	bic.w	r3, r3, #3
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	81a3      	strh	r3, [r4, #12]
 80017f2:	e7e3      	b.n	80017bc <__smakebuf_r+0xc>
 80017f4:	89a3      	ldrh	r3, [r4, #12]
 80017f6:	6020      	str	r0, [r4, #0]
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	81a3      	strh	r3, [r4, #12]
 80017fe:	9b00      	ldr	r3, [sp, #0]
 8001800:	6163      	str	r3, [r4, #20]
 8001802:	9b01      	ldr	r3, [sp, #4]
 8001804:	6120      	str	r0, [r4, #16]
 8001806:	b15b      	cbz	r3, 8001820 <__smakebuf_r+0x70>
 8001808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800180c:	4630      	mov	r0, r6
 800180e:	f000 f81d 	bl	800184c <_isatty_r>
 8001812:	b128      	cbz	r0, 8001820 <__smakebuf_r+0x70>
 8001814:	89a3      	ldrh	r3, [r4, #12]
 8001816:	f023 0303 	bic.w	r3, r3, #3
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	81a3      	strh	r3, [r4, #12]
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	431d      	orrs	r5, r3
 8001824:	81a5      	strh	r5, [r4, #12]
 8001826:	e7cf      	b.n	80017c8 <__smakebuf_r+0x18>

08001828 <_fstat_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	4d07      	ldr	r5, [pc, #28]	; (8001848 <_fstat_r+0x20>)
 800182c:	2300      	movs	r3, #0
 800182e:	4604      	mov	r4, r0
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	602b      	str	r3, [r5, #0]
 8001836:	f7ff f82e 	bl	8000896 <_fstat>
 800183a:	1c43      	adds	r3, r0, #1
 800183c:	d102      	bne.n	8001844 <_fstat_r+0x1c>
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	b103      	cbz	r3, 8001844 <_fstat_r+0x1c>
 8001842:	6023      	str	r3, [r4, #0]
 8001844:	bd38      	pop	{r3, r4, r5, pc}
 8001846:	bf00      	nop
 8001848:	20000238 	.word	0x20000238

0800184c <_isatty_r>:
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	4d06      	ldr	r5, [pc, #24]	; (8001868 <_isatty_r+0x1c>)
 8001850:	2300      	movs	r3, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	602b      	str	r3, [r5, #0]
 8001858:	f7ff f82d 	bl	80008b6 <_isatty>
 800185c:	1c43      	adds	r3, r0, #1
 800185e:	d102      	bne.n	8001866 <_isatty_r+0x1a>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	b103      	cbz	r3, 8001866 <_isatty_r+0x1a>
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	bd38      	pop	{r3, r4, r5, pc}
 8001868:	20000238 	.word	0x20000238

0800186c <_init>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr

08001878 <_fini>:
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187a:	bf00      	nop
 800187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187e:	bc08      	pop	{r3}
 8001880:	469e      	mov	lr, r3
 8001882:	4770      	bx	lr
