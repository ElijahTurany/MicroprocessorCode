
Lab5UARTPart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001568  08001568  00011568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b0  080015b0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080015b0  080015b0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b0  080015b0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b0  080015b0  000115b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015b4  080015b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080015b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000174  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000154c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000723  00000000  00000000  0002161b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b8  00000000  00000000  00021d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000128  00000000  00000000  00021ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e098  00000000  00000000  00022020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000027e9  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a3f2b  00000000  00000000  000428a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000cac  00000000  00000000  000e67cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000e7478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001550 	.word	0x08001550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001550 	.word	0x08001550

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <fpu_enable>:
#include "stm32l476xx.h"



void fpu_enable(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	/*Enable floating point unit: Enable CP10 and CP11 for full access*/
	SCB->CPACR |=(1<20);
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <fpu_enable+0x50>)
 8000276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <fpu_enable+0x50>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<21);
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <fpu_enable+0x50>)
 8000286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <fpu_enable+0x50>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<22);
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <fpu_enable+0x50>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <fpu_enable+0x50>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<23);
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <fpu_enable+0x50>)
 80002a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <fpu_enable+0x50>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <main>:
#define PIN5		(1U<<5)
#define LED_PIN		PIN5


int main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 80002c8:	f7ff ffd2 	bl	8000270 <fpu_enable>

    /*initialize UART*/
	debug_uart_init();
 80002cc:	f000 f948 	bl	8000560 <debug_uart_init>
	timebase_init();
 80002d0:	f000 f910 	bl	80004f4 <timebase_init>
	RCC->AHB2ENR |= GPIOAEN;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <main+0x5c>)
 80002d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <main+0x5c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA-> MODER |= (1U<<10);
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOA-> MODER &= ~(1U<<11);
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002fe:	6013      	str	r3, [r2, #0]
	while(1)
	{
      printf("A second  passed!\n\r");
 8000300:	4808      	ldr	r0, [pc, #32]	; (8000324 <main+0x60>)
 8000302:	f000 faaf 	bl	8000864 <iprintf>
      GPIOA->ODR ^=LED_PIN;
 8000306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000310:	f083 0320 	eor.w	r3, r3, #32
 8000314:	6153      	str	r3, [r2, #20]
      delay(1);
 8000316:	2001      	movs	r0, #1
 8000318:	f000 f8aa 	bl	8000470 <delay>
	{
 800031c:	e7f0      	b.n	8000300 <main+0x3c>
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	08001568 	.word	0x08001568

08000328 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	e00a      	b.n	8000350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800033a:	f3af 8000 	nop.w
 800033e:	4601      	mov	r1, r0
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60ba      	str	r2, [r7, #8]
 8000346:	b2ca      	uxtb	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf0      	blt.n	800033a <_read+0x12>
  }

  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b086      	sub	sp, #24
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
 8000372:	e009      	b.n	8000388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f8e3 	bl	8000548 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	3301      	adds	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	429a      	cmp	r2, r3
 800038e:	dbf1      	blt.n	8000374 <_write+0x12>
  }
  return len;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <_close>:

int _close(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c2:	605a      	str	r2, [r3, #4]
  return 0;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_isatty>:

int _isatty(int file)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003da:	2301      	movs	r3, #1
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003f4:	2300      	movs	r3, #0
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f000 faba 	bl	80009ac <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20018000 	.word	0x20018000
 8000464:	00000400 	.word	0x00000400
 8000468:	20000078 	.word	0x20000078
 800046c:	200001d0 	.word	0x200001d0

08000470 <delay>:
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq = 1;

/* delay in second*/
void delay(uint32_t delay)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 8000478:	f000 f818 	bl	80004ac <get_tick>
 800047c:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000488:	d002      	beq.n	8000490 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3301      	adds	r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
	}
	while((get_tick() - tickstart) < wait){} /*loop stuck here when true*/
 8000490:	bf00      	nop
 8000492:	f000 f80b 	bl	80004ac <get_tick>
 8000496:	4602      	mov	r2, r0
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	1ad3      	subs	r3, r2, r3
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d8f7      	bhi.n	8000492 <delay+0x22>
}
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <get_tick>:


uint32_t get_tick(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <get_tick+0x24>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <get_tick+0x28>)
 80004ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004bc:	b662      	cpsie	i
}
 80004be:	bf00      	nop
	__enable_irq();
	return g_curr_tick_p;
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <get_tick+0x28>)
 80004c2:	681b      	ldr	r3, [r3, #0]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	2000007c 	.word	0x2000007c
 80004d4:	20000080 	.word	0x20000080

080004d8 <tick_increment>:

static void tick_increment(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <tick_increment+0x18>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a03      	ldr	r2, [pc, #12]	; (80004f0 <tick_increment+0x18>)
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	2000007c 	.word	0x2000007c

080004f4 <timebase_init>:

void timebase_init(void){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop

    /* Disable a global interrupt */
	__disable_irq();

	/*load a value according to the clock cycle as we need a second tick from the clock*/
	SysTick->LOAD = ONE_SEC_LOAD-1; /*(count from zero from the system clock)*/
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <timebase_init+0x40>)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <timebase_init+0x44>)
 8000500:	605a      	str	r2, [r3, #4]

	  /*Clear systick current value register */
	SysTick ->VAL = 0;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <timebase_init+0x40>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
	/*Select an Internal clock source */
	SysTick ->CTRL = CTRL_CLCKSRC;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <timebase_init+0x40>)
 800050a:	2204      	movs	r2, #4
 800050c:	601a      	str	r2, [r3, #0]

	/*Enable an Interrupt */
	SysTick->CTRL |=CTRL_TICKINT;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <timebase_init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <timebase_init+0x40>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	6013      	str	r3, [r2, #0]

	/*Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <timebase_init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a05      	ldr	r2, [pc, #20]	; (8000534 <timebase_init+0x40>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000526:	b662      	cpsie	i
}
 8000528:	bf00      	nop

	/* Enable a global interrupt */
	__enable_irq();

}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000e010 	.word	0xe000e010
 8000538:	003d08ff 	.word	0x003d08ff

0800053c <SysTick_Handler>:

void SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	tick_increment();
 8000540:	f7ff ffca 	bl	80004d8 <tick_increment>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <__io_putchar>:
//#define TX_PIN 2
//#define RX_PIN 3



int __io_putchar(int ch){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f859 	bl	8000608 <uart_write>
	//uart2_write(USART2, ch);
	return ch;
 8000556:	687b      	ldr	r3, [r7, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <debug_uart_init>:

void debug_uart_init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=GPIOAEN;   //typo here
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <debug_uart_init+0x9c>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000568:	4a24      	ldr	r2, [pc, #144]	; (80005fc <debug_uart_init+0x9c>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set the mode of PA2 (USART2_TX) to AF mode*/
	GPIOA->MODER &= ~(1U<<4);    //typo here
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057a:	f023 0310 	bic.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);    //typo here
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6013      	str	r3, [r2, #0]

	/*Set AF type to AF7(UART2_TX)*/
    GPIOA->AFR[0] |=(1U<<8);  //typo here
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	6a1b      	ldr	r3, [r3, #32]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<9);  //typo here
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a4:	6a1b      	ldr	r3, [r3, #32]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<10);  //typo here
 80005b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005be:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<11);  //typo here
 80005c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c4:	6a1b      	ldr	r3, [r3, #32]
 80005c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005ce:	6213      	str	r3, [r2, #32]
//        GPIOA->AFR[0] |=(1U<<12);  //typo here
//        GPIOA->AFR[0] |=(1U<<13);  //typo here
//        GPIOA->AFR[0] |=(1U<<14);  //typo here
//        GPIOA->AFR[0] &= ~(1U<<15);  //typo here
    /*Enable clock access to UART2EN in APB1ENR*/
    RCC->APB1ENR1 |=	UART2EN;   //typo here
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <debug_uart_init+0x9c>)
 80005d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d4:	4a09      	ldr	r2, [pc, #36]	; (80005fc <debug_uart_init+0x9c>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	6593      	str	r3, [r2, #88]	; 0x58
    //RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock

	/*Configure UART baud rate */
    uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 80005dc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <debug_uart_init+0xa0>)
 80005e2:	f000 f83f 	bl	8000664 <uart_set_baudrate>

	/*Configure transfer direction  (Transmit Enable) */
    USART2->CR1 = CR1_TE; //| CR1_RE/* bit 3*/
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <debug_uart_init+0xa4>)
 80005e8:	2208      	movs	r2, #8
 80005ea:	601a      	str	r2, [r3, #0]

	/*Enable UART Module (USART Enable)*/
    USART2->CR1 |= CR1_UE; /*bit 0*/
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <debug_uart_init+0xa4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <debug_uart_init+0xa4>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	003d0900 	.word	0x003d0900
 8000604:	40004400 	.word	0x40004400

08000608 <uart_write>:

static void uart_write(int ch){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	/*make sure transmitter data register is empty*/
		while(!(USART2->ISR & ISR_TXE)){}  //typo here
 8000610:	bf00      	nop
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <uart_write+0x30>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <uart_write+0xa>
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);   //typo here
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <uart_write+0x30>)
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	b292      	uxth	r2, r2
 8000628:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40004400 	.word	0x40004400

0800063c <compute_uart_bd>:
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);   //typo here
}

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	085a      	lsrs	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	USART2-> BRR = compute_uart_bd(periph_clk,baudrate);
 800066e:	6839      	ldr	r1, [r7, #0]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ffe3 	bl	800063c <compute_uart_bd>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <uart_set_baudrate+0x24>)
 800067c:	60da      	str	r2, [r3, #12]
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40004400 	.word	0x40004400

0800068c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000690:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490d      	ldr	r1, [pc, #52]	; (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0a      	ldr	r4, [pc, #40]	; (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ba:	f000 f97d 	bl	80009b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fe01 	bl	80002c4 <main>

080006c2 <LoopForever>:

LoopForever:
  b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   r0, =_estack
 80006c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006d0:	080015b8 	.word	0x080015b8
  ldr r2, =_sbss
 80006d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006d8:	200001d0 	.word	0x200001d0

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>
	...

080006e0 <std>:
 80006e0:	2300      	movs	r3, #0
 80006e2:	b510      	push	{r4, lr}
 80006e4:	4604      	mov	r4, r0
 80006e6:	e9c0 3300 	strd	r3, r3, [r0]
 80006ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ee:	6083      	str	r3, [r0, #8]
 80006f0:	8181      	strh	r1, [r0, #12]
 80006f2:	6643      	str	r3, [r0, #100]	; 0x64
 80006f4:	81c2      	strh	r2, [r0, #14]
 80006f6:	6183      	str	r3, [r0, #24]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2208      	movs	r2, #8
 80006fc:	305c      	adds	r0, #92	; 0x5c
 80006fe:	f000 f906 	bl	800090e <memset>
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <std+0x58>)
 8000704:	6263      	str	r3, [r4, #36]	; 0x24
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <std+0x5c>)
 8000708:	62a3      	str	r3, [r4, #40]	; 0x28
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <std+0x60>)
 800070c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <std+0x64>)
 8000710:	6323      	str	r3, [r4, #48]	; 0x30
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <std+0x68>)
 8000714:	6224      	str	r4, [r4, #32]
 8000716:	429c      	cmp	r4, r3
 8000718:	d006      	beq.n	8000728 <std+0x48>
 800071a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800071e:	4294      	cmp	r4, r2
 8000720:	d002      	beq.n	8000728 <std+0x48>
 8000722:	33d0      	adds	r3, #208	; 0xd0
 8000724:	429c      	cmp	r4, r3
 8000726:	d105      	bne.n	8000734 <std+0x54>
 8000728:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000730:	f000 b966 	b.w	8000a00 <__retarget_lock_init_recursive>
 8000734:	bd10      	pop	{r4, pc}
 8000736:	bf00      	nop
 8000738:	08000889 	.word	0x08000889
 800073c:	080008ab 	.word	0x080008ab
 8000740:	080008e3 	.word	0x080008e3
 8000744:	08000907 	.word	0x08000907
 8000748:	20000084 	.word	0x20000084

0800074c <stdio_exit_handler>:
 800074c:	4a02      	ldr	r2, [pc, #8]	; (8000758 <stdio_exit_handler+0xc>)
 800074e:	4903      	ldr	r1, [pc, #12]	; (800075c <stdio_exit_handler+0x10>)
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <stdio_exit_handler+0x14>)
 8000752:	f000 b869 	b.w	8000828 <_fwalk_sglue>
 8000756:	bf00      	nop
 8000758:	20000000 	.word	0x20000000
 800075c:	080012ad 	.word	0x080012ad
 8000760:	2000000c 	.word	0x2000000c

08000764 <cleanup_stdio>:
 8000764:	6841      	ldr	r1, [r0, #4]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <cleanup_stdio+0x34>)
 8000768:	4299      	cmp	r1, r3
 800076a:	b510      	push	{r4, lr}
 800076c:	4604      	mov	r4, r0
 800076e:	d001      	beq.n	8000774 <cleanup_stdio+0x10>
 8000770:	f000 fd9c 	bl	80012ac <_fflush_r>
 8000774:	68a1      	ldr	r1, [r4, #8]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <cleanup_stdio+0x38>)
 8000778:	4299      	cmp	r1, r3
 800077a:	d002      	beq.n	8000782 <cleanup_stdio+0x1e>
 800077c:	4620      	mov	r0, r4
 800077e:	f000 fd95 	bl	80012ac <_fflush_r>
 8000782:	68e1      	ldr	r1, [r4, #12]
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <cleanup_stdio+0x3c>)
 8000786:	4299      	cmp	r1, r3
 8000788:	d004      	beq.n	8000794 <cleanup_stdio+0x30>
 800078a:	4620      	mov	r0, r4
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	f000 bd8c 	b.w	80012ac <_fflush_r>
 8000794:	bd10      	pop	{r4, pc}
 8000796:	bf00      	nop
 8000798:	20000084 	.word	0x20000084
 800079c:	200000ec 	.word	0x200000ec
 80007a0:	20000154 	.word	0x20000154

080007a4 <global_stdio_init.part.0>:
 80007a4:	b510      	push	{r4, lr}
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <global_stdio_init.part.0+0x30>)
 80007a8:	4c0b      	ldr	r4, [pc, #44]	; (80007d8 <global_stdio_init.part.0+0x34>)
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <global_stdio_init.part.0+0x38>)
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	4620      	mov	r0, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	2104      	movs	r1, #4
 80007b4:	f7ff ff94 	bl	80006e0 <std>
 80007b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007bc:	2201      	movs	r2, #1
 80007be:	2109      	movs	r1, #9
 80007c0:	f7ff ff8e 	bl	80006e0 <std>
 80007c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007c8:	2202      	movs	r2, #2
 80007ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ce:	2112      	movs	r1, #18
 80007d0:	f7ff bf86 	b.w	80006e0 <std>
 80007d4:	200001bc 	.word	0x200001bc
 80007d8:	20000084 	.word	0x20000084
 80007dc:	0800074d 	.word	0x0800074d

080007e0 <__sfp_lock_acquire>:
 80007e0:	4801      	ldr	r0, [pc, #4]	; (80007e8 <__sfp_lock_acquire+0x8>)
 80007e2:	f000 b90e 	b.w	8000a02 <__retarget_lock_acquire_recursive>
 80007e6:	bf00      	nop
 80007e8:	200001c5 	.word	0x200001c5

080007ec <__sfp_lock_release>:
 80007ec:	4801      	ldr	r0, [pc, #4]	; (80007f4 <__sfp_lock_release+0x8>)
 80007ee:	f000 b909 	b.w	8000a04 <__retarget_lock_release_recursive>
 80007f2:	bf00      	nop
 80007f4:	200001c5 	.word	0x200001c5

080007f8 <__sinit>:
 80007f8:	b510      	push	{r4, lr}
 80007fa:	4604      	mov	r4, r0
 80007fc:	f7ff fff0 	bl	80007e0 <__sfp_lock_acquire>
 8000800:	6a23      	ldr	r3, [r4, #32]
 8000802:	b11b      	cbz	r3, 800080c <__sinit+0x14>
 8000804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000808:	f7ff bff0 	b.w	80007ec <__sfp_lock_release>
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <__sinit+0x28>)
 800080e:	6223      	str	r3, [r4, #32]
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__sinit+0x2c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f5      	bne.n	8000804 <__sinit+0xc>
 8000818:	f7ff ffc4 	bl	80007a4 <global_stdio_init.part.0>
 800081c:	e7f2      	b.n	8000804 <__sinit+0xc>
 800081e:	bf00      	nop
 8000820:	08000765 	.word	0x08000765
 8000824:	200001bc 	.word	0x200001bc

08000828 <_fwalk_sglue>:
 8000828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800082c:	4607      	mov	r7, r0
 800082e:	4688      	mov	r8, r1
 8000830:	4614      	mov	r4, r2
 8000832:	2600      	movs	r6, #0
 8000834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000838:	f1b9 0901 	subs.w	r9, r9, #1
 800083c:	d505      	bpl.n	800084a <_fwalk_sglue+0x22>
 800083e:	6824      	ldr	r4, [r4, #0]
 8000840:	2c00      	cmp	r4, #0
 8000842:	d1f7      	bne.n	8000834 <_fwalk_sglue+0xc>
 8000844:	4630      	mov	r0, r6
 8000846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800084a:	89ab      	ldrh	r3, [r5, #12]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d907      	bls.n	8000860 <_fwalk_sglue+0x38>
 8000850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000854:	3301      	adds	r3, #1
 8000856:	d003      	beq.n	8000860 <_fwalk_sglue+0x38>
 8000858:	4629      	mov	r1, r5
 800085a:	4638      	mov	r0, r7
 800085c:	47c0      	blx	r8
 800085e:	4306      	orrs	r6, r0
 8000860:	3568      	adds	r5, #104	; 0x68
 8000862:	e7e9      	b.n	8000838 <_fwalk_sglue+0x10>

08000864 <iprintf>:
 8000864:	b40f      	push	{r0, r1, r2, r3}
 8000866:	b507      	push	{r0, r1, r2, lr}
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <iprintf+0x20>)
 800086a:	ab04      	add	r3, sp, #16
 800086c:	6808      	ldr	r0, [r1, #0]
 800086e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000872:	6881      	ldr	r1, [r0, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	f000 f9e9 	bl	8000c4c <_vfiprintf_r>
 800087a:	b003      	add	sp, #12
 800087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr
 8000884:	20000058 	.word	0x20000058

08000888 <__sread>:
 8000888:	b510      	push	{r4, lr}
 800088a:	460c      	mov	r4, r1
 800088c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000890:	f000 f868 	bl	8000964 <_read_r>
 8000894:	2800      	cmp	r0, #0
 8000896:	bfab      	itete	ge
 8000898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800089a:	89a3      	ldrhlt	r3, [r4, #12]
 800089c:	181b      	addge	r3, r3, r0
 800089e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008a2:	bfac      	ite	ge
 80008a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80008a6:	81a3      	strhlt	r3, [r4, #12]
 80008a8:	bd10      	pop	{r4, pc}

080008aa <__swrite>:
 80008aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ae:	461f      	mov	r7, r3
 80008b0:	898b      	ldrh	r3, [r1, #12]
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	4605      	mov	r5, r0
 80008b6:	460c      	mov	r4, r1
 80008b8:	4616      	mov	r6, r2
 80008ba:	d505      	bpl.n	80008c8 <__swrite+0x1e>
 80008bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c0:	2302      	movs	r3, #2
 80008c2:	2200      	movs	r2, #0
 80008c4:	f000 f83c 	bl	8000940 <_lseek_r>
 80008c8:	89a3      	ldrh	r3, [r4, #12]
 80008ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008d2:	81a3      	strh	r3, [r4, #12]
 80008d4:	4632      	mov	r2, r6
 80008d6:	463b      	mov	r3, r7
 80008d8:	4628      	mov	r0, r5
 80008da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008de:	f000 b853 	b.w	8000988 <_write_r>

080008e2 <__sseek>:
 80008e2:	b510      	push	{r4, lr}
 80008e4:	460c      	mov	r4, r1
 80008e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ea:	f000 f829 	bl	8000940 <_lseek_r>
 80008ee:	1c43      	adds	r3, r0, #1
 80008f0:	89a3      	ldrh	r3, [r4, #12]
 80008f2:	bf15      	itete	ne
 80008f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80008f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008fe:	81a3      	strheq	r3, [r4, #12]
 8000900:	bf18      	it	ne
 8000902:	81a3      	strhne	r3, [r4, #12]
 8000904:	bd10      	pop	{r4, pc}

08000906 <__sclose>:
 8000906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800090a:	f000 b809 	b.w	8000920 <_close_r>

0800090e <memset>:
 800090e:	4402      	add	r2, r0
 8000910:	4603      	mov	r3, r0
 8000912:	4293      	cmp	r3, r2
 8000914:	d100      	bne.n	8000918 <memset+0xa>
 8000916:	4770      	bx	lr
 8000918:	f803 1b01 	strb.w	r1, [r3], #1
 800091c:	e7f9      	b.n	8000912 <memset+0x4>
	...

08000920 <_close_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4d06      	ldr	r5, [pc, #24]	; (800093c <_close_r+0x1c>)
 8000924:	2300      	movs	r3, #0
 8000926:	4604      	mov	r4, r0
 8000928:	4608      	mov	r0, r1
 800092a:	602b      	str	r3, [r5, #0]
 800092c:	f7ff fd35 	bl	800039a <_close>
 8000930:	1c43      	adds	r3, r0, #1
 8000932:	d102      	bne.n	800093a <_close_r+0x1a>
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	b103      	cbz	r3, 800093a <_close_r+0x1a>
 8000938:	6023      	str	r3, [r4, #0]
 800093a:	bd38      	pop	{r3, r4, r5, pc}
 800093c:	200001c0 	.word	0x200001c0

08000940 <_lseek_r>:
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4d07      	ldr	r5, [pc, #28]	; (8000960 <_lseek_r+0x20>)
 8000944:	4604      	mov	r4, r0
 8000946:	4608      	mov	r0, r1
 8000948:	4611      	mov	r1, r2
 800094a:	2200      	movs	r2, #0
 800094c:	602a      	str	r2, [r5, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	f7ff fd4a 	bl	80003e8 <_lseek>
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	d102      	bne.n	800095e <_lseek_r+0x1e>
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	b103      	cbz	r3, 800095e <_lseek_r+0x1e>
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	bd38      	pop	{r3, r4, r5, pc}
 8000960:	200001c0 	.word	0x200001c0

08000964 <_read_r>:
 8000964:	b538      	push	{r3, r4, r5, lr}
 8000966:	4d07      	ldr	r5, [pc, #28]	; (8000984 <_read_r+0x20>)
 8000968:	4604      	mov	r4, r0
 800096a:	4608      	mov	r0, r1
 800096c:	4611      	mov	r1, r2
 800096e:	2200      	movs	r2, #0
 8000970:	602a      	str	r2, [r5, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	f7ff fcd8 	bl	8000328 <_read>
 8000978:	1c43      	adds	r3, r0, #1
 800097a:	d102      	bne.n	8000982 <_read_r+0x1e>
 800097c:	682b      	ldr	r3, [r5, #0]
 800097e:	b103      	cbz	r3, 8000982 <_read_r+0x1e>
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	bd38      	pop	{r3, r4, r5, pc}
 8000984:	200001c0 	.word	0x200001c0

08000988 <_write_r>:
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4d07      	ldr	r5, [pc, #28]	; (80009a8 <_write_r+0x20>)
 800098c:	4604      	mov	r4, r0
 800098e:	4608      	mov	r0, r1
 8000990:	4611      	mov	r1, r2
 8000992:	2200      	movs	r2, #0
 8000994:	602a      	str	r2, [r5, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	f7ff fce3 	bl	8000362 <_write>
 800099c:	1c43      	adds	r3, r0, #1
 800099e:	d102      	bne.n	80009a6 <_write_r+0x1e>
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	b103      	cbz	r3, 80009a6 <_write_r+0x1e>
 80009a4:	6023      	str	r3, [r4, #0]
 80009a6:	bd38      	pop	{r3, r4, r5, pc}
 80009a8:	200001c0 	.word	0x200001c0

080009ac <__errno>:
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <__errno+0x8>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000058 	.word	0x20000058

080009b8 <__libc_init_array>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	4d0d      	ldr	r5, [pc, #52]	; (80009f0 <__libc_init_array+0x38>)
 80009bc:	4c0d      	ldr	r4, [pc, #52]	; (80009f4 <__libc_init_array+0x3c>)
 80009be:	1b64      	subs	r4, r4, r5
 80009c0:	10a4      	asrs	r4, r4, #2
 80009c2:	2600      	movs	r6, #0
 80009c4:	42a6      	cmp	r6, r4
 80009c6:	d109      	bne.n	80009dc <__libc_init_array+0x24>
 80009c8:	4d0b      	ldr	r5, [pc, #44]	; (80009f8 <__libc_init_array+0x40>)
 80009ca:	4c0c      	ldr	r4, [pc, #48]	; (80009fc <__libc_init_array+0x44>)
 80009cc:	f000 fdc0 	bl	8001550 <_init>
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	10a4      	asrs	r4, r4, #2
 80009d4:	2600      	movs	r6, #0
 80009d6:	42a6      	cmp	r6, r4
 80009d8:	d105      	bne.n	80009e6 <__libc_init_array+0x2e>
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e0:	4798      	blx	r3
 80009e2:	3601      	adds	r6, #1
 80009e4:	e7ee      	b.n	80009c4 <__libc_init_array+0xc>
 80009e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ea:	4798      	blx	r3
 80009ec:	3601      	adds	r6, #1
 80009ee:	e7f2      	b.n	80009d6 <__libc_init_array+0x1e>
 80009f0:	080015b0 	.word	0x080015b0
 80009f4:	080015b0 	.word	0x080015b0
 80009f8:	080015b0 	.word	0x080015b0
 80009fc:	080015b4 	.word	0x080015b4

08000a00 <__retarget_lock_init_recursive>:
 8000a00:	4770      	bx	lr

08000a02 <__retarget_lock_acquire_recursive>:
 8000a02:	4770      	bx	lr

08000a04 <__retarget_lock_release_recursive>:
 8000a04:	4770      	bx	lr
	...

08000a08 <_free_r>:
 8000a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d044      	beq.n	8000a98 <_free_r+0x90>
 8000a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a12:	9001      	str	r0, [sp, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f1a1 0404 	sub.w	r4, r1, #4
 8000a1a:	bfb8      	it	lt
 8000a1c:	18e4      	addlt	r4, r4, r3
 8000a1e:	f000 f8df 	bl	8000be0 <__malloc_lock>
 8000a22:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <_free_r+0x94>)
 8000a24:	9801      	ldr	r0, [sp, #4]
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	b933      	cbnz	r3, 8000a38 <_free_r+0x30>
 8000a2a:	6063      	str	r3, [r4, #4]
 8000a2c:	6014      	str	r4, [r2, #0]
 8000a2e:	b003      	add	sp, #12
 8000a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a34:	f000 b8da 	b.w	8000bec <__malloc_unlock>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <_free_r+0x46>
 8000a3c:	6825      	ldr	r5, [r4, #0]
 8000a3e:	1961      	adds	r1, r4, r5
 8000a40:	428b      	cmp	r3, r1
 8000a42:	bf01      	itttt	eq
 8000a44:	6819      	ldreq	r1, [r3, #0]
 8000a46:	685b      	ldreq	r3, [r3, #4]
 8000a48:	1949      	addeq	r1, r1, r5
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	e7ed      	b.n	8000a2a <_free_r+0x22>
 8000a4e:	461a      	mov	r2, r3
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	b10b      	cbz	r3, 8000a58 <_free_r+0x50>
 8000a54:	42a3      	cmp	r3, r4
 8000a56:	d9fa      	bls.n	8000a4e <_free_r+0x46>
 8000a58:	6811      	ldr	r1, [r2, #0]
 8000a5a:	1855      	adds	r5, r2, r1
 8000a5c:	42a5      	cmp	r5, r4
 8000a5e:	d10b      	bne.n	8000a78 <_free_r+0x70>
 8000a60:	6824      	ldr	r4, [r4, #0]
 8000a62:	4421      	add	r1, r4
 8000a64:	1854      	adds	r4, r2, r1
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	6011      	str	r1, [r2, #0]
 8000a6a:	d1e0      	bne.n	8000a2e <_free_r+0x26>
 8000a6c:	681c      	ldr	r4, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	6053      	str	r3, [r2, #4]
 8000a72:	440c      	add	r4, r1
 8000a74:	6014      	str	r4, [r2, #0]
 8000a76:	e7da      	b.n	8000a2e <_free_r+0x26>
 8000a78:	d902      	bls.n	8000a80 <_free_r+0x78>
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	6003      	str	r3, [r0, #0]
 8000a7e:	e7d6      	b.n	8000a2e <_free_r+0x26>
 8000a80:	6825      	ldr	r5, [r4, #0]
 8000a82:	1961      	adds	r1, r4, r5
 8000a84:	428b      	cmp	r3, r1
 8000a86:	bf04      	itt	eq
 8000a88:	6819      	ldreq	r1, [r3, #0]
 8000a8a:	685b      	ldreq	r3, [r3, #4]
 8000a8c:	6063      	str	r3, [r4, #4]
 8000a8e:	bf04      	itt	eq
 8000a90:	1949      	addeq	r1, r1, r5
 8000a92:	6021      	streq	r1, [r4, #0]
 8000a94:	6054      	str	r4, [r2, #4]
 8000a96:	e7ca      	b.n	8000a2e <_free_r+0x26>
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd30      	pop	{r4, r5, pc}
 8000a9c:	200001c8 	.word	0x200001c8

08000aa0 <sbrk_aligned>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4e0e      	ldr	r6, [pc, #56]	; (8000adc <sbrk_aligned+0x3c>)
 8000aa4:	460c      	mov	r4, r1
 8000aa6:	6831      	ldr	r1, [r6, #0]
 8000aa8:	4605      	mov	r5, r0
 8000aaa:	b911      	cbnz	r1, 8000ab2 <sbrk_aligned+0x12>
 8000aac:	f000 fcbc 	bl	8001428 <_sbrk_r>
 8000ab0:	6030      	str	r0, [r6, #0]
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f000 fcb7 	bl	8001428 <_sbrk_r>
 8000aba:	1c43      	adds	r3, r0, #1
 8000abc:	d00a      	beq.n	8000ad4 <sbrk_aligned+0x34>
 8000abe:	1cc4      	adds	r4, r0, #3
 8000ac0:	f024 0403 	bic.w	r4, r4, #3
 8000ac4:	42a0      	cmp	r0, r4
 8000ac6:	d007      	beq.n	8000ad8 <sbrk_aligned+0x38>
 8000ac8:	1a21      	subs	r1, r4, r0
 8000aca:	4628      	mov	r0, r5
 8000acc:	f000 fcac 	bl	8001428 <_sbrk_r>
 8000ad0:	3001      	adds	r0, #1
 8000ad2:	d101      	bne.n	8000ad8 <sbrk_aligned+0x38>
 8000ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8000ad8:	4620      	mov	r0, r4
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	200001cc 	.word	0x200001cc

08000ae0 <_malloc_r>:
 8000ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae4:	1ccd      	adds	r5, r1, #3
 8000ae6:	f025 0503 	bic.w	r5, r5, #3
 8000aea:	3508      	adds	r5, #8
 8000aec:	2d0c      	cmp	r5, #12
 8000aee:	bf38      	it	cc
 8000af0:	250c      	movcc	r5, #12
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	4607      	mov	r7, r0
 8000af6:	db01      	blt.n	8000afc <_malloc_r+0x1c>
 8000af8:	42a9      	cmp	r1, r5
 8000afa:	d905      	bls.n	8000b08 <_malloc_r+0x28>
 8000afc:	230c      	movs	r3, #12
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	2600      	movs	r6, #0
 8000b02:	4630      	mov	r0, r6
 8000b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000bdc <_malloc_r+0xfc>
 8000b0c:	f000 f868 	bl	8000be0 <__malloc_lock>
 8000b10:	f8d8 3000 	ldr.w	r3, [r8]
 8000b14:	461c      	mov	r4, r3
 8000b16:	bb5c      	cbnz	r4, 8000b70 <_malloc_r+0x90>
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	f7ff ffc0 	bl	8000aa0 <sbrk_aligned>
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	4604      	mov	r4, r0
 8000b24:	d155      	bne.n	8000bd2 <_malloc_r+0xf2>
 8000b26:	f8d8 4000 	ldr.w	r4, [r8]
 8000b2a:	4626      	mov	r6, r4
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d145      	bne.n	8000bbc <_malloc_r+0xdc>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d048      	beq.n	8000bc6 <_malloc_r+0xe6>
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	4631      	mov	r1, r6
 8000b38:	4638      	mov	r0, r7
 8000b3a:	eb04 0903 	add.w	r9, r4, r3
 8000b3e:	f000 fc73 	bl	8001428 <_sbrk_r>
 8000b42:	4581      	cmp	r9, r0
 8000b44:	d13f      	bne.n	8000bc6 <_malloc_r+0xe6>
 8000b46:	6821      	ldr	r1, [r4, #0]
 8000b48:	1a6d      	subs	r5, r5, r1
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	4638      	mov	r0, r7
 8000b4e:	f7ff ffa7 	bl	8000aa0 <sbrk_aligned>
 8000b52:	3001      	adds	r0, #1
 8000b54:	d037      	beq.n	8000bc6 <_malloc_r+0xe6>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	442b      	add	r3, r5
 8000b5a:	6023      	str	r3, [r4, #0]
 8000b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d038      	beq.n	8000bd6 <_malloc_r+0xf6>
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	42a2      	cmp	r2, r4
 8000b68:	d12b      	bne.n	8000bc2 <_malloc_r+0xe2>
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	e00f      	b.n	8000b90 <_malloc_r+0xb0>
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	1b52      	subs	r2, r2, r5
 8000b74:	d41f      	bmi.n	8000bb6 <_malloc_r+0xd6>
 8000b76:	2a0b      	cmp	r2, #11
 8000b78:	d917      	bls.n	8000baa <_malloc_r+0xca>
 8000b7a:	1961      	adds	r1, r4, r5
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	6025      	str	r5, [r4, #0]
 8000b80:	bf18      	it	ne
 8000b82:	6059      	strne	r1, [r3, #4]
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	bf08      	it	eq
 8000b88:	f8c8 1000 	streq.w	r1, [r8]
 8000b8c:	5162      	str	r2, [r4, r5]
 8000b8e:	604b      	str	r3, [r1, #4]
 8000b90:	4638      	mov	r0, r7
 8000b92:	f104 060b 	add.w	r6, r4, #11
 8000b96:	f000 f829 	bl	8000bec <__malloc_unlock>
 8000b9a:	f026 0607 	bic.w	r6, r6, #7
 8000b9e:	1d23      	adds	r3, r4, #4
 8000ba0:	1af2      	subs	r2, r6, r3
 8000ba2:	d0ae      	beq.n	8000b02 <_malloc_r+0x22>
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	50a3      	str	r3, [r4, r2]
 8000ba8:	e7ab      	b.n	8000b02 <_malloc_r+0x22>
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	6862      	ldr	r2, [r4, #4]
 8000bae:	d1dd      	bne.n	8000b6c <_malloc_r+0x8c>
 8000bb0:	f8c8 2000 	str.w	r2, [r8]
 8000bb4:	e7ec      	b.n	8000b90 <_malloc_r+0xb0>
 8000bb6:	4623      	mov	r3, r4
 8000bb8:	6864      	ldr	r4, [r4, #4]
 8000bba:	e7ac      	b.n	8000b16 <_malloc_r+0x36>
 8000bbc:	4634      	mov	r4, r6
 8000bbe:	6876      	ldr	r6, [r6, #4]
 8000bc0:	e7b4      	b.n	8000b2c <_malloc_r+0x4c>
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	e7cc      	b.n	8000b60 <_malloc_r+0x80>
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f000 f80e 	bl	8000bec <__malloc_unlock>
 8000bd0:	e797      	b.n	8000b02 <_malloc_r+0x22>
 8000bd2:	6025      	str	r5, [r4, #0]
 8000bd4:	e7dc      	b.n	8000b90 <_malloc_r+0xb0>
 8000bd6:	605b      	str	r3, [r3, #4]
 8000bd8:	deff      	udf	#255	; 0xff
 8000bda:	bf00      	nop
 8000bdc:	200001c8 	.word	0x200001c8

08000be0 <__malloc_lock>:
 8000be0:	4801      	ldr	r0, [pc, #4]	; (8000be8 <__malloc_lock+0x8>)
 8000be2:	f7ff bf0e 	b.w	8000a02 <__retarget_lock_acquire_recursive>
 8000be6:	bf00      	nop
 8000be8:	200001c4 	.word	0x200001c4

08000bec <__malloc_unlock>:
 8000bec:	4801      	ldr	r0, [pc, #4]	; (8000bf4 <__malloc_unlock+0x8>)
 8000bee:	f7ff bf09 	b.w	8000a04 <__retarget_lock_release_recursive>
 8000bf2:	bf00      	nop
 8000bf4:	200001c4 	.word	0x200001c4

08000bf8 <__sfputc_r>:
 8000bf8:	6893      	ldr	r3, [r2, #8]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	b410      	push	{r4}
 8000c00:	6093      	str	r3, [r2, #8]
 8000c02:	da08      	bge.n	8000c16 <__sfputc_r+0x1e>
 8000c04:	6994      	ldr	r4, [r2, #24]
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	db01      	blt.n	8000c0e <__sfputc_r+0x16>
 8000c0a:	290a      	cmp	r1, #10
 8000c0c:	d103      	bne.n	8000c16 <__sfputc_r+0x1e>
 8000c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c12:	f000 bb73 	b.w	80012fc <__swbuf_r>
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	1c58      	adds	r0, r3, #1
 8000c1a:	6010      	str	r0, [r2, #0]
 8000c1c:	7019      	strb	r1, [r3, #0]
 8000c1e:	4608      	mov	r0, r1
 8000c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <__sfputs_r>:
 8000c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c28:	4606      	mov	r6, r0
 8000c2a:	460f      	mov	r7, r1
 8000c2c:	4614      	mov	r4, r2
 8000c2e:	18d5      	adds	r5, r2, r3
 8000c30:	42ac      	cmp	r4, r5
 8000c32:	d101      	bne.n	8000c38 <__sfputs_r+0x12>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e007      	b.n	8000c48 <__sfputs_r+0x22>
 8000c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c3c:	463a      	mov	r2, r7
 8000c3e:	4630      	mov	r0, r6
 8000c40:	f7ff ffda 	bl	8000bf8 <__sfputc_r>
 8000c44:	1c43      	adds	r3, r0, #1
 8000c46:	d1f3      	bne.n	8000c30 <__sfputs_r+0xa>
 8000c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c4c <_vfiprintf_r>:
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	460d      	mov	r5, r1
 8000c52:	b09d      	sub	sp, #116	; 0x74
 8000c54:	4614      	mov	r4, r2
 8000c56:	4698      	mov	r8, r3
 8000c58:	4606      	mov	r6, r0
 8000c5a:	b118      	cbz	r0, 8000c64 <_vfiprintf_r+0x18>
 8000c5c:	6a03      	ldr	r3, [r0, #32]
 8000c5e:	b90b      	cbnz	r3, 8000c64 <_vfiprintf_r+0x18>
 8000c60:	f7ff fdca 	bl	80007f8 <__sinit>
 8000c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c66:	07d9      	lsls	r1, r3, #31
 8000c68:	d405      	bmi.n	8000c76 <_vfiprintf_r+0x2a>
 8000c6a:	89ab      	ldrh	r3, [r5, #12]
 8000c6c:	059a      	lsls	r2, r3, #22
 8000c6e:	d402      	bmi.n	8000c76 <_vfiprintf_r+0x2a>
 8000c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c72:	f7ff fec6 	bl	8000a02 <__retarget_lock_acquire_recursive>
 8000c76:	89ab      	ldrh	r3, [r5, #12]
 8000c78:	071b      	lsls	r3, r3, #28
 8000c7a:	d501      	bpl.n	8000c80 <_vfiprintf_r+0x34>
 8000c7c:	692b      	ldr	r3, [r5, #16]
 8000c7e:	b99b      	cbnz	r3, 8000ca8 <_vfiprintf_r+0x5c>
 8000c80:	4629      	mov	r1, r5
 8000c82:	4630      	mov	r0, r6
 8000c84:	f000 fb78 	bl	8001378 <__swsetup_r>
 8000c88:	b170      	cbz	r0, 8000ca8 <_vfiprintf_r+0x5c>
 8000c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c8c:	07dc      	lsls	r4, r3, #31
 8000c8e:	d504      	bpl.n	8000c9a <_vfiprintf_r+0x4e>
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	b01d      	add	sp, #116	; 0x74
 8000c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9a:	89ab      	ldrh	r3, [r5, #12]
 8000c9c:	0598      	lsls	r0, r3, #22
 8000c9e:	d4f7      	bmi.n	8000c90 <_vfiprintf_r+0x44>
 8000ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ca2:	f7ff feaf 	bl	8000a04 <__retarget_lock_release_recursive>
 8000ca6:	e7f3      	b.n	8000c90 <_vfiprintf_r+0x44>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9309      	str	r3, [sp, #36]	; 0x24
 8000cac:	2320      	movs	r3, #32
 8000cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cb6:	2330      	movs	r3, #48	; 0x30
 8000cb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e6c <_vfiprintf_r+0x220>
 8000cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000cc0:	f04f 0901 	mov.w	r9, #1
 8000cc4:	4623      	mov	r3, r4
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ccc:	b10a      	cbz	r2, 8000cd2 <_vfiprintf_r+0x86>
 8000cce:	2a25      	cmp	r2, #37	; 0x25
 8000cd0:	d1f9      	bne.n	8000cc6 <_vfiprintf_r+0x7a>
 8000cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8000cd6:	d00b      	beq.n	8000cf0 <_vfiprintf_r+0xa4>
 8000cd8:	465b      	mov	r3, fp
 8000cda:	4622      	mov	r2, r4
 8000cdc:	4629      	mov	r1, r5
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f7ff ffa1 	bl	8000c26 <__sfputs_r>
 8000ce4:	3001      	adds	r0, #1
 8000ce6:	f000 80a9 	beq.w	8000e3c <_vfiprintf_r+0x1f0>
 8000cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cec:	445a      	add	r2, fp
 8000cee:	9209      	str	r2, [sp, #36]	; 0x24
 8000cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80a1 	beq.w	8000e3c <_vfiprintf_r+0x1f0>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d04:	f10a 0a01 	add.w	sl, sl, #1
 8000d08:	9304      	str	r3, [sp, #16]
 8000d0a:	9307      	str	r3, [sp, #28]
 8000d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d10:	931a      	str	r3, [sp, #104]	; 0x68
 8000d12:	4654      	mov	r4, sl
 8000d14:	2205      	movs	r2, #5
 8000d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d1a:	4854      	ldr	r0, [pc, #336]	; (8000e6c <_vfiprintf_r+0x220>)
 8000d1c:	f7ff fa58 	bl	80001d0 <memchr>
 8000d20:	9a04      	ldr	r2, [sp, #16]
 8000d22:	b9d8      	cbnz	r0, 8000d5c <_vfiprintf_r+0x110>
 8000d24:	06d1      	lsls	r1, r2, #27
 8000d26:	bf44      	itt	mi
 8000d28:	2320      	movmi	r3, #32
 8000d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d2e:	0713      	lsls	r3, r2, #28
 8000d30:	bf44      	itt	mi
 8000d32:	232b      	movmi	r3, #43	; 0x2b
 8000d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d38:	f89a 3000 	ldrb.w	r3, [sl]
 8000d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8000d3e:	d015      	beq.n	8000d6c <_vfiprintf_r+0x120>
 8000d40:	9a07      	ldr	r2, [sp, #28]
 8000d42:	4654      	mov	r4, sl
 8000d44:	2000      	movs	r0, #0
 8000d46:	f04f 0c0a 	mov.w	ip, #10
 8000d4a:	4621      	mov	r1, r4
 8000d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d50:	3b30      	subs	r3, #48	; 0x30
 8000d52:	2b09      	cmp	r3, #9
 8000d54:	d94d      	bls.n	8000df2 <_vfiprintf_r+0x1a6>
 8000d56:	b1b0      	cbz	r0, 8000d86 <_vfiprintf_r+0x13a>
 8000d58:	9207      	str	r2, [sp, #28]
 8000d5a:	e014      	b.n	8000d86 <_vfiprintf_r+0x13a>
 8000d5c:	eba0 0308 	sub.w	r3, r0, r8
 8000d60:	fa09 f303 	lsl.w	r3, r9, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	9304      	str	r3, [sp, #16]
 8000d68:	46a2      	mov	sl, r4
 8000d6a:	e7d2      	b.n	8000d12 <_vfiprintf_r+0xc6>
 8000d6c:	9b03      	ldr	r3, [sp, #12]
 8000d6e:	1d19      	adds	r1, r3, #4
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	9103      	str	r1, [sp, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bfbb      	ittet	lt
 8000d78:	425b      	neglt	r3, r3
 8000d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8000d7e:	9307      	strge	r3, [sp, #28]
 8000d80:	9307      	strlt	r3, [sp, #28]
 8000d82:	bfb8      	it	lt
 8000d84:	9204      	strlt	r2, [sp, #16]
 8000d86:	7823      	ldrb	r3, [r4, #0]
 8000d88:	2b2e      	cmp	r3, #46	; 0x2e
 8000d8a:	d10c      	bne.n	8000da6 <_vfiprintf_r+0x15a>
 8000d8c:	7863      	ldrb	r3, [r4, #1]
 8000d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d90:	d134      	bne.n	8000dfc <_vfiprintf_r+0x1b0>
 8000d92:	9b03      	ldr	r3, [sp, #12]
 8000d94:	1d1a      	adds	r2, r3, #4
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	9203      	str	r2, [sp, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bfb8      	it	lt
 8000d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000da2:	3402      	adds	r4, #2
 8000da4:	9305      	str	r3, [sp, #20]
 8000da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e7c <_vfiprintf_r+0x230>
 8000daa:	7821      	ldrb	r1, [r4, #0]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4650      	mov	r0, sl
 8000db0:	f7ff fa0e 	bl	80001d0 <memchr>
 8000db4:	b138      	cbz	r0, 8000dc6 <_vfiprintf_r+0x17a>
 8000db6:	9b04      	ldr	r3, [sp, #16]
 8000db8:	eba0 000a 	sub.w	r0, r0, sl
 8000dbc:	2240      	movs	r2, #64	; 0x40
 8000dbe:	4082      	lsls	r2, r0
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	3401      	adds	r4, #1
 8000dc4:	9304      	str	r3, [sp, #16]
 8000dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dca:	4829      	ldr	r0, [pc, #164]	; (8000e70 <_vfiprintf_r+0x224>)
 8000dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000dd0:	2206      	movs	r2, #6
 8000dd2:	f7ff f9fd 	bl	80001d0 <memchr>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d03f      	beq.n	8000e5a <_vfiprintf_r+0x20e>
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <_vfiprintf_r+0x228>)
 8000ddc:	bb1b      	cbnz	r3, 8000e26 <_vfiprintf_r+0x1da>
 8000dde:	9b03      	ldr	r3, [sp, #12]
 8000de0:	3307      	adds	r3, #7
 8000de2:	f023 0307 	bic.w	r3, r3, #7
 8000de6:	3308      	adds	r3, #8
 8000de8:	9303      	str	r3, [sp, #12]
 8000dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dec:	443b      	add	r3, r7
 8000dee:	9309      	str	r3, [sp, #36]	; 0x24
 8000df0:	e768      	b.n	8000cc4 <_vfiprintf_r+0x78>
 8000df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000df6:	460c      	mov	r4, r1
 8000df8:	2001      	movs	r0, #1
 8000dfa:	e7a6      	b.n	8000d4a <_vfiprintf_r+0xfe>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	3401      	adds	r4, #1
 8000e00:	9305      	str	r3, [sp, #20]
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 0c0a 	mov.w	ip, #10
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e0e:	3a30      	subs	r2, #48	; 0x30
 8000e10:	2a09      	cmp	r2, #9
 8000e12:	d903      	bls.n	8000e1c <_vfiprintf_r+0x1d0>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0c6      	beq.n	8000da6 <_vfiprintf_r+0x15a>
 8000e18:	9105      	str	r1, [sp, #20]
 8000e1a:	e7c4      	b.n	8000da6 <_vfiprintf_r+0x15a>
 8000e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e20:	4604      	mov	r4, r0
 8000e22:	2301      	movs	r3, #1
 8000e24:	e7f0      	b.n	8000e08 <_vfiprintf_r+0x1bc>
 8000e26:	ab03      	add	r3, sp, #12
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	462a      	mov	r2, r5
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <_vfiprintf_r+0x22c>)
 8000e2e:	a904      	add	r1, sp, #16
 8000e30:	4630      	mov	r0, r6
 8000e32:	f3af 8000 	nop.w
 8000e36:	4607      	mov	r7, r0
 8000e38:	1c78      	adds	r0, r7, #1
 8000e3a:	d1d6      	bne.n	8000dea <_vfiprintf_r+0x19e>
 8000e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e3e:	07d9      	lsls	r1, r3, #31
 8000e40:	d405      	bmi.n	8000e4e <_vfiprintf_r+0x202>
 8000e42:	89ab      	ldrh	r3, [r5, #12]
 8000e44:	059a      	lsls	r2, r3, #22
 8000e46:	d402      	bmi.n	8000e4e <_vfiprintf_r+0x202>
 8000e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e4a:	f7ff fddb 	bl	8000a04 <__retarget_lock_release_recursive>
 8000e4e:	89ab      	ldrh	r3, [r5, #12]
 8000e50:	065b      	lsls	r3, r3, #25
 8000e52:	f53f af1d 	bmi.w	8000c90 <_vfiprintf_r+0x44>
 8000e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e58:	e71c      	b.n	8000c94 <_vfiprintf_r+0x48>
 8000e5a:	ab03      	add	r3, sp, #12
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	462a      	mov	r2, r5
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <_vfiprintf_r+0x22c>)
 8000e62:	a904      	add	r1, sp, #16
 8000e64:	4630      	mov	r0, r6
 8000e66:	f000 f879 	bl	8000f5c <_printf_i>
 8000e6a:	e7e4      	b.n	8000e36 <_vfiprintf_r+0x1ea>
 8000e6c:	0800157c 	.word	0x0800157c
 8000e70:	08001586 	.word	0x08001586
 8000e74:	00000000 	.word	0x00000000
 8000e78:	08000c27 	.word	0x08000c27
 8000e7c:	08001582 	.word	0x08001582

08000e80 <_printf_common>:
 8000e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e84:	4616      	mov	r6, r2
 8000e86:	4699      	mov	r9, r3
 8000e88:	688a      	ldr	r2, [r1, #8]
 8000e8a:	690b      	ldr	r3, [r1, #16]
 8000e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e90:	4293      	cmp	r3, r2
 8000e92:	bfb8      	it	lt
 8000e94:	4613      	movlt	r3, r2
 8000e96:	6033      	str	r3, [r6, #0]
 8000e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	b10a      	cbz	r2, 8000ea6 <_printf_common+0x26>
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	6033      	str	r3, [r6, #0]
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	0699      	lsls	r1, r3, #26
 8000eaa:	bf42      	ittt	mi
 8000eac:	6833      	ldrmi	r3, [r6, #0]
 8000eae:	3302      	addmi	r3, #2
 8000eb0:	6033      	strmi	r3, [r6, #0]
 8000eb2:	6825      	ldr	r5, [r4, #0]
 8000eb4:	f015 0506 	ands.w	r5, r5, #6
 8000eb8:	d106      	bne.n	8000ec8 <_printf_common+0x48>
 8000eba:	f104 0a19 	add.w	sl, r4, #25
 8000ebe:	68e3      	ldr	r3, [r4, #12]
 8000ec0:	6832      	ldr	r2, [r6, #0]
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	42ab      	cmp	r3, r5
 8000ec6:	dc26      	bgt.n	8000f16 <_printf_common+0x96>
 8000ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ecc:	1e13      	subs	r3, r2, #0
 8000ece:	6822      	ldr	r2, [r4, #0]
 8000ed0:	bf18      	it	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	0692      	lsls	r2, r2, #26
 8000ed6:	d42b      	bmi.n	8000f30 <_printf_common+0xb0>
 8000ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000edc:	4649      	mov	r1, r9
 8000ede:	4638      	mov	r0, r7
 8000ee0:	47c0      	blx	r8
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d01e      	beq.n	8000f24 <_printf_common+0xa4>
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	6922      	ldr	r2, [r4, #16]
 8000eea:	f003 0306 	and.w	r3, r3, #6
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf02      	ittt	eq
 8000ef2:	68e5      	ldreq	r5, [r4, #12]
 8000ef4:	6833      	ldreq	r3, [r6, #0]
 8000ef6:	1aed      	subeq	r5, r5, r3
 8000ef8:	68a3      	ldr	r3, [r4, #8]
 8000efa:	bf0c      	ite	eq
 8000efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f00:	2500      	movne	r5, #0
 8000f02:	4293      	cmp	r3, r2
 8000f04:	bfc4      	itt	gt
 8000f06:	1a9b      	subgt	r3, r3, r2
 8000f08:	18ed      	addgt	r5, r5, r3
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	341a      	adds	r4, #26
 8000f0e:	42b5      	cmp	r5, r6
 8000f10:	d11a      	bne.n	8000f48 <_printf_common+0xc8>
 8000f12:	2000      	movs	r0, #0
 8000f14:	e008      	b.n	8000f28 <_printf_common+0xa8>
 8000f16:	2301      	movs	r3, #1
 8000f18:	4652      	mov	r2, sl
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	47c0      	blx	r8
 8000f20:	3001      	adds	r0, #1
 8000f22:	d103      	bne.n	8000f2c <_printf_common+0xac>
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2c:	3501      	adds	r5, #1
 8000f2e:	e7c6      	b.n	8000ebe <_printf_common+0x3e>
 8000f30:	18e1      	adds	r1, r4, r3
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	2030      	movs	r0, #48	; 0x30
 8000f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f3a:	4422      	add	r2, r4
 8000f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f44:	3302      	adds	r3, #2
 8000f46:	e7c7      	b.n	8000ed8 <_printf_common+0x58>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	4638      	mov	r0, r7
 8000f50:	47c0      	blx	r8
 8000f52:	3001      	adds	r0, #1
 8000f54:	d0e6      	beq.n	8000f24 <_printf_common+0xa4>
 8000f56:	3601      	adds	r6, #1
 8000f58:	e7d9      	b.n	8000f0e <_printf_common+0x8e>
	...

08000f5c <_printf_i>:
 8000f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	7e0f      	ldrb	r7, [r1, #24]
 8000f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f64:	2f78      	cmp	r7, #120	; 0x78
 8000f66:	4691      	mov	r9, r2
 8000f68:	4680      	mov	r8, r0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f72:	d807      	bhi.n	8000f84 <_printf_i+0x28>
 8000f74:	2f62      	cmp	r7, #98	; 0x62
 8000f76:	d80a      	bhi.n	8000f8e <_printf_i+0x32>
 8000f78:	2f00      	cmp	r7, #0
 8000f7a:	f000 80d4 	beq.w	8001126 <_printf_i+0x1ca>
 8000f7e:	2f58      	cmp	r7, #88	; 0x58
 8000f80:	f000 80c0 	beq.w	8001104 <_printf_i+0x1a8>
 8000f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f8c:	e03a      	b.n	8001004 <_printf_i+0xa8>
 8000f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f92:	2b15      	cmp	r3, #21
 8000f94:	d8f6      	bhi.n	8000f84 <_printf_i+0x28>
 8000f96:	a101      	add	r1, pc, #4	; (adr r1, 8000f9c <_printf_i+0x40>)
 8000f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f9c:	08000ff5 	.word	0x08000ff5
 8000fa0:	08001009 	.word	0x08001009
 8000fa4:	08000f85 	.word	0x08000f85
 8000fa8:	08000f85 	.word	0x08000f85
 8000fac:	08000f85 	.word	0x08000f85
 8000fb0:	08000f85 	.word	0x08000f85
 8000fb4:	08001009 	.word	0x08001009
 8000fb8:	08000f85 	.word	0x08000f85
 8000fbc:	08000f85 	.word	0x08000f85
 8000fc0:	08000f85 	.word	0x08000f85
 8000fc4:	08000f85 	.word	0x08000f85
 8000fc8:	0800110d 	.word	0x0800110d
 8000fcc:	08001035 	.word	0x08001035
 8000fd0:	080010c7 	.word	0x080010c7
 8000fd4:	08000f85 	.word	0x08000f85
 8000fd8:	08000f85 	.word	0x08000f85
 8000fdc:	0800112f 	.word	0x0800112f
 8000fe0:	08000f85 	.word	0x08000f85
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08000f85 	.word	0x08000f85
 8000fec:	08000f85 	.word	0x08000f85
 8000ff0:	080010cf 	.word	0x080010cf
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	1d1a      	adds	r2, r3, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	602a      	str	r2, [r5, #0]
 8000ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001004:	2301      	movs	r3, #1
 8001006:	e09f      	b.n	8001148 <_printf_i+0x1ec>
 8001008:	6820      	ldr	r0, [r4, #0]
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	0607      	lsls	r7, r0, #24
 800100e:	f103 0104 	add.w	r1, r3, #4
 8001012:	6029      	str	r1, [r5, #0]
 8001014:	d501      	bpl.n	800101a <_printf_i+0xbe>
 8001016:	681e      	ldr	r6, [r3, #0]
 8001018:	e003      	b.n	8001022 <_printf_i+0xc6>
 800101a:	0646      	lsls	r6, r0, #25
 800101c:	d5fb      	bpl.n	8001016 <_printf_i+0xba>
 800101e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001022:	2e00      	cmp	r6, #0
 8001024:	da03      	bge.n	800102e <_printf_i+0xd2>
 8001026:	232d      	movs	r3, #45	; 0x2d
 8001028:	4276      	negs	r6, r6
 800102a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800102e:	485a      	ldr	r0, [pc, #360]	; (8001198 <_printf_i+0x23c>)
 8001030:	230a      	movs	r3, #10
 8001032:	e012      	b.n	800105a <_printf_i+0xfe>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	6820      	ldr	r0, [r4, #0]
 8001038:	1d19      	adds	r1, r3, #4
 800103a:	6029      	str	r1, [r5, #0]
 800103c:	0605      	lsls	r5, r0, #24
 800103e:	d501      	bpl.n	8001044 <_printf_i+0xe8>
 8001040:	681e      	ldr	r6, [r3, #0]
 8001042:	e002      	b.n	800104a <_printf_i+0xee>
 8001044:	0641      	lsls	r1, r0, #25
 8001046:	d5fb      	bpl.n	8001040 <_printf_i+0xe4>
 8001048:	881e      	ldrh	r6, [r3, #0]
 800104a:	4853      	ldr	r0, [pc, #332]	; (8001198 <_printf_i+0x23c>)
 800104c:	2f6f      	cmp	r7, #111	; 0x6f
 800104e:	bf0c      	ite	eq
 8001050:	2308      	moveq	r3, #8
 8001052:	230a      	movne	r3, #10
 8001054:	2100      	movs	r1, #0
 8001056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800105a:	6865      	ldr	r5, [r4, #4]
 800105c:	60a5      	str	r5, [r4, #8]
 800105e:	2d00      	cmp	r5, #0
 8001060:	bfa2      	ittt	ge
 8001062:	6821      	ldrge	r1, [r4, #0]
 8001064:	f021 0104 	bicge.w	r1, r1, #4
 8001068:	6021      	strge	r1, [r4, #0]
 800106a:	b90e      	cbnz	r6, 8001070 <_printf_i+0x114>
 800106c:	2d00      	cmp	r5, #0
 800106e:	d04b      	beq.n	8001108 <_printf_i+0x1ac>
 8001070:	4615      	mov	r5, r2
 8001072:	fbb6 f1f3 	udiv	r1, r6, r3
 8001076:	fb03 6711 	mls	r7, r3, r1, r6
 800107a:	5dc7      	ldrb	r7, [r0, r7]
 800107c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001080:	4637      	mov	r7, r6
 8001082:	42bb      	cmp	r3, r7
 8001084:	460e      	mov	r6, r1
 8001086:	d9f4      	bls.n	8001072 <_printf_i+0x116>
 8001088:	2b08      	cmp	r3, #8
 800108a:	d10b      	bne.n	80010a4 <_printf_i+0x148>
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	07de      	lsls	r6, r3, #31
 8001090:	d508      	bpl.n	80010a4 <_printf_i+0x148>
 8001092:	6923      	ldr	r3, [r4, #16]
 8001094:	6861      	ldr	r1, [r4, #4]
 8001096:	4299      	cmp	r1, r3
 8001098:	bfde      	ittt	le
 800109a:	2330      	movle	r3, #48	; 0x30
 800109c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80010a4:	1b52      	subs	r2, r2, r5
 80010a6:	6122      	str	r2, [r4, #16]
 80010a8:	f8cd a000 	str.w	sl, [sp]
 80010ac:	464b      	mov	r3, r9
 80010ae:	aa03      	add	r2, sp, #12
 80010b0:	4621      	mov	r1, r4
 80010b2:	4640      	mov	r0, r8
 80010b4:	f7ff fee4 	bl	8000e80 <_printf_common>
 80010b8:	3001      	adds	r0, #1
 80010ba:	d14a      	bne.n	8001152 <_printf_i+0x1f6>
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	b004      	add	sp, #16
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	6023      	str	r3, [r4, #0]
 80010ce:	4833      	ldr	r0, [pc, #204]	; (800119c <_printf_i+0x240>)
 80010d0:	2778      	movs	r7, #120	; 0x78
 80010d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	6829      	ldr	r1, [r5, #0]
 80010da:	061f      	lsls	r7, r3, #24
 80010dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80010e0:	d402      	bmi.n	80010e8 <_printf_i+0x18c>
 80010e2:	065f      	lsls	r7, r3, #25
 80010e4:	bf48      	it	mi
 80010e6:	b2b6      	uxthmi	r6, r6
 80010e8:	07df      	lsls	r7, r3, #31
 80010ea:	bf48      	it	mi
 80010ec:	f043 0320 	orrmi.w	r3, r3, #32
 80010f0:	6029      	str	r1, [r5, #0]
 80010f2:	bf48      	it	mi
 80010f4:	6023      	strmi	r3, [r4, #0]
 80010f6:	b91e      	cbnz	r6, 8001100 <_printf_i+0x1a4>
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	f023 0320 	bic.w	r3, r3, #32
 80010fe:	6023      	str	r3, [r4, #0]
 8001100:	2310      	movs	r3, #16
 8001102:	e7a7      	b.n	8001054 <_printf_i+0xf8>
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <_printf_i+0x23c>)
 8001106:	e7e4      	b.n	80010d2 <_printf_i+0x176>
 8001108:	4615      	mov	r5, r2
 800110a:	e7bd      	b.n	8001088 <_printf_i+0x12c>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	6826      	ldr	r6, [r4, #0]
 8001110:	6961      	ldr	r1, [r4, #20]
 8001112:	1d18      	adds	r0, r3, #4
 8001114:	6028      	str	r0, [r5, #0]
 8001116:	0635      	lsls	r5, r6, #24
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	d501      	bpl.n	8001120 <_printf_i+0x1c4>
 800111c:	6019      	str	r1, [r3, #0]
 800111e:	e002      	b.n	8001126 <_printf_i+0x1ca>
 8001120:	0670      	lsls	r0, r6, #25
 8001122:	d5fb      	bpl.n	800111c <_printf_i+0x1c0>
 8001124:	8019      	strh	r1, [r3, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	4615      	mov	r5, r2
 800112c:	e7bc      	b.n	80010a8 <_printf_i+0x14c>
 800112e:	682b      	ldr	r3, [r5, #0]
 8001130:	1d1a      	adds	r2, r3, #4
 8001132:	602a      	str	r2, [r5, #0]
 8001134:	681d      	ldr	r5, [r3, #0]
 8001136:	6862      	ldr	r2, [r4, #4]
 8001138:	2100      	movs	r1, #0
 800113a:	4628      	mov	r0, r5
 800113c:	f7ff f848 	bl	80001d0 <memchr>
 8001140:	b108      	cbz	r0, 8001146 <_printf_i+0x1ea>
 8001142:	1b40      	subs	r0, r0, r5
 8001144:	6060      	str	r0, [r4, #4]
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	6123      	str	r3, [r4, #16]
 800114a:	2300      	movs	r3, #0
 800114c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001150:	e7aa      	b.n	80010a8 <_printf_i+0x14c>
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	462a      	mov	r2, r5
 8001156:	4649      	mov	r1, r9
 8001158:	4640      	mov	r0, r8
 800115a:	47d0      	blx	sl
 800115c:	3001      	adds	r0, #1
 800115e:	d0ad      	beq.n	80010bc <_printf_i+0x160>
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	079b      	lsls	r3, r3, #30
 8001164:	d413      	bmi.n	800118e <_printf_i+0x232>
 8001166:	68e0      	ldr	r0, [r4, #12]
 8001168:	9b03      	ldr	r3, [sp, #12]
 800116a:	4298      	cmp	r0, r3
 800116c:	bfb8      	it	lt
 800116e:	4618      	movlt	r0, r3
 8001170:	e7a6      	b.n	80010c0 <_printf_i+0x164>
 8001172:	2301      	movs	r3, #1
 8001174:	4632      	mov	r2, r6
 8001176:	4649      	mov	r1, r9
 8001178:	4640      	mov	r0, r8
 800117a:	47d0      	blx	sl
 800117c:	3001      	adds	r0, #1
 800117e:	d09d      	beq.n	80010bc <_printf_i+0x160>
 8001180:	3501      	adds	r5, #1
 8001182:	68e3      	ldr	r3, [r4, #12]
 8001184:	9903      	ldr	r1, [sp, #12]
 8001186:	1a5b      	subs	r3, r3, r1
 8001188:	42ab      	cmp	r3, r5
 800118a:	dcf2      	bgt.n	8001172 <_printf_i+0x216>
 800118c:	e7eb      	b.n	8001166 <_printf_i+0x20a>
 800118e:	2500      	movs	r5, #0
 8001190:	f104 0619 	add.w	r6, r4, #25
 8001194:	e7f5      	b.n	8001182 <_printf_i+0x226>
 8001196:	bf00      	nop
 8001198:	0800158d 	.word	0x0800158d
 800119c:	0800159e 	.word	0x0800159e

080011a0 <__sflush_r>:
 80011a0:	898a      	ldrh	r2, [r1, #12]
 80011a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a6:	4605      	mov	r5, r0
 80011a8:	0710      	lsls	r0, r2, #28
 80011aa:	460c      	mov	r4, r1
 80011ac:	d458      	bmi.n	8001260 <__sflush_r+0xc0>
 80011ae:	684b      	ldr	r3, [r1, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dc05      	bgt.n	80011c0 <__sflush_r+0x20>
 80011b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	dc02      	bgt.n	80011c0 <__sflush_r+0x20>
 80011ba:	2000      	movs	r0, #0
 80011bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d0f9      	beq.n	80011ba <__sflush_r+0x1a>
 80011c6:	2300      	movs	r3, #0
 80011c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011cc:	682f      	ldr	r7, [r5, #0]
 80011ce:	6a21      	ldr	r1, [r4, #32]
 80011d0:	602b      	str	r3, [r5, #0]
 80011d2:	d032      	beq.n	800123a <__sflush_r+0x9a>
 80011d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011d6:	89a3      	ldrh	r3, [r4, #12]
 80011d8:	075a      	lsls	r2, r3, #29
 80011da:	d505      	bpl.n	80011e8 <__sflush_r+0x48>
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011e2:	b10b      	cbz	r3, 80011e8 <__sflush_r+0x48>
 80011e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011e6:	1ac0      	subs	r0, r0, r3
 80011e8:	2300      	movs	r3, #0
 80011ea:	4602      	mov	r2, r0
 80011ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ee:	6a21      	ldr	r1, [r4, #32]
 80011f0:	4628      	mov	r0, r5
 80011f2:	47b0      	blx	r6
 80011f4:	1c43      	adds	r3, r0, #1
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	d106      	bne.n	8001208 <__sflush_r+0x68>
 80011fa:	6829      	ldr	r1, [r5, #0]
 80011fc:	291d      	cmp	r1, #29
 80011fe:	d82b      	bhi.n	8001258 <__sflush_r+0xb8>
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <__sflush_r+0x108>)
 8001202:	410a      	asrs	r2, r1
 8001204:	07d6      	lsls	r6, r2, #31
 8001206:	d427      	bmi.n	8001258 <__sflush_r+0xb8>
 8001208:	2200      	movs	r2, #0
 800120a:	6062      	str	r2, [r4, #4]
 800120c:	04d9      	lsls	r1, r3, #19
 800120e:	6922      	ldr	r2, [r4, #16]
 8001210:	6022      	str	r2, [r4, #0]
 8001212:	d504      	bpl.n	800121e <__sflush_r+0x7e>
 8001214:	1c42      	adds	r2, r0, #1
 8001216:	d101      	bne.n	800121c <__sflush_r+0x7c>
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	b903      	cbnz	r3, 800121e <__sflush_r+0x7e>
 800121c:	6560      	str	r0, [r4, #84]	; 0x54
 800121e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001220:	602f      	str	r7, [r5, #0]
 8001222:	2900      	cmp	r1, #0
 8001224:	d0c9      	beq.n	80011ba <__sflush_r+0x1a>
 8001226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800122a:	4299      	cmp	r1, r3
 800122c:	d002      	beq.n	8001234 <__sflush_r+0x94>
 800122e:	4628      	mov	r0, r5
 8001230:	f7ff fbea 	bl	8000a08 <_free_r>
 8001234:	2000      	movs	r0, #0
 8001236:	6360      	str	r0, [r4, #52]	; 0x34
 8001238:	e7c0      	b.n	80011bc <__sflush_r+0x1c>
 800123a:	2301      	movs	r3, #1
 800123c:	4628      	mov	r0, r5
 800123e:	47b0      	blx	r6
 8001240:	1c41      	adds	r1, r0, #1
 8001242:	d1c8      	bne.n	80011d6 <__sflush_r+0x36>
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0c5      	beq.n	80011d6 <__sflush_r+0x36>
 800124a:	2b1d      	cmp	r3, #29
 800124c:	d001      	beq.n	8001252 <__sflush_r+0xb2>
 800124e:	2b16      	cmp	r3, #22
 8001250:	d101      	bne.n	8001256 <__sflush_r+0xb6>
 8001252:	602f      	str	r7, [r5, #0]
 8001254:	e7b1      	b.n	80011ba <__sflush_r+0x1a>
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	e7ad      	b.n	80011bc <__sflush_r+0x1c>
 8001260:	690f      	ldr	r7, [r1, #16]
 8001262:	2f00      	cmp	r7, #0
 8001264:	d0a9      	beq.n	80011ba <__sflush_r+0x1a>
 8001266:	0793      	lsls	r3, r2, #30
 8001268:	680e      	ldr	r6, [r1, #0]
 800126a:	bf08      	it	eq
 800126c:	694b      	ldreq	r3, [r1, #20]
 800126e:	600f      	str	r7, [r1, #0]
 8001270:	bf18      	it	ne
 8001272:	2300      	movne	r3, #0
 8001274:	eba6 0807 	sub.w	r8, r6, r7
 8001278:	608b      	str	r3, [r1, #8]
 800127a:	f1b8 0f00 	cmp.w	r8, #0
 800127e:	dd9c      	ble.n	80011ba <__sflush_r+0x1a>
 8001280:	6a21      	ldr	r1, [r4, #32]
 8001282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001284:	4643      	mov	r3, r8
 8001286:	463a      	mov	r2, r7
 8001288:	4628      	mov	r0, r5
 800128a:	47b0      	blx	r6
 800128c:	2800      	cmp	r0, #0
 800128e:	dc06      	bgt.n	800129e <__sflush_r+0xfe>
 8001290:	89a3      	ldrh	r3, [r4, #12]
 8001292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001296:	81a3      	strh	r3, [r4, #12]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	e78e      	b.n	80011bc <__sflush_r+0x1c>
 800129e:	4407      	add	r7, r0
 80012a0:	eba8 0800 	sub.w	r8, r8, r0
 80012a4:	e7e9      	b.n	800127a <__sflush_r+0xda>
 80012a6:	bf00      	nop
 80012a8:	dfbffffe 	.word	0xdfbffffe

080012ac <_fflush_r>:
 80012ac:	b538      	push	{r3, r4, r5, lr}
 80012ae:	690b      	ldr	r3, [r1, #16]
 80012b0:	4605      	mov	r5, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	b913      	cbnz	r3, 80012bc <_fflush_r+0x10>
 80012b6:	2500      	movs	r5, #0
 80012b8:	4628      	mov	r0, r5
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
 80012bc:	b118      	cbz	r0, 80012c6 <_fflush_r+0x1a>
 80012be:	6a03      	ldr	r3, [r0, #32]
 80012c0:	b90b      	cbnz	r3, 80012c6 <_fflush_r+0x1a>
 80012c2:	f7ff fa99 	bl	80007f8 <__sinit>
 80012c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f3      	beq.n	80012b6 <_fflush_r+0xa>
 80012ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012d0:	07d0      	lsls	r0, r2, #31
 80012d2:	d404      	bmi.n	80012de <_fflush_r+0x32>
 80012d4:	0599      	lsls	r1, r3, #22
 80012d6:	d402      	bmi.n	80012de <_fflush_r+0x32>
 80012d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012da:	f7ff fb92 	bl	8000a02 <__retarget_lock_acquire_recursive>
 80012de:	4628      	mov	r0, r5
 80012e0:	4621      	mov	r1, r4
 80012e2:	f7ff ff5d 	bl	80011a0 <__sflush_r>
 80012e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012e8:	07da      	lsls	r2, r3, #31
 80012ea:	4605      	mov	r5, r0
 80012ec:	d4e4      	bmi.n	80012b8 <_fflush_r+0xc>
 80012ee:	89a3      	ldrh	r3, [r4, #12]
 80012f0:	059b      	lsls	r3, r3, #22
 80012f2:	d4e1      	bmi.n	80012b8 <_fflush_r+0xc>
 80012f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012f6:	f7ff fb85 	bl	8000a04 <__retarget_lock_release_recursive>
 80012fa:	e7dd      	b.n	80012b8 <_fflush_r+0xc>

080012fc <__swbuf_r>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	460e      	mov	r6, r1
 8001300:	4614      	mov	r4, r2
 8001302:	4605      	mov	r5, r0
 8001304:	b118      	cbz	r0, 800130e <__swbuf_r+0x12>
 8001306:	6a03      	ldr	r3, [r0, #32]
 8001308:	b90b      	cbnz	r3, 800130e <__swbuf_r+0x12>
 800130a:	f7ff fa75 	bl	80007f8 <__sinit>
 800130e:	69a3      	ldr	r3, [r4, #24]
 8001310:	60a3      	str	r3, [r4, #8]
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	071a      	lsls	r2, r3, #28
 8001316:	d525      	bpl.n	8001364 <__swbuf_r+0x68>
 8001318:	6923      	ldr	r3, [r4, #16]
 800131a:	b31b      	cbz	r3, 8001364 <__swbuf_r+0x68>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	6922      	ldr	r2, [r4, #16]
 8001320:	1a98      	subs	r0, r3, r2
 8001322:	6963      	ldr	r3, [r4, #20]
 8001324:	b2f6      	uxtb	r6, r6
 8001326:	4283      	cmp	r3, r0
 8001328:	4637      	mov	r7, r6
 800132a:	dc04      	bgt.n	8001336 <__swbuf_r+0x3a>
 800132c:	4621      	mov	r1, r4
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff ffbc 	bl	80012ac <_fflush_r>
 8001334:	b9e0      	cbnz	r0, 8001370 <__swbuf_r+0x74>
 8001336:	68a3      	ldr	r3, [r4, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60a3      	str	r3, [r4, #8]
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	6022      	str	r2, [r4, #0]
 8001342:	701e      	strb	r6, [r3, #0]
 8001344:	6962      	ldr	r2, [r4, #20]
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	429a      	cmp	r2, r3
 800134a:	d004      	beq.n	8001356 <__swbuf_r+0x5a>
 800134c:	89a3      	ldrh	r3, [r4, #12]
 800134e:	07db      	lsls	r3, r3, #31
 8001350:	d506      	bpl.n	8001360 <__swbuf_r+0x64>
 8001352:	2e0a      	cmp	r6, #10
 8001354:	d104      	bne.n	8001360 <__swbuf_r+0x64>
 8001356:	4621      	mov	r1, r4
 8001358:	4628      	mov	r0, r5
 800135a:	f7ff ffa7 	bl	80012ac <_fflush_r>
 800135e:	b938      	cbnz	r0, 8001370 <__swbuf_r+0x74>
 8001360:	4638      	mov	r0, r7
 8001362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001364:	4621      	mov	r1, r4
 8001366:	4628      	mov	r0, r5
 8001368:	f000 f806 	bl	8001378 <__swsetup_r>
 800136c:	2800      	cmp	r0, #0
 800136e:	d0d5      	beq.n	800131c <__swbuf_r+0x20>
 8001370:	f04f 37ff 	mov.w	r7, #4294967295
 8001374:	e7f4      	b.n	8001360 <__swbuf_r+0x64>
	...

08001378 <__swsetup_r>:
 8001378:	b538      	push	{r3, r4, r5, lr}
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <__swsetup_r+0xac>)
 800137c:	4605      	mov	r5, r0
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	460c      	mov	r4, r1
 8001382:	b118      	cbz	r0, 800138c <__swsetup_r+0x14>
 8001384:	6a03      	ldr	r3, [r0, #32]
 8001386:	b90b      	cbnz	r3, 800138c <__swsetup_r+0x14>
 8001388:	f7ff fa36 	bl	80007f8 <__sinit>
 800138c:	89a3      	ldrh	r3, [r4, #12]
 800138e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001392:	0718      	lsls	r0, r3, #28
 8001394:	d422      	bmi.n	80013dc <__swsetup_r+0x64>
 8001396:	06d9      	lsls	r1, r3, #27
 8001398:	d407      	bmi.n	80013aa <__swsetup_r+0x32>
 800139a:	2309      	movs	r3, #9
 800139c:	602b      	str	r3, [r5, #0]
 800139e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	e034      	b.n	8001414 <__swsetup_r+0x9c>
 80013aa:	0758      	lsls	r0, r3, #29
 80013ac:	d512      	bpl.n	80013d4 <__swsetup_r+0x5c>
 80013ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013b0:	b141      	cbz	r1, 80013c4 <__swsetup_r+0x4c>
 80013b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013b6:	4299      	cmp	r1, r3
 80013b8:	d002      	beq.n	80013c0 <__swsetup_r+0x48>
 80013ba:	4628      	mov	r0, r5
 80013bc:	f7ff fb24 	bl	8000a08 <_free_r>
 80013c0:	2300      	movs	r3, #0
 80013c2:	6363      	str	r3, [r4, #52]	; 0x34
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013ca:	81a3      	strh	r3, [r4, #12]
 80013cc:	2300      	movs	r3, #0
 80013ce:	6063      	str	r3, [r4, #4]
 80013d0:	6923      	ldr	r3, [r4, #16]
 80013d2:	6023      	str	r3, [r4, #0]
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	81a3      	strh	r3, [r4, #12]
 80013dc:	6923      	ldr	r3, [r4, #16]
 80013de:	b94b      	cbnz	r3, 80013f4 <__swsetup_r+0x7c>
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ea:	d003      	beq.n	80013f4 <__swsetup_r+0x7c>
 80013ec:	4621      	mov	r1, r4
 80013ee:	4628      	mov	r0, r5
 80013f0:	f000 f850 	bl	8001494 <__smakebuf_r>
 80013f4:	89a0      	ldrh	r0, [r4, #12]
 80013f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013fa:	f010 0301 	ands.w	r3, r0, #1
 80013fe:	d00a      	beq.n	8001416 <__swsetup_r+0x9e>
 8001400:	2300      	movs	r3, #0
 8001402:	60a3      	str	r3, [r4, #8]
 8001404:	6963      	ldr	r3, [r4, #20]
 8001406:	425b      	negs	r3, r3
 8001408:	61a3      	str	r3, [r4, #24]
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	b943      	cbnz	r3, 8001420 <__swsetup_r+0xa8>
 800140e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001412:	d1c4      	bne.n	800139e <__swsetup_r+0x26>
 8001414:	bd38      	pop	{r3, r4, r5, pc}
 8001416:	0781      	lsls	r1, r0, #30
 8001418:	bf58      	it	pl
 800141a:	6963      	ldrpl	r3, [r4, #20]
 800141c:	60a3      	str	r3, [r4, #8]
 800141e:	e7f4      	b.n	800140a <__swsetup_r+0x92>
 8001420:	2000      	movs	r0, #0
 8001422:	e7f7      	b.n	8001414 <__swsetup_r+0x9c>
 8001424:	20000058 	.word	0x20000058

08001428 <_sbrk_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4d06      	ldr	r5, [pc, #24]	; (8001444 <_sbrk_r+0x1c>)
 800142c:	2300      	movs	r3, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	602b      	str	r3, [r5, #0]
 8001434:	f7fe ffe6 	bl	8000404 <_sbrk>
 8001438:	1c43      	adds	r3, r0, #1
 800143a:	d102      	bne.n	8001442 <_sbrk_r+0x1a>
 800143c:	682b      	ldr	r3, [r5, #0]
 800143e:	b103      	cbz	r3, 8001442 <_sbrk_r+0x1a>
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	bd38      	pop	{r3, r4, r5, pc}
 8001444:	200001c0 	.word	0x200001c0

08001448 <__swhatbuf_r>:
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	460c      	mov	r4, r1
 800144c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001450:	2900      	cmp	r1, #0
 8001452:	b096      	sub	sp, #88	; 0x58
 8001454:	4615      	mov	r5, r2
 8001456:	461e      	mov	r6, r3
 8001458:	da0d      	bge.n	8001476 <__swhatbuf_r+0x2e>
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001460:	f04f 0100 	mov.w	r1, #0
 8001464:	bf0c      	ite	eq
 8001466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800146a:	2340      	movne	r3, #64	; 0x40
 800146c:	2000      	movs	r0, #0
 800146e:	6031      	str	r1, [r6, #0]
 8001470:	602b      	str	r3, [r5, #0]
 8001472:	b016      	add	sp, #88	; 0x58
 8001474:	bd70      	pop	{r4, r5, r6, pc}
 8001476:	466a      	mov	r2, sp
 8001478:	f000 f848 	bl	800150c <_fstat_r>
 800147c:	2800      	cmp	r0, #0
 800147e:	dbec      	blt.n	800145a <__swhatbuf_r+0x12>
 8001480:	9901      	ldr	r1, [sp, #4]
 8001482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800148a:	4259      	negs	r1, r3
 800148c:	4159      	adcs	r1, r3
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	e7eb      	b.n	800146c <__swhatbuf_r+0x24>

08001494 <__smakebuf_r>:
 8001494:	898b      	ldrh	r3, [r1, #12]
 8001496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001498:	079d      	lsls	r5, r3, #30
 800149a:	4606      	mov	r6, r0
 800149c:	460c      	mov	r4, r1
 800149e:	d507      	bpl.n	80014b0 <__smakebuf_r+0x1c>
 80014a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014a4:	6023      	str	r3, [r4, #0]
 80014a6:	6123      	str	r3, [r4, #16]
 80014a8:	2301      	movs	r3, #1
 80014aa:	6163      	str	r3, [r4, #20]
 80014ac:	b002      	add	sp, #8
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	ab01      	add	r3, sp, #4
 80014b2:	466a      	mov	r2, sp
 80014b4:	f7ff ffc8 	bl	8001448 <__swhatbuf_r>
 80014b8:	9900      	ldr	r1, [sp, #0]
 80014ba:	4605      	mov	r5, r0
 80014bc:	4630      	mov	r0, r6
 80014be:	f7ff fb0f 	bl	8000ae0 <_malloc_r>
 80014c2:	b948      	cbnz	r0, 80014d8 <__smakebuf_r+0x44>
 80014c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014c8:	059a      	lsls	r2, r3, #22
 80014ca:	d4ef      	bmi.n	80014ac <__smakebuf_r+0x18>
 80014cc:	f023 0303 	bic.w	r3, r3, #3
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	e7e3      	b.n	80014a0 <__smakebuf_r+0xc>
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	6020      	str	r0, [r4, #0]
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	81a3      	strh	r3, [r4, #12]
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	6163      	str	r3, [r4, #20]
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	6120      	str	r0, [r4, #16]
 80014ea:	b15b      	cbz	r3, 8001504 <__smakebuf_r+0x70>
 80014ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014f0:	4630      	mov	r0, r6
 80014f2:	f000 f81d 	bl	8001530 <_isatty_r>
 80014f6:	b128      	cbz	r0, 8001504 <__smakebuf_r+0x70>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	81a3      	strh	r3, [r4, #12]
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	431d      	orrs	r5, r3
 8001508:	81a5      	strh	r5, [r4, #12]
 800150a:	e7cf      	b.n	80014ac <__smakebuf_r+0x18>

0800150c <_fstat_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d07      	ldr	r5, [pc, #28]	; (800152c <_fstat_r+0x20>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	4611      	mov	r1, r2
 8001518:	602b      	str	r3, [r5, #0]
 800151a:	f7fe ff4a 	bl	80003b2 <_fstat>
 800151e:	1c43      	adds	r3, r0, #1
 8001520:	d102      	bne.n	8001528 <_fstat_r+0x1c>
 8001522:	682b      	ldr	r3, [r5, #0]
 8001524:	b103      	cbz	r3, 8001528 <_fstat_r+0x1c>
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	bd38      	pop	{r3, r4, r5, pc}
 800152a:	bf00      	nop
 800152c:	200001c0 	.word	0x200001c0

08001530 <_isatty_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d06      	ldr	r5, [pc, #24]	; (800154c <_isatty_r+0x1c>)
 8001534:	2300      	movs	r3, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	602b      	str	r3, [r5, #0]
 800153c:	f7fe ff49 	bl	80003d2 <_isatty>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_isatty_r+0x1a>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_isatty_r+0x1a>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	200001c0 	.word	0x200001c0

08001550 <_init>:
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	bf00      	nop
 8001554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001556:	bc08      	pop	{r3}
 8001558:	469e      	mov	lr, r3
 800155a:	4770      	bx	lr

0800155c <_fini>:
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155e:	bf00      	nop
 8001560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001562:	bc08      	pop	{r3}
 8001564:	469e      	mov	lr, r3
 8001566:	4770      	bx	lr
