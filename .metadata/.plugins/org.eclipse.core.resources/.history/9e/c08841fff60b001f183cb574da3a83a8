#include "keypad.h"
#include <stddef.h>

//Row and column declarations
#define COL1 1
#define COL2 2
#define COL3 3
#define COL4 4

#define ROW1 5
#define ROW2 6
#define ROW3 7
#define ROW4 8

uint8_t columns[4] = {COL1, COL2, COL3, COL4};
uint8_t row[4] = {ROW1, ROW2, ROW3, ROW4};

int keypadVals[4][4] = {{49,50,51,65},
						{52,53,54,66},
						{55,56,57,67},
						{42,48,35,68}};


void keypadInit(void) {
	/*Four pins to control the stepper motor:
	 * PC 5, PC 6, PC 8, and PC 9*/

	#define DELAY  15000 //60000

	/* Enable GPIOs clock */
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOCEN;

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOC->MODER &= ~(3U<<(2*COL1) | 3U<<(2*COL2) | 3U<<(2*COL3) | 3U<<(2*COL4));  //clear PC 5,6,8,9 GPIO pins
	GPIOC->MODER  |=  1U<<(2*COL1) | 1U<<(2*COL2) | 1U<<(2*COL3) | 1U<<(2*COL4);   //  set Output(01)
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOC->OSPEEDR &= ~(3U<<(2*COL1) | 3U<<(2*COL2) | 3U<<(2*COL3) | 3U<<(2*COL4));   //clear PC 5,6,8,9 GPIO pins
	GPIOC->OSPEEDR |=   2U<<(2*COL1) | 2U<<(2*COL2) | 2U<<(2*COL3) | 2U<<(2*COL4);  // Set Fast speed
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOC->OTYPER &= ~(1U<<COL1 | 1U<<COL2 | 1U<<COL3 | 1U<<COL4);       // Set Push-pull
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOC->PUPDR  &= ~(3U<<(2*COL1) | 3U<<(2*COL2) | 3U<<(2*COL3) | 3U<<(2*COL4));  // No pull-up, no pull-down

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOC->MODER &= ~(3U<<(2*ROW1) | 3U<<(2*ROW2) | 3U<<(2*ROW3) | 3U<<(2*ROW4));  //clear PC 5,6,8,9 GPIO pins
	//GPIOC->MODER  |=  1<<(2*ROW1) | 1<<(2*ROW2) | 1<<(2*ROW3) | 1<<(2*ROW4);   //  set Output(01)
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOC->OSPEEDR &= ~(3U<<(2*ROW1) | 3U<<(2*ROW2) | 3U<<(2*ROW3) | 3U<<(2*ROW4));   //clear PC 5,6,8,9 GPIO pins
	GPIOC->OSPEEDR |=   2U<<(2*ROW1) | 2U<<(2*ROW2) | 2U<<(2*ROW3) | 2U<<(2*ROW4);  // Set Fast speed
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOC->OTYPER &= ~(1U<<ROW1 | 1U<<ROW2 | 1U<<ROW3 | 1U<<ROW4);       // Set Push-pull
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOC->PUPDR  &= ~(3U<<(2*ROW1) | 3U<<(2*ROW2) | 3U<<(2*ROW3) | 3U<<(2*ROW4));  //  pull-down
	GPIOC->PUPDR  |= (2U<<(2*ROW1) | 2U<<(2*ROW2) | 2U<<(2*ROW3) | 2U<<(2*ROW4));
}

int keypadScan(void) {
//    unsigned char row, col;
//	unsigned char key;
//	uint32_t inputMask  = GPIO_IDR_ID5 | GPIO_IDR_ID6 | GPIO_IDR_ID7 | GPIO_IDR_ID8;
//	uint32_t outputMask = GPIO_ODR_OD1 | GPIO_ODR_OD2  | GPIO_ODR_OD3  | GPIO_ODR_OD4;
//
//	uint32_t outputs[4] = {GPIO_ODR_OD1, GPIO_ODR_OD2,  GPIO_ODR_OD3,  GPIO_ODR_OD4};
//	uint32_t inputs[4]  = {GPIO_IDR_ID5, GPIO_IDR_ID6, GPIO_IDR_ID7, GPIO_IDR_ID8};
//
//	 for(row = 0; row < 4; row++){ // Row scan
//	 	GPIOC->ODR |= outputMask;
//	 	GPIOC->ODR &= ~outputs[row];
//	 	waitms(3); // short delay
//	 	for(col = 0; col < 4; col++){// Column scan
//	 		if((GPIOC->IDR & inputs[col]) == 0 ){
//	 			key = keypadVals[row][col];
//	 			//while( (GPIOC->IDR & inputMask) != inputMask){;} // Wait until key released
//	 			return key;
//	 		}
//	 	}
//	 }


//	int returnVal = 0;
	GPIOC->ODR |= (1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
	//return GPIOC->IDR;

	if(GPIOC->IDR &(1<<ROW1)) {
		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL1);
		if (!(GPIOC->IDR &(1<<ROW1))) {
			return keypadVals[0][0];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL2);
		if (!(GPIOC->IDR &(1<<ROW1))) {
			return keypadVals[0][1];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL3);
		if (!(GPIOC->IDR &(1<<ROW1))) {
			return keypadVals[0][2];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL4);
		if (!(GPIOC->IDR &(1<<ROW1))) {
			return keypadVals[0][3];
		}
	}
	else if(GPIOC->IDR &(1<<ROW2)) {
		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL1);
		if (!(GPIOC->IDR &(1<<ROW2))) {
			return keypadVals[1][0];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL2);
		if (!(GPIOC->IDR &(1<<ROW2))) {
			return keypadVals[1][1];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL3);
		if (!(GPIOC->IDR &(1<<ROW2))) {
			return keypadVals[1][2];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL4);
		if (!(GPIOC->IDR &(1<<ROW2))) {
			return keypadVals[1][3];
		}
	}
	else if(GPIOC->IDR &(1<<ROW3)) {
		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL1);
		if (!(GPIOC->IDR &(1<<ROW3))) {
			return keypadVals[2][0];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL2);
		if (!(GPIOC->IDR &(1<<ROW3))) {
			return keypadVals[2][1];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL3);
		if (!(GPIOC->IDR &(1<<ROW3))) {
			return keypadVals[2][2];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL4);
		if (!(GPIOC->IDR &(1<<ROW3))) {
			return keypadVals[2][3];
		}
	}
	else if(GPIOC->IDR &(1<<ROW4)) {
		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL1);
		if (!(GPIOC->IDR &(1<<ROW4))) {
			return keypadVals[3][0];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL2);
		if (!(GPIOC->IDR &(1<<ROW4))) {
			return keypadVals[3][1];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL3);
		if (!(GPIOC->IDR &(1<<ROW4))) {
			return keypadVals[3][2];
		}

		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
		GPIOC->ODR &=~ (1<<COL4);
		if (!(GPIOC->IDR &(1<<ROW4))) {
			return keypadVals[3][3];
		}
	}
	else {
		return 0;
	}

//	if(GPIOC->IDR &(1<<ROW1)) {
//		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//		GPIOC->ODR &=~ (1<<COL1);
//		if(GPIOC->IDR &(1<<ROW1)) {
//			return keypadVals[0][0];
//		}
//		waitms(15);
//		GPIOC->ODR |=(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//		GPIOC->ODR &= (1<<COL2);
//		if(GPIOC->IDR &(1<<ROW1)) {
//			return keypadVals[0][1];
//		}

//		GPIOC->ODR &=~(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//		GPIOC->ODR |= (1<<COL3);
//		if(GPIOC->IDR &(1<<ROW1)) {
//			return keypadVals[0][2];
//		}
//
//		GPIOC->ODR &=~(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//		GPIOC->ODR |= (1<<COL4);
//		if(GPIOC->IDR &(1<<ROW1)) {
//			return keypadVals[0][3];
//		}


//		for(int i = 0; i < 3; i++) {
//			GPIOC->ODR &=~(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//			GPIOC->ODR |= (1<<columns[i]);
//			if(GPIOC->IDR &(1<<ROW1)) {
//				return keypadVals[0][i];
//			}
//		}
//		return 1;
//	}
//	else if(GPIOC->IDR &(1<<ROW2)) {
//		for(int i = 0; i < 3; i++) {
//			GPIOC->ODR &=~(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//			GPIOC->ODR |= (1<<columns[i]);
//			if(GPIOC->IDR &(1<<ROW2)) {
//				return keypadVals[1][i];
//			}
//		}
////		return 4;
//	}
//	else if(GPIOC->IDR &(1<<ROW3)) {
//		for(int i = 0; i < 3; i++) {
//			GPIOC->ODR &=~(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//			GPIOC->ODR |= (1<<columns[i]);
//			if(GPIOC->IDR &(1<<ROW3)) {
//				return keypadVals[2][i];
//			}
//		}
////		return 7;
//	}
//	else if(GPIOC->IDR &(1<<ROW4)) {
//		for(int i = 0; i < 3; i++) {
//			GPIOC->ODR &=~(1<<COL1) | (1<<COL2) | (1<<COL3) | (1<<COL4);
//			GPIOC->ODR |= (1<<columns[i]);
//			if(GPIOC->IDR &(1<<ROW4)) {
//				return keypadVals[3][i];
//			}
//		}
////		return 10;
//	}
	return 0;
}

//bool keypadLock(int sensorVal, int* keypadState) {
//	switch (keypadState) {
//		case 0:
//			if(sensorVal == keypadCode[0]) {
//				keypadState = 1;
//				return false;
//			}
//			else {
//				return false;
//			}
//		case 1:
//				if(sensorVal == keypadCode[0]) {
//					keypadState = 1;
//					return false;
//				}
//				else {
//					return false;
//				}
//}

//void Keypad_Pin_Init(){
//    // Enable GPIO clock
//	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
//
//	// Setting PC 0, 1, 2, 3 as GPIO output
//	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
//	GPIOC->MODER &= ~(GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 | GPIO_MODER_MODE4);
//    GPIOC->MODER |= (GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 | GPIO_MODER_MODE4_0); // Output
//
//	// Setting PC 4, 10, 11, 12, 13 as GPIO input
//	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
//	GPIOC->MODER &= ~(GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7 | GPIO_MODER_MODE8); // Input
//
//	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
//	GPIOC->OTYPER |= (GPIO_IDR_ID1 | GPIO_IDR_ID2 | GPIO_IDR_ID3 | GPIO_IDR_ID4); // Open-drain
//}
//
//uint8_t keypad_scan(){
//    unsigned char row, col;
//	unsigned char key;
//
//	uint8_t keymap[4][4] = {{49,50,51,65},
//							{52,53,54,66},
//							{55,56,57,67},
//							{42,48,35,68}};
//
//	uint32_t inputMask  = GPIO_IDR_ID5 | GPIO_IDR_ID6 | GPIO_IDR_ID7 | GPIO_IDR_ID8;
//    uint32_t outputMask = GPIO_ODR_OD1 | GPIO_ODR_OD2  | GPIO_ODR_OD3  | GPIO_ODR_OD4;
//
//    uint32_t outputs[4] = {GPIO_ODR_OD1, GPIO_ODR_OD2,  GPIO_ODR_OD3,  GPIO_ODR_OD4};
//	uint32_t inputs[4]  = {GPIO_IDR_ID5, GPIO_IDR_ID6, GPIO_IDR_ID7, GPIO_IDR_ID8};
//
//	GPIOC->ODR &= ~outputMask;
//	waitms(3); // short delay
//
//	while( (GPIOA->IDR & inputMask) == inputMask){;}  // Wait until key pressed
//
//	for(row = 0; row < 4; row++){ // Row scan
//		GPIOE->ODR |= outputMask;
//		GPIOE->ODR &= ~outputs[row];
//		waitms(3); // short delay
//		for(col = 0; col < 4; col++){// Column scan
//			if((GPIOA->IDR & inputs[col]) == 0 ){
//				key = keymap[row][col];
//				while( (GPIOA->IDR & inputMask) != inputMask){;} // Wait until key released
//				return key;
//			}
//		}
//	}
//
//	return 0xFF;
//}
//
//void waitms(unsigned int ms){
//	int i, j;
//	for(i = 0; i < ms; i++){
//		for(j=0; j < 4000; j++);
//	}
//}
