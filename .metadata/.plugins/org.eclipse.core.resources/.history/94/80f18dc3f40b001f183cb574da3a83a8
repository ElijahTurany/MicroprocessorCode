/*Access peripheral of the L476RG u controller*/
#include "stm32l476xx.h"
#include "fpu.h"
#include "uart.h"
#include "adc.h"
#include "keypad.h"
#include "servo.h"
#include "lcd.h"
#include <stdio.h>
#include <string.h>

//Function declarations
void pseudoDelay(void);
int dialLock(int sensorVal);
int keypadLock(void);
int lockBox(int keypad, int dial);
int arraysEqual(int arr1[], int arr2[], int size);

//Vars uses for dial and lock state machines
int dialState = 0;
int lockState = 0;

//LCD strings used by sendString function
//Each is an array of 8bit codes that represent the characters
int enterCode[12] = {charE, charN, charT, charE, charR, charSpace, charC, charO, charD, charE, charColon, charSpace};
int tryAgain[9] = {charT, charR, charY, charSpace, charA, charG, charA, charI, charN};
int enterDial[10] = {charE, charN, charT, charE, charR, charSpace, charD, charI, charA, charL};
int lockOpen[9] = {charL, charO, charC, charK, charSpace, charO, charP, charE, charN};
int closeLock[10] = {charPound, charSpace, charT, charO, charSpace, charC, charL, charO, charS, charE};

int main() {
	//Pin initialization
	debug_uart_init();
	pa4_adc1_init();
	pseudoDelay();
	start_conversion();
	keypadInit();
	servoPinInit();
	TIM5CH1Init();
	lcdInit();

	//Sets up LCD and pushes initial string to display
	lcdSetup();
	sendString(enterCode, 12);

	while(1){
		//Slows down rate of checking and logic
		pseudoDelay();

		/* Code used to display information on TeraTerm
		int dialValue = adc_read();
		int keypadValue = keypadLock();
		int dialLockValue = dialLock(dialValue);
		printf("Keypad: %d\n\r", keypadValue);
		printf("Sensor value: %d\n\r", dialValue);
		printf("Dial state: %d\n\r", dialState);
		printf("Dial lock state: %d\n\r", dialLockValue);
		printf("Lock state: %d\n\r\n\r", lockBox(keypadValue, dialLockValue));*/

		//Calls lock box behavior with keypad output and dial lock output
		lockBox(keypadLock(), dialLock(adc_read()));
	}
}

void pseudoDelay(void){
	int x;
	for(int i = 0; i < 64000; i++) {
		x++;
	}
}

//High and low acceptable values for dial code
int lowVal1 = 0;
int highVal1 = 0;
int lowVal2 = 3200;
int highVal2 = 3600;
int lowVal3 = 1800;
int highVal3 = 2200;

//Variables used to determine direction of turn
int lastVal = 0;
int direction = 0;

int dialLock(int sensorVal) {
	//Direction determining code
	//10 is used as range previous and current must differ to declare turn direction
	if(sensorVal - lastVal > 10) {
		direction = 1;
	}
	else if(sensorVal - lastVal < -10) {
		direction = -1;
	}
	else {
		direction = 0;
	}
	lastVal = sensorVal;

	//Dial lock state machine
	switch (dialState) {
		case 0:
			//Checks for dial at 1st position, direction doesn't matter
			if(sensorVal >= lowVal1 && sensorVal <= highVal1) {
				dialState = 1;
				return false;
			}
			else {
				return false;
			}
		case 1:
			//Dial at position 1
			if(sensorVal >= lowVal1 && sensorVal <= highVal1) {
				return false;
			}
			//Resets state machine to state zero if dial goes past 2nd position, below 1st position, or turns backwards
			else if(sensorVal >= highVal2 || sensorVal <= lowVal1 || direction == -1) {
				dialState = 0;
				return false;
			}
			//Checks for dial at 2nd position
			else if(sensorVal >= lowVal2) {
				dialState = 2;
				return false;
			}
			else {
				return false;
			}
		case 2:
			//Dial at position 2
			if(sensorVal >= lowVal2 && sensorVal <= highVal2) {
				return false;
			}
			//Resets state machine to state zero if dial goes below 3nd position, past 2nd position, or turns backwards
			else if(sensorVal <= lowVal3 || sensorVal >= highVal2 || direction == 1) {
				dialState = 0;
				return false;
			}
			//Checks for dial at position 3
			else if(sensorVal <= highVal3) {
				dialState = 3;
				return false;
			}
			else {
				return false;
			}
		case 3:
			//Dial at position 3
			if(sensorVal >= lowVal3 && sensorVal <= highVal3) {
				return true;
			}
			//If dial moves, lock resets
			else {
				dialState = 0;
				return false;
			}
		default:
			return false;
	}
}

//Code keypad requires (1,2,3,4)
int keypadCode[4] = {49,50,51,52};
//Vars used for lock control
int keypadInput[4] = {0,0,0,0};
int keysInput = 0;
int lastInput = 0;

int keypadLock() {
	int scanVal = keypadScan();
	//Resets entire lock back to inital state if 35 (#) is entered
	if(keypadScan() == 35) {
		keysInput = 0;
		lastInput = 0;
		memset(keypadInput, 0, sizeof(keypadInput));
		clearScreen();
		sendString(enterCode, 12);
		lockState = 0;
		dialState = 0;
		servoClose();
		return 35;
	}
	//Checks code input once 4 digits are entered
	if(keysInput >= 4) {
		//Resets keypad lock if incorrect, and displays "Try again" on LCD
		if (!(arraysEqual(keypadCode, keypadInput, 4))) {
			keysInput = 0;
			lastInput = 0;
			memset(keypadInput, 0, sizeof(keypadInput));
			clearScreen();
			lineTwo();
			sendString(tryAgain, 9);
			lineOne();
			sendString(enterCode, 12);
			return -1;
		}
		//Function will return 1 if it is unlocked
		else {
			return 1;
		}
	}
	else {
		//Code to isolate keys input
		//Will only input a key if it isn't zero and isn't the same as the last input
		if((scanVal != 0) && (scanVal != lastInput)) {
			lastInput = scanVal;
			keypadInput[keysInput] = scanVal;
			//Writes digit to LCD
			displayInput(scanVal);
			keysInput++;
			return scanVal;
		}
		//If button is released, last input is 0 and another key can be entered
		else if(scanVal == 0) {
			lastInput = 0;
			return scanVal;
		}
	}
	return scanVal;
}

int lockBox(int keypad, int dial) {
	//Lock state machine
	switch (lockState) {
		case 0:
			//Moves to state 2 if keypad code was entered correctly, updates LCD
			if(keypad == 1) {
				clearScreen();
				sendString(enterDial, 10);
				lockState = 1;
			}
			return 0;
		case 1:
			//Moves to state 2 if dial code is input correctly, updates LCD
			if(dial == 1) {
				servoOpen();
				clearScreen();
				sendString(lockOpen, 9);
				lineTwo();
				sendString(closeLock, 10);
				lockState = 2;
				return 1;
			}
			else {
				return 0;
			}
		case 2:
			//Allows
			if (keypad == 35) {
				servoClose();
				lockState = 0;
				dialState = 0;
				return 0;
			}
			else {
				return 1;
			}
		default:
			return 0;
	}
}

//Function used to determine if keypadInput and keypadCode are the same
int arraysEqual(int arr1[], int arr2[], int size) {
    for (int i = 0; i < size; i++) {
        if (arr1[i] != arr2[i]) {
            return 0; // Arrays are not equal
        }
    }
    return 1; // Arrays are equal
}






