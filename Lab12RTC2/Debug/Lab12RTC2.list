
Lab12RTC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc4  08001dc4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001dc4  08001dc4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dc4  08001dc4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dc4  08001dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001b8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000214  20000214  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001a7c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000815  00000000  00000000  00021b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000268  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001ae  00000000  00000000  000225c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e4cb  00000000  00000000  00022776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002ddf  00000000  00000000  00040c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a49d1  00000000  00000000  00043a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001144  00000000  00000000  000e83f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000e9538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d34 	.word	0x08001d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001d34 	.word	0x08001d34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
void display_rtc_calendar(void);

uint32_t prev_time, curr_time;

int main()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	debug_uart_init();
 8000274:	f000 fb8e 	bl	8000994 <debug_uart_init>
	rtc_init();
 8000278:	f000 f8a2 	bl	80003c0 <rtc_init>
	timebase_init();
 800027c:	f000 fb54 	bl	8000928 <timebase_init>
	//LED_Init();

	/*Get current time*/
	prev_time = rtc_date_get_minute();
 8000280:	f000 fa50 	bl	8000724 <rtc_date_get_minute>
 8000284:	4603      	mov	r3, r0
 8000286:	4a02      	ldr	r2, [pc, #8]	; (8000290 <main+0x20>)
 8000288:	6013      	str	r3, [r2, #0]

	while(1)
	{
	 	display_rtc_calendar();
 800028a:	f000 f803 	bl	8000294 <display_rtc_calendar>
 800028e:	e7fc      	b.n	800028a <main+0x1a>
 8000290:	200000b8 	.word	0x200000b8

08000294 <display_rtc_calendar>:

	}
}

void display_rtc_calendar(void)
{
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af02      	add	r7, sp, #8
	/*Display time format : hh :mm : ss*/

	sprintf((char*)time_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_date_get_hour()),
 800029a:	f000 fa51 	bl	8000740 <rtc_date_get_hour>
 800029e:	4603      	mov	r3, r0
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f9ec 	bl	8000680 <rtc_convert_bcd2bin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461c      	mov	r4, r3
			rtc_convert_bcd2bin(rtc_date_get_minute()),
 80002ac:	f000 fa3a 	bl	8000724 <rtc_date_get_minute>
 80002b0:	4603      	mov	r3, r0
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f9e3 	bl	8000680 <rtc_convert_bcd2bin>
 80002ba:	4603      	mov	r3, r0
	sprintf((char*)time_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_date_get_hour()),
 80002bc:	461d      	mov	r5, r3
			rtc_convert_bcd2bin(rtc_date_get_second()));
 80002be:	f000 fa23 	bl	8000708 <rtc_date_get_second>
 80002c2:	4603      	mov	r3, r0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f9da 	bl	8000680 <rtc_convert_bcd2bin>
 80002cc:	4603      	mov	r3, r0
	sprintf((char*)time_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_date_get_hour()),
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	462b      	mov	r3, r5
 80002d2:	4622      	mov	r2, r4
 80002d4:	4935      	ldr	r1, [pc, #212]	; (80003ac <display_rtc_calendar+0x118>)
 80002d6:	4836      	ldr	r0, [pc, #216]	; (80003b0 <display_rtc_calendar+0x11c>)
 80002d8:	f000 fcf0 	bl	8000cbc <siprintf>

	printf(" Time: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_date_get_hour()),
 80002dc:	f000 fa30 	bl	8000740 <rtc_date_get_hour>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9cb 	bl	8000680 <rtc_convert_bcd2bin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461c      	mov	r4, r3
				rtc_convert_bcd2bin(rtc_date_get_minute()),
 80002ee:	f000 fa19 	bl	8000724 <rtc_date_get_minute>
 80002f2:	4603      	mov	r3, r0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f9c2 	bl	8000680 <rtc_convert_bcd2bin>
 80002fc:	4603      	mov	r3, r0
	printf(" Time: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_date_get_hour()),
 80002fe:	461d      	mov	r5, r3
				rtc_convert_bcd2bin(rtc_date_get_second()));
 8000300:	f000 fa02 	bl	8000708 <rtc_date_get_second>
 8000304:	4603      	mov	r3, r0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f9b9 	bl	8000680 <rtc_convert_bcd2bin>
 800030e:	4603      	mov	r3, r0
	printf(" Time: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_date_get_hour()),
 8000310:	462a      	mov	r2, r5
 8000312:	4621      	mov	r1, r4
 8000314:	4827      	ldr	r0, [pc, #156]	; (80003b4 <display_rtc_calendar+0x120>)
 8000316:	f000 fcbf 	bl	8000c98 <iprintf>

	delay(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f000 fac2 	bl	80008a4 <delay>
	sprintf((char*)date_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_date_get_month()),
 8000320:	f000 f9e4 	bl	80006ec <rtc_date_get_month>
 8000324:	4603      	mov	r3, r0
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f9a9 	bl	8000680 <rtc_convert_bcd2bin>
 800032e:	4603      	mov	r3, r0
 8000330:	461c      	mov	r4, r3
				rtc_convert_bcd2bin(rtc_date_get_day()),
 8000332:	f000 f9bf 	bl	80006b4 <rtc_date_get_day>
 8000336:	4603      	mov	r3, r0
 8000338:	b2db      	uxtb	r3, r3
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f9a0 	bl	8000680 <rtc_convert_bcd2bin>
 8000340:	4603      	mov	r3, r0
	sprintf((char*)date_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_date_get_month()),
 8000342:	461d      	mov	r5, r3
				2000 + rtc_convert_bcd2bin(rtc_date_get_year()));
 8000344:	f000 f9c4 	bl	80006d0 <rtc_date_get_year>
 8000348:	4603      	mov	r3, r0
 800034a:	b2db      	uxtb	r3, r3
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f997 	bl	8000680 <rtc_convert_bcd2bin>
 8000352:	4603      	mov	r3, r0
	sprintf((char*)date_buffer,"%.2d:%.2d:%.2d", rtc_convert_bcd2bin(rtc_date_get_month()),
 8000354:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	462b      	mov	r3, r5
 800035c:	4622      	mov	r2, r4
 800035e:	4913      	ldr	r1, [pc, #76]	; (80003ac <display_rtc_calendar+0x118>)
 8000360:	4815      	ldr	r0, [pc, #84]	; (80003b8 <display_rtc_calendar+0x124>)
 8000362:	f000 fcab 	bl	8000cbc <siprintf>

	printf(" Day_Year: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_date_get_month()),
 8000366:	f000 f9c1 	bl	80006ec <rtc_date_get_month>
 800036a:	4603      	mov	r3, r0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f986 	bl	8000680 <rtc_convert_bcd2bin>
 8000374:	4603      	mov	r3, r0
 8000376:	461c      	mov	r4, r3
					rtc_convert_bcd2bin(rtc_date_get_day()),
 8000378:	f000 f99c 	bl	80006b4 <rtc_date_get_day>
 800037c:	4603      	mov	r3, r0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f97d 	bl	8000680 <rtc_convert_bcd2bin>
 8000386:	4603      	mov	r3, r0
	printf(" Day_Year: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_date_get_month()),
 8000388:	461d      	mov	r5, r3
					rtc_convert_bcd2bin(rtc_date_get_year()));
 800038a:	f000 f9a1 	bl	80006d0 <rtc_date_get_year>
 800038e:	4603      	mov	r3, r0
 8000390:	b2db      	uxtb	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f974 	bl	8000680 <rtc_convert_bcd2bin>
 8000398:	4603      	mov	r3, r0
	printf(" Day_Year: %.2d:%.2d:%.2d\n\r", rtc_convert_bcd2bin(rtc_date_get_month()),
 800039a:	462a      	mov	r2, r5
 800039c:	4621      	mov	r1, r4
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <display_rtc_calendar+0x128>)
 80003a0:	f000 fc7a 	bl	8000c98 <iprintf>
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bdb0      	pop	{r4, r5, r7, pc}
 80003aa:	bf00      	nop
 80003ac:	08001d4c 	.word	0x08001d4c
 80003b0:	20000078 	.word	0x20000078
 80003b4:	08001d5c 	.word	0x08001d5c
 80003b8:	20000098 	.word	0x20000098
 80003bc:	08001d74 	.word	0x08001d74

080003c0 <rtc_init>:

static void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year);
static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds);

void rtc_init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	/*Enable Clock access to PWR (power module in block diagram)*/
    //RCC->APB1ENR |=PWREN;
	RCC->APB1ENR1 |=PWREN; //Power interface clock enable
 80003c4:	4b35      	ldr	r3, [pc, #212]	; (800049c <rtc_init+0xdc>)
 80003c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c8:	4a34      	ldr	r2, [pc, #208]	; (800049c <rtc_init+0xdc>)
 80003ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ce:	6593      	str	r3, [r2, #88]	; 0x58
	/*Enable Backup access write protection to configure RTC registers (DBP)*/
    PWR->CR1  |= CR_DBP;
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <rtc_init+0xe0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <rtc_init+0xe0>)
 80003d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003da:	6013      	str	r3, [r2, #0]
	/*Enable low speed speed Internal clock (LSI) see RCC_CSR*/
    /*Set LSION to 1 to turn on LSI RC oscillator ON at bit 0*/
    RCC->CSR |=CSR_LSION;
 80003dc:	4b2f      	ldr	r3, [pc, #188]	; (800049c <rtc_init+0xdc>)
 80003de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003e2:	4a2e      	ldr	r2, [pc, #184]	; (800049c <rtc_init+0xdc>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	/*Wait for LSI to be enabled see LDIRDY*/
    while ((RCC->CSR & CSR_LSIRDY)!= CSR_LSIRDY){}
 80003ec:	bf00      	nop
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <rtc_init+0xdc>)
 80003f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d1f8      	bne.n	80003ee <rtc_init+0x2e>
	/*Force backup domain to reset, see RCC_BDCR->BDRST*/
    RCC->BDCR |=BDCR_BDRST;
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <rtc_init+0xdc>)
 80003fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000402:	4a26      	ldr	r2, [pc, #152]	; (800049c <rtc_init+0xdc>)
 8000404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/*Release backup domain reset*/
    RCC->BDCR &=~BDCR_BDRST;
 800040c:	4b23      	ldr	r3, [pc, #140]	; (800049c <rtc_init+0xdc>)
 800040e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000412:	4a22      	ldr	r2, [pc, #136]	; (800049c <rtc_init+0xdc>)
 8000414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/*Set RTC clock source to LSI, select RTCSEL to 10 */
    RCC->BDCR &=~(1U<<8);
 800041c:	4b1f      	ldr	r3, [pc, #124]	; (800049c <rtc_init+0xdc>)
 800041e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <rtc_init+0xdc>)
 8000424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    RCC->BDCR |=(1U<<9);
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <rtc_init+0xdc>)
 800042e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000432:	4a1a      	ldr	r2, [pc, #104]	; (800049c <rtc_init+0xdc>)
 8000434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/*Enable RTC*/
    RCC->BDCR |=RTCEN;
 800043c:	4b17      	ldr	r3, [pc, #92]	; (800049c <rtc_init+0xdc>)
 800043e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <rtc_init+0xdc>)
 8000444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/*see RTC_WPR. RTC registers are locked for write protection register*/
    /*write these two protection keys below and then initialize the RTC */
	/*The two protection keys info. is provided in the STM32 Ref. manual*/
    RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_1;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <rtc_init+0xe4>)
 800044e:	22ca      	movs	r2, #202	; 0xca
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = RTC_WRITE_PROTECTION_ENABLE_2;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <rtc_init+0xe4>)
 8000454:	2253      	movs	r2, #83	; 0x53
 8000456:	625a      	str	r2, [r3, #36]	; 0x24

    /*Enter initialization mode*/
    if(rtc_init_seq() != 1)
 8000458:	f000 f8be 	bl	80005d8 <rtc_init_seq>
    {
    	/*initialization error*/
    }
	/*Set hour format to 24 hr format using the bit 6, set to 0 */
    /*Set hour format to AM/PM using the bit 6, set to 1 */
    RTC->CR |=CR_FMT;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <rtc_init+0xe4>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <rtc_init+0xe4>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6093      	str	r3, [r2, #8]

	/*Set Asynchronous prescaler*/
    rtc_set_asyc_prescaler(RTC_ASYNCH_PREDIV);
 8000468:	207f      	movs	r0, #127	; 0x7f
 800046a:	f000 f869 	bl	8000540 <rtc_set_asyc_prescaler>
	/*Set Synchronous prescaler*/
    rtc_set_syc_prescaler(RTC_SYNCH_PREDIV);
 800046e:	20f9      	movs	r0, #249	; 0xf9
 8000470:	f000 f87c 	bl	800056c <rtc_set_syc_prescaler>

    /*Set date: Friday 24th, Feb. 2023*/
    rtc_date_config(WEEKDAY_MONDAY, 0x08, MONTH_APRIL, 0x24);
 8000474:	2324      	movs	r3, #36	; 0x24
 8000476:	2204      	movs	r2, #4
 8000478:	2108      	movs	r1, #8
 800047a:	2001      	movs	r0, #1
 800047c:	f000 f814 	bl	80004a8 <rtc_date_config>

    	/*Set time : 11:58:00 FM */
    rtc_time_config(TIME_FORMAT_PM, 0x2, 0x05, 0x00);
 8000480:	2300      	movs	r3, #0
 8000482:	2205      	movs	r2, #5
 8000484:	2102      	movs	r1, #2
 8000486:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800048a:	f000 f833 	bl	80004f4 <rtc_time_config>

	/*Exit initialization mode*/
    exit_init_seq();
 800048e:	f000 f8ee 	bl	800066e <exit_init_seq>
	/*Enable RTC write protection*/
    RTC->WPR = 0xFF;
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <rtc_init+0xe4>)
 8000494:	22ff      	movs	r2, #255	; 0xff
 8000496:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	40007000 	.word	0x40007000
 80004a4:	40002800 	.word	0x40002800

080004a8 <rtc_date_config>:

static void rtc_date_config(uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 80004a8:	b490      	push	{r4, r7}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
 80004b4:	603b      	str	r3, [r7, #0]
	register uint32_t temp = 0U;

	temp = (WeekDay << RTC_DR_WDU_Pos)   | \
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	035a      	lsls	r2, r3, #13
       (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	041b      	lsls	r3, r3, #16
 80004be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	temp = (WeekDay << RTC_DR_WDU_Pos)   | \
 80004c2:	431a      	orrs	r2, r3
       (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	b29b      	uxth	r3, r3
       (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80004ca:	431a      	orrs	r2, r3
       (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	b2db      	uxtb	r3, r3
	temp = (WeekDay << RTC_DR_WDU_Pos)   | \
 80004d0:	ea42 0403 	orr.w	r4, r2, r3
   MODIFY_REG(RTC->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU |
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <rtc_date_config+0x44>)
 80004d6:	685a      	ldr	r2, [r3, #4]
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <rtc_date_config+0x48>)
 80004da:	4013      	ands	r3, r2
 80004dc:	4a03      	ldr	r2, [pc, #12]	; (80004ec <rtc_date_config+0x44>)
 80004de:	4323      	orrs	r3, r4
 80004e0:	6053      	str	r3, [r2, #4]
		   RTC_DR_YT | RTC_DR_YU), temp);
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc90      	pop	{r4, r7}
 80004ea:	4770      	bx	lr
 80004ec:	40002800 	.word	0x40002800
 80004f0:	ff0000c0 	.word	0xff0000c0

080004f4 <rtc_time_config>:

static void rtc_time_config(uint32_t Format12_24, uint32_t Hours, uint32_t Minutes,
		uint32_t Seconds)
{
 80004f4:	b490      	push	{r4, r7}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	603b      	str	r3, [r7, #0]
	register uint32_t temp = 0U;

    temp = Format12_24                                                            | \
(((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	041b      	lsls	r3, r3, #16
 8000506:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
    temp = Format12_24                                                            | \
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	431a      	orrs	r2, r3
(((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	021b      	lsls	r3, r3, #8
 8000512:	b29b      	uxth	r3, r3
(((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000514:	431a      	orrs	r2, r3
(((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	b2db      	uxtb	r3, r3
    temp = Format12_24                                                            | \
 800051a:	ea42 0403 	orr.w	r4, r2, r3

MODIFY_REG(RTC->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU |
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <rtc_time_config+0x48>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8000526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800052a:	4a04      	ldr	r2, [pc, #16]	; (800053c <rtc_time_config+0x48>)
 800052c:	4323      	orrs	r3, r4
 800052e:	6013      	str	r3, [r2, #0]
		RTC_TR_ST | RTC_TR_SU), temp);
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bc90      	pop	{r4, r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40002800 	.word	0x40002800

08000540 <rtc_set_asyc_prescaler>:

static void rtc_set_asyc_prescaler(uint32_t AsynchPrescaler)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
/*see RTC_PRER */
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <rtc_set_asyc_prescaler+0x28>)
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	041b      	lsls	r3, r3, #16
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <rtc_set_asyc_prescaler+0x28>)
 8000556:	4313      	orrs	r3, r2
 8000558:	610b      	str	r3, [r1, #16]
/*this function takes 3, 1st is PRER to be modified, 2nd clear it, 3rd set new value*/
/*shift 16U times to the RTC_PRER, then write the passed-in value from the AsyncPrescaler*/
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40002800 	.word	0x40002800

0800056c <rtc_set_syc_prescaler>:

static void rtc_set_syc_prescaler(uint32_t SynchPrescaler)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
/*see RTC_PRER */
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <rtc_set_syc_prescaler+0x28>)
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800057c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000580:	4904      	ldr	r1, [pc, #16]	; (8000594 <rtc_set_syc_prescaler+0x28>)
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	610b      	str	r3, [r1, #16]
/*this function takes 3, 1st is PRER to be modified, 2nd clear it, 3rd set new value*/
/*No shift required as it starts from bit 0*/
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40002800 	.word	0x40002800

08000598 <rtc_enable_init_mode>:

static void rtc_enable_init_mode(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	/*use rtc_isr*/
	RTC->ISR = RTC_INIT_MASK;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <rtc_enable_init_mode+0x18>)
 800059e:	f04f 32ff 	mov.w	r2, #4294967295
 80005a2:	60da      	str	r2, [r3, #12]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40002800 	.word	0x40002800

080005b4 <rtc_isActiveflag_init>:

static uint32_t rtc_isActiveflag_init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	/**/
	return (READ_BIT(RTC->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <rtc_isActiveflag_init+0x20>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c0:	2b40      	cmp	r3, #64	; 0x40
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40002800 	.word	0x40002800

080005d8 <rtc_init_seq>:


static uint32_t rtc_init_seq(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	/*Set initialization mode (check initialization flag)*/
	rtc_enable_init_mode();
 80005dc:	f7ff ffdc 	bl	8000598 <rtc_enable_init_mode>
	/*Check initialization mode is set*/
	while(rtc_isActiveflag_init() !=1){}
 80005e0:	bf00      	nop
 80005e2:	f7ff ffe7 	bl	80005b4 <rtc_isActiveflag_init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1fa      	bne.n	80005e2 <rtc_init_seq+0xa>
	return 1;
 80005ec:	2301      	movs	r3, #1
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <rtc_exit_init_mode>:

static void rtc_exit_init_mode(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	/*use rtc_isr*/
	RTC->ISR = 0;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <rtc_exit_init_mode+0x14>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	40002800 	.word	0x40002800

0800060c <rtc_clearflag_rs>:

void rtc_clearflag_rs(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) |
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <rtc_clearflag_rs+0x20>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <rtc_clearflag_rs+0x20>)
 800061a:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 800061e:	60d3      	str	r3, [r2, #12]
			(RTC->ISR & RTC_ISR_INIT)));
   /*this function takes 2 arguments*/
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40002800 	.word	0x40002800

08000630 <rtc_isActiveflag_rs>:

static uint32_t rtc_isActiveflag_rs(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	return (READ_BIT(RTC->ISR, RTC_ISR_RSF)==(RTC_ISR_RSF));
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <rtc_isActiveflag_rs+0x20>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	f003 0320 	and.w	r3, r3, #32
 800063c:	2b20      	cmp	r3, #32
 800063e:	bf0c      	ite	eq
 8000640:	2301      	moveq	r3, #1
 8000642:	2300      	movne	r3, #0
 8000644:	b2db      	uxtb	r3, r3
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40002800 	.word	0x40002800

08000654 <wait_for_synchro>:


static uint32_t wait_for_synchro(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/*Clear RSF flag*/
	rtc_clearflag_rs();
 8000658:	f7ff ffd8 	bl	800060c <rtc_clearflag_rs>
	/*wait for registers to be synchronized*/
	while(rtc_isActiveflag_rs() != 1)
 800065c:	bf00      	nop
 800065e:	f7ff ffe7 	bl	8000630 <rtc_isActiveflag_rs>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d1fa      	bne.n	800065e <wait_for_synchro+0xa>
	{

	}
	return 0;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}

0800066e <exit_init_seq>:


static uint32_t exit_init_seq(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
	/*Disable rtc_init_mode*/
	rtc_exit_init_mode();
 8000672:	f7ff ffbf 	bl	80005f4 <rtc_exit_init_mode>
	/*Wait for registers to be synchronized*/
	return (wait_for_synchro());
 8000676:	f7ff ffed 	bl	8000654 <wait_for_synchro>
 800067a:	4603      	mov	r3, r0
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}

08000680 <rtc_convert_bcd2bin>:
{
	return (uint8_t)((((value) / 10U) << 4U) | ((value) % 10U));
}

uint8_t rtc_convert_bcd2bin(uint8_t value)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)(((uint8_t)((value) & (uint8_t)0xF0U) >> (uint8_t)0x4U) *
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
			10U + ((value) & (uint8_t)0x0FU));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	b2db      	uxtb	r3, r3
	return (uint8_t)(((uint8_t)((value) & (uint8_t)0xF0U) >> (uint8_t)0x4U) *
 80006a2:	4413      	add	r3, r2
 80006a4:	b2db      	uxtb	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <rtc_date_get_day>:

uint32_t rtc_date_get_day(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_DT | RTC_DR_DU ))) >> RTC_DR_DU_Pos);
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <rtc_date_get_day+0x18>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40002800 	.word	0x40002800

080006d0 <rtc_date_get_year>:

uint32_t rtc_date_get_year(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_YT | RTC_DR_YU ))) >> RTC_DR_YU_Pos);
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <rtc_date_get_year+0x18>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	b2db      	uxtb	r3, r3

}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40002800 	.word	0x40002800

080006ec <rtc_date_get_month>:

uint32_t rtc_date_get_month(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	return (uint32_t)((READ_BIT(RTC->DR, (RTC_DR_MT | RTC_DR_MU ))) >> RTC_DR_MU_Pos);
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <rtc_date_get_month+0x18>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 031f 	and.w	r3, r3, #31

}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40002800 	.word	0x40002800

08000708 <rtc_date_get_second>:

uint32_t rtc_date_get_second(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	return (uint32_t)((READ_BIT(RTC->TR, (RTC_TR_ST | RTC_TR_SU ))) >> RTC_TR_SU_Pos);
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <rtc_date_get_second+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 037f 	and.w	r3, r3, #127	; 0x7f

}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40002800 	.word	0x40002800

08000724 <rtc_date_get_minute>:

uint32_t rtc_date_get_minute(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	return (uint32_t)((READ_BIT(RTC->TR, (RTC_TR_MNT | RTC_TR_MNU ))) >> RTC_TR_MNU_Pos);
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <rtc_date_get_minute+0x18>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40002800 	.word	0x40002800

08000740 <rtc_date_get_hour>:

uint32_t rtc_date_get_hour(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	return (uint32_t)((READ_BIT(RTC->TR, (RTC_TR_HT | RTC_TR_HU ))) >> RTC_TR_HU_Pos);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <rtc_date_get_hour+0x18>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	f003 033f 	and.w	r3, r3, #63	; 0x3f

}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40002800 	.word	0x40002800

0800075c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e00a      	b.n	8000784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800076e:	f3af 8000 	nop.w
 8000772:	4601      	mov	r1, r0
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	60ba      	str	r2, [r7, #8]
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dbf0      	blt.n	800076e <_read+0x12>
  }

  return len;
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e009      	b.n	80007bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f8e3 	bl	800097c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf1      	blt.n	80007a8 <_write+0x12>
  }
  return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_close>:

int _close(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f6:	605a      	str	r2, [r3, #4]
  return 0;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_isatty>:

int _isatty(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <_sbrk+0x5c>)
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <_sbrk+0x60>)
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x64>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <_sbrk+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d207      	bcs.n	8000878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000868:	f000 fada 	bl	8000e20 <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	220c      	movs	r2, #12
 8000870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	e009      	b.n	800088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <_sbrk+0x64>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20018000 	.word	0x20018000
 8000898:	00000400 	.word	0x00000400
 800089c:	200000bc 	.word	0x200000bc
 80008a0:	20000218 	.word	0x20000218

080008a4 <delay>:
	SysTick-> CTRL = 0;
}

/* delay in second*/
void delay(uint32_t delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 80008ac:	f000 f818 	bl	80008e0 <get_tick>
 80008b0:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d002      	beq.n	80008c4 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
	}
	while((get_tick() - tickstart) < wait){} /*loop stuck here when true*/
 80008c4:	bf00      	nop
 80008c6:	f000 f80b 	bl	80008e0 <get_tick>
 80008ca:	4602      	mov	r2, r0
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d8f7      	bhi.n	80008c6 <delay+0x22>
}
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <get_tick>:
//
//
uint32_t get_tick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <get_tick+0x24>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <get_tick+0x28>)
 80008ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008f0:	b662      	cpsie	i
}
 80008f2:	bf00      	nop
	__enable_irq();
	return g_curr_tick_p;
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <get_tick+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	200000c0 	.word	0x200000c0
 8000908:	200000c4 	.word	0x200000c4

0800090c <tick_increment>:

static void tick_increment(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <tick_increment+0x18>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a03      	ldr	r2, [pc, #12]	; (8000924 <tick_increment+0x18>)
 8000918:	6013      	str	r3, [r2, #0]
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	200000c0 	.word	0x200000c0

08000928 <timebase_init>:
//
void timebase_init(void){
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop

    /* Disable a global interrupt */
	__disable_irq();

	/*load a value according to the clock cycle as we need a second tick from the clock*/
	SysTick->LOAD = ONE_SEC_LOAD-1; /*(count from zero from the system clock)*/
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <timebase_init+0x40>)
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <timebase_init+0x44>)
 8000934:	605a      	str	r2, [r3, #4]

	  /*Clear systick current value register */
	SysTick ->VAL = 0;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <timebase_init+0x40>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
	/*Select an Internal clock source */
	SysTick ->CTRL = CTRL_CLCKSRC;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <timebase_init+0x40>)
 800093e:	2204      	movs	r2, #4
 8000940:	601a      	str	r2, [r3, #0]

	/*Enable an Interrupt */
	SysTick->CTRL |=CTRL_TICKINT;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <timebase_init+0x40>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <timebase_init+0x40>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6013      	str	r3, [r2, #0]

	/*Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <timebase_init+0x40>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <timebase_init+0x40>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800095a:	b662      	cpsie	i
}
 800095c:	bf00      	nop

	/* Enable a global interrupt */
	__enable_irq();

}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000e010 	.word	0xe000e010
 800096c:	003d08ff 	.word	0x003d08ff

08000970 <SysTick_Handler>:
//
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	tick_increment();
 8000974:	f7ff ffca 	bl	800090c <tick_increment>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <__io_putchar>:
//#define TX_PIN 2
//#define RX_PIN 3



int __io_putchar(int ch){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f859 	bl	8000a3c <uart_write>
	//uart2_write(USART2, ch);
	return ch;
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <debug_uart_init>:

void debug_uart_init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=GPIOAEN;   //typo here
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <debug_uart_init+0x9c>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <debug_uart_init+0x9c>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set the mode of PA2 (USART2_TX) to AF mode*/
	GPIOA->MODER &= ~(1U<<4);    //typo here
 80009a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009ae:	f023 0310 	bic.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);    //typo here
 80009b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	6013      	str	r3, [r2, #0]

	/*Set AF type to AF7(UART2_TX)*/
    GPIOA->AFR[0] |=(1U<<8);  //typo here
 80009c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009c8:	6a1b      	ldr	r3, [r3, #32]
 80009ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<9);  //typo here
 80009d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009d8:	6a1b      	ldr	r3, [r3, #32]
 80009da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=(1U<<10);  //typo here
 80009e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009e8:	6a1b      	ldr	r3, [r3, #32]
 80009ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1U<<11);  //typo here
 80009f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009f8:	6a1b      	ldr	r3, [r3, #32]
 80009fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a02:	6213      	str	r3, [r2, #32]
//        GPIOA->AFR[0] |=(1U<<12);  //typo here
//        GPIOA->AFR[0] |=(1U<<13);  //typo here
//        GPIOA->AFR[0] |=(1U<<14);  //typo here
//        GPIOA->AFR[0] &= ~(1U<<15);  //typo here
    /*Enable clock access to UART2EN in APB1ENR*/
    RCC->APB1ENR1 |=	UART2EN;   //typo here
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <debug_uart_init+0x9c>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <debug_uart_init+0x9c>)
 8000a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0e:	6593      	str	r3, [r2, #88]	; 0x58
    //RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock

	/*Configure UART baud rate */
    uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000a10:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <debug_uart_init+0xa0>)
 8000a16:	f000 f83f 	bl	8000a98 <uart_set_baudrate>

	/*Configure transfer direction  (Transmit Enable) */
    USART2->CR1 = CR1_TE; //| CR1_RE/* bit 3*/
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <debug_uart_init+0xa4>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	601a      	str	r2, [r3, #0]

	/*Enable UART Module (USART Enable)*/
    USART2->CR1 |= CR1_UE; /*bit 0*/
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <debug_uart_init+0xa4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <debug_uart_init+0xa4>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	003d0900 	.word	0x003d0900
 8000a38:	40004400 	.word	0x40004400

08000a3c <uart_write>:

static void uart_write(int ch){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/*make sure transmitter data register is empty*/
		while(!(USART2->ISR & ISR_TXE)){}  //typo here
 8000a44:	bf00      	nop
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <uart_write+0x30>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f9      	beq.n	8000a46 <uart_write+0xa>
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);   //typo here
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <uart_write+0x30>)
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400

08000a70 <compute_uart_bd>:
	    /*Write to transmit data register*/
		USART2->TDR = (ch & 0xFF);   //typo here
}

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	085a      	lsrs	r2, r3, #1
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	441a      	add	r2, r3
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a88:	b29b      	uxth	r3, r3
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	USART2-> BRR = compute_uart_bd(periph_clk,baudrate);
 8000aa2:	6839      	ldr	r1, [r7, #0]
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffe3 	bl	8000a70 <compute_uart_bd>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b03      	ldr	r3, [pc, #12]	; (8000abc <uart_set_baudrate+0x24>)
 8000ab0:	60da      	str	r2, [r3, #12]
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400

08000ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aee:	f000 f99d 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fbbd 	bl	8000270 <main>

08000af6 <LoopForever>:

LoopForever:
  b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b04:	08001dcc 	.word	0x08001dcc
  ldr r2, =_sbss
 8000b08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b0c:	20000214 	.word	0x20000214

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <std>:
 8000b14:	2300      	movs	r3, #0
 8000b16:	b510      	push	{r4, lr}
 8000b18:	4604      	mov	r4, r0
 8000b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8000b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b22:	6083      	str	r3, [r0, #8]
 8000b24:	8181      	strh	r1, [r0, #12]
 8000b26:	6643      	str	r3, [r0, #100]	; 0x64
 8000b28:	81c2      	strh	r2, [r0, #14]
 8000b2a:	6183      	str	r3, [r0, #24]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2208      	movs	r2, #8
 8000b30:	305c      	adds	r0, #92	; 0x5c
 8000b32:	f000 f926 	bl	8000d82 <memset>
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <std+0x58>)
 8000b38:	6263      	str	r3, [r4, #36]	; 0x24
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <std+0x5c>)
 8000b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <std+0x60>)
 8000b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <std+0x64>)
 8000b44:	6323      	str	r3, [r4, #48]	; 0x30
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <std+0x68>)
 8000b48:	6224      	str	r4, [r4, #32]
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	d006      	beq.n	8000b5c <std+0x48>
 8000b4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b52:	4294      	cmp	r4, r2
 8000b54:	d002      	beq.n	8000b5c <std+0x48>
 8000b56:	33d0      	adds	r3, #208	; 0xd0
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	d105      	bne.n	8000b68 <std+0x54>
 8000b5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b64:	f000 b986 	b.w	8000e74 <__retarget_lock_init_recursive>
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08000cfd 	.word	0x08000cfd
 8000b70:	08000d1f 	.word	0x08000d1f
 8000b74:	08000d57 	.word	0x08000d57
 8000b78:	08000d7b 	.word	0x08000d7b
 8000b7c:	200000c8 	.word	0x200000c8

08000b80 <stdio_exit_handler>:
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <stdio_exit_handler+0xc>)
 8000b82:	4903      	ldr	r1, [pc, #12]	; (8000b90 <stdio_exit_handler+0x10>)
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <stdio_exit_handler+0x14>)
 8000b86:	f000 b869 	b.w	8000c5c <_fwalk_sglue>
 8000b8a:	bf00      	nop
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	080019d1 	.word	0x080019d1
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <cleanup_stdio>:
 8000b98:	6841      	ldr	r1, [r0, #4]
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <cleanup_stdio+0x34>)
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	b510      	push	{r4, lr}
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	d001      	beq.n	8000ba8 <cleanup_stdio+0x10>
 8000ba4:	f000 ff14 	bl	80019d0 <_fflush_r>
 8000ba8:	68a1      	ldr	r1, [r4, #8]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <cleanup_stdio+0x38>)
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d002      	beq.n	8000bb6 <cleanup_stdio+0x1e>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f000 ff0d 	bl	80019d0 <_fflush_r>
 8000bb6:	68e1      	ldr	r1, [r4, #12]
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <cleanup_stdio+0x3c>)
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d004      	beq.n	8000bc8 <cleanup_stdio+0x30>
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bc4:	f000 bf04 	b.w	80019d0 <_fflush_r>
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000c8 	.word	0x200000c8
 8000bd0:	20000130 	.word	0x20000130
 8000bd4:	20000198 	.word	0x20000198

08000bd8 <global_stdio_init.part.0>:
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <global_stdio_init.part.0+0x30>)
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <global_stdio_init.part.0+0x34>)
 8000bde:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <global_stdio_init.part.0+0x38>)
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	4620      	mov	r0, r4
 8000be4:	2200      	movs	r2, #0
 8000be6:	2104      	movs	r1, #4
 8000be8:	f7ff ff94 	bl	8000b14 <std>
 8000bec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2109      	movs	r1, #9
 8000bf4:	f7ff ff8e 	bl	8000b14 <std>
 8000bf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c02:	2112      	movs	r1, #18
 8000c04:	f7ff bf86 	b.w	8000b14 <std>
 8000c08:	20000200 	.word	0x20000200
 8000c0c:	200000c8 	.word	0x200000c8
 8000c10:	08000b81 	.word	0x08000b81

08000c14 <__sfp_lock_acquire>:
 8000c14:	4801      	ldr	r0, [pc, #4]	; (8000c1c <__sfp_lock_acquire+0x8>)
 8000c16:	f000 b92e 	b.w	8000e76 <__retarget_lock_acquire_recursive>
 8000c1a:	bf00      	nop
 8000c1c:	20000209 	.word	0x20000209

08000c20 <__sfp_lock_release>:
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <__sfp_lock_release+0x8>)
 8000c22:	f000 b929 	b.w	8000e78 <__retarget_lock_release_recursive>
 8000c26:	bf00      	nop
 8000c28:	20000209 	.word	0x20000209

08000c2c <__sinit>:
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fff0 	bl	8000c14 <__sfp_lock_acquire>
 8000c34:	6a23      	ldr	r3, [r4, #32]
 8000c36:	b11b      	cbz	r3, 8000c40 <__sinit+0x14>
 8000c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c3c:	f7ff bff0 	b.w	8000c20 <__sfp_lock_release>
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__sinit+0x28>)
 8000c42:	6223      	str	r3, [r4, #32]
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__sinit+0x2c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f5      	bne.n	8000c38 <__sinit+0xc>
 8000c4c:	f7ff ffc4 	bl	8000bd8 <global_stdio_init.part.0>
 8000c50:	e7f2      	b.n	8000c38 <__sinit+0xc>
 8000c52:	bf00      	nop
 8000c54:	08000b99 	.word	0x08000b99
 8000c58:	20000200 	.word	0x20000200

08000c5c <_fwalk_sglue>:
 8000c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c60:	4607      	mov	r7, r0
 8000c62:	4688      	mov	r8, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	2600      	movs	r6, #0
 8000c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c70:	d505      	bpl.n	8000c7e <_fwalk_sglue+0x22>
 8000c72:	6824      	ldr	r4, [r4, #0]
 8000c74:	2c00      	cmp	r4, #0
 8000c76:	d1f7      	bne.n	8000c68 <_fwalk_sglue+0xc>
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c7e:	89ab      	ldrh	r3, [r5, #12]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d907      	bls.n	8000c94 <_fwalk_sglue+0x38>
 8000c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <_fwalk_sglue+0x38>
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4638      	mov	r0, r7
 8000c90:	47c0      	blx	r8
 8000c92:	4306      	orrs	r6, r0
 8000c94:	3568      	adds	r5, #104	; 0x68
 8000c96:	e7e9      	b.n	8000c6c <_fwalk_sglue+0x10>

08000c98 <iprintf>:
 8000c98:	b40f      	push	{r0, r1, r2, r3}
 8000c9a:	b507      	push	{r0, r1, r2, lr}
 8000c9c:	4906      	ldr	r1, [pc, #24]	; (8000cb8 <iprintf+0x20>)
 8000c9e:	ab04      	add	r3, sp, #16
 8000ca0:	6808      	ldr	r0, [r1, #0]
 8000ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ca6:	6881      	ldr	r1, [r0, #8]
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	f000 fb61 	bl	8001370 <_vfiprintf_r>
 8000cae:	b003      	add	sp, #12
 8000cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr
 8000cb8:	20000058 	.word	0x20000058

08000cbc <siprintf>:
 8000cbc:	b40e      	push	{r1, r2, r3}
 8000cbe:	b500      	push	{lr}
 8000cc0:	b09c      	sub	sp, #112	; 0x70
 8000cc2:	ab1d      	add	r3, sp, #116	; 0x74
 8000cc4:	9002      	str	r0, [sp, #8]
 8000cc6:	9006      	str	r0, [sp, #24]
 8000cc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <siprintf+0x38>)
 8000cce:	9107      	str	r1, [sp, #28]
 8000cd0:	9104      	str	r1, [sp, #16]
 8000cd2:	4909      	ldr	r1, [pc, #36]	; (8000cf8 <siprintf+0x3c>)
 8000cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cd8:	9105      	str	r1, [sp, #20]
 8000cda:	6800      	ldr	r0, [r0, #0]
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	a902      	add	r1, sp, #8
 8000ce0:	f000 fa1e 	bl	8001120 <_svfiprintf_r>
 8000ce4:	9b02      	ldr	r3, [sp, #8]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	b01c      	add	sp, #112	; 0x70
 8000cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cf0:	b003      	add	sp, #12
 8000cf2:	4770      	bx	lr
 8000cf4:	20000058 	.word	0x20000058
 8000cf8:	ffff0208 	.word	0xffff0208

08000cfc <__sread>:
 8000cfc:	b510      	push	{r4, lr}
 8000cfe:	460c      	mov	r4, r1
 8000d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d04:	f000 f868 	bl	8000dd8 <_read_r>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	bfab      	itete	ge
 8000d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8000d10:	181b      	addge	r3, r3, r0
 8000d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d16:	bfac      	ite	ge
 8000d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d1a:	81a3      	strhlt	r3, [r4, #12]
 8000d1c:	bd10      	pop	{r4, pc}

08000d1e <__swrite>:
 8000d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d22:	461f      	mov	r7, r3
 8000d24:	898b      	ldrh	r3, [r1, #12]
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	4605      	mov	r5, r0
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	4616      	mov	r6, r2
 8000d2e:	d505      	bpl.n	8000d3c <__swrite+0x1e>
 8000d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d34:	2302      	movs	r3, #2
 8000d36:	2200      	movs	r2, #0
 8000d38:	f000 f83c 	bl	8000db4 <_lseek_r>
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d46:	81a3      	strh	r3, [r4, #12]
 8000d48:	4632      	mov	r2, r6
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d52:	f000 b853 	b.w	8000dfc <_write_r>

08000d56 <__sseek>:
 8000d56:	b510      	push	{r4, lr}
 8000d58:	460c      	mov	r4, r1
 8000d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5e:	f000 f829 	bl	8000db4 <_lseek_r>
 8000d62:	1c43      	adds	r3, r0, #1
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	bf15      	itete	ne
 8000d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d72:	81a3      	strheq	r3, [r4, #12]
 8000d74:	bf18      	it	ne
 8000d76:	81a3      	strhne	r3, [r4, #12]
 8000d78:	bd10      	pop	{r4, pc}

08000d7a <__sclose>:
 8000d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d7e:	f000 b809 	b.w	8000d94 <_close_r>

08000d82 <memset>:
 8000d82:	4402      	add	r2, r0
 8000d84:	4603      	mov	r3, r0
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d100      	bne.n	8000d8c <memset+0xa>
 8000d8a:	4770      	bx	lr
 8000d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8000d90:	e7f9      	b.n	8000d86 <memset+0x4>
	...

08000d94 <_close_r>:
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	4d06      	ldr	r5, [pc, #24]	; (8000db0 <_close_r+0x1c>)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	602b      	str	r3, [r5, #0]
 8000da0:	f7ff fd15 	bl	80007ce <_close>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_close_r+0x1a>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_close_r+0x1a>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000204 	.word	0x20000204

08000db4 <_lseek_r>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4d07      	ldr	r5, [pc, #28]	; (8000dd4 <_lseek_r+0x20>)
 8000db8:	4604      	mov	r4, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	602a      	str	r2, [r5, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f7ff fd2a 	bl	800081c <_lseek>
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	d102      	bne.n	8000dd2 <_lseek_r+0x1e>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	b103      	cbz	r3, 8000dd2 <_lseek_r+0x1e>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
 8000dd4:	20000204 	.word	0x20000204

08000dd8 <_read_r>:
 8000dd8:	b538      	push	{r3, r4, r5, lr}
 8000dda:	4d07      	ldr	r5, [pc, #28]	; (8000df8 <_read_r+0x20>)
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4608      	mov	r0, r1
 8000de0:	4611      	mov	r1, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	602a      	str	r2, [r5, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	f7ff fcb8 	bl	800075c <_read>
 8000dec:	1c43      	adds	r3, r0, #1
 8000dee:	d102      	bne.n	8000df6 <_read_r+0x1e>
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	b103      	cbz	r3, 8000df6 <_read_r+0x1e>
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	bd38      	pop	{r3, r4, r5, pc}
 8000df8:	20000204 	.word	0x20000204

08000dfc <_write_r>:
 8000dfc:	b538      	push	{r3, r4, r5, lr}
 8000dfe:	4d07      	ldr	r5, [pc, #28]	; (8000e1c <_write_r+0x20>)
 8000e00:	4604      	mov	r4, r0
 8000e02:	4608      	mov	r0, r1
 8000e04:	4611      	mov	r1, r2
 8000e06:	2200      	movs	r2, #0
 8000e08:	602a      	str	r2, [r5, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f7ff fcc3 	bl	8000796 <_write>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	d102      	bne.n	8000e1a <_write_r+0x1e>
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	b103      	cbz	r3, 8000e1a <_write_r+0x1e>
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	20000204 	.word	0x20000204

08000e20 <__errno>:
 8000e20:	4b01      	ldr	r3, [pc, #4]	; (8000e28 <__errno+0x8>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000058 	.word	0x20000058

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	4d0d      	ldr	r5, [pc, #52]	; (8000e64 <__libc_init_array+0x38>)
 8000e30:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e32:	1b64      	subs	r4, r4, r5
 8000e34:	10a4      	asrs	r4, r4, #2
 8000e36:	2600      	movs	r6, #0
 8000e38:	42a6      	cmp	r6, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	4d0b      	ldr	r5, [pc, #44]	; (8000e6c <__libc_init_array+0x40>)
 8000e3e:	4c0c      	ldr	r4, [pc, #48]	; (8000e70 <__libc_init_array+0x44>)
 8000e40:	f000 ff78 	bl	8001d34 <_init>
 8000e44:	1b64      	subs	r4, r4, r5
 8000e46:	10a4      	asrs	r4, r4, #2
 8000e48:	2600      	movs	r6, #0
 8000e4a:	42a6      	cmp	r6, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e54:	4798      	blx	r3
 8000e56:	3601      	adds	r6, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e5e:	4798      	blx	r3
 8000e60:	3601      	adds	r6, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08001dc4 	.word	0x08001dc4
 8000e68:	08001dc4 	.word	0x08001dc4
 8000e6c:	08001dc4 	.word	0x08001dc4
 8000e70:	08001dc8 	.word	0x08001dc8

08000e74 <__retarget_lock_init_recursive>:
 8000e74:	4770      	bx	lr

08000e76 <__retarget_lock_acquire_recursive>:
 8000e76:	4770      	bx	lr

08000e78 <__retarget_lock_release_recursive>:
 8000e78:	4770      	bx	lr
	...

08000e7c <_free_r>:
 8000e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d044      	beq.n	8000f0c <_free_r+0x90>
 8000e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e86:	9001      	str	r0, [sp, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8000e8e:	bfb8      	it	lt
 8000e90:	18e4      	addlt	r4, r4, r3
 8000e92:	f000 f8df 	bl	8001054 <__malloc_lock>
 8000e96:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <_free_r+0x94>)
 8000e98:	9801      	ldr	r0, [sp, #4]
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	b933      	cbnz	r3, 8000eac <_free_r+0x30>
 8000e9e:	6063      	str	r3, [r4, #4]
 8000ea0:	6014      	str	r4, [r2, #0]
 8000ea2:	b003      	add	sp, #12
 8000ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ea8:	f000 b8da 	b.w	8001060 <__malloc_unlock>
 8000eac:	42a3      	cmp	r3, r4
 8000eae:	d908      	bls.n	8000ec2 <_free_r+0x46>
 8000eb0:	6825      	ldr	r5, [r4, #0]
 8000eb2:	1961      	adds	r1, r4, r5
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	bf01      	itttt	eq
 8000eb8:	6819      	ldreq	r1, [r3, #0]
 8000eba:	685b      	ldreq	r3, [r3, #4]
 8000ebc:	1949      	addeq	r1, r1, r5
 8000ebe:	6021      	streq	r1, [r4, #0]
 8000ec0:	e7ed      	b.n	8000e9e <_free_r+0x22>
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	b10b      	cbz	r3, 8000ecc <_free_r+0x50>
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d9fa      	bls.n	8000ec2 <_free_r+0x46>
 8000ecc:	6811      	ldr	r1, [r2, #0]
 8000ece:	1855      	adds	r5, r2, r1
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	d10b      	bne.n	8000eec <_free_r+0x70>
 8000ed4:	6824      	ldr	r4, [r4, #0]
 8000ed6:	4421      	add	r1, r4
 8000ed8:	1854      	adds	r4, r2, r1
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	6011      	str	r1, [r2, #0]
 8000ede:	d1e0      	bne.n	8000ea2 <_free_r+0x26>
 8000ee0:	681c      	ldr	r4, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	6053      	str	r3, [r2, #4]
 8000ee6:	440c      	add	r4, r1
 8000ee8:	6014      	str	r4, [r2, #0]
 8000eea:	e7da      	b.n	8000ea2 <_free_r+0x26>
 8000eec:	d902      	bls.n	8000ef4 <_free_r+0x78>
 8000eee:	230c      	movs	r3, #12
 8000ef0:	6003      	str	r3, [r0, #0]
 8000ef2:	e7d6      	b.n	8000ea2 <_free_r+0x26>
 8000ef4:	6825      	ldr	r5, [r4, #0]
 8000ef6:	1961      	adds	r1, r4, r5
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf04      	itt	eq
 8000efc:	6819      	ldreq	r1, [r3, #0]
 8000efe:	685b      	ldreq	r3, [r3, #4]
 8000f00:	6063      	str	r3, [r4, #4]
 8000f02:	bf04      	itt	eq
 8000f04:	1949      	addeq	r1, r1, r5
 8000f06:	6021      	streq	r1, [r4, #0]
 8000f08:	6054      	str	r4, [r2, #4]
 8000f0a:	e7ca      	b.n	8000ea2 <_free_r+0x26>
 8000f0c:	b003      	add	sp, #12
 8000f0e:	bd30      	pop	{r4, r5, pc}
 8000f10:	2000020c 	.word	0x2000020c

08000f14 <sbrk_aligned>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	4e0e      	ldr	r6, [pc, #56]	; (8000f50 <sbrk_aligned+0x3c>)
 8000f18:	460c      	mov	r4, r1
 8000f1a:	6831      	ldr	r1, [r6, #0]
 8000f1c:	4605      	mov	r5, r0
 8000f1e:	b911      	cbnz	r1, 8000f26 <sbrk_aligned+0x12>
 8000f20:	f000 fe2e 	bl	8001b80 <_sbrk_r>
 8000f24:	6030      	str	r0, [r6, #0]
 8000f26:	4621      	mov	r1, r4
 8000f28:	4628      	mov	r0, r5
 8000f2a:	f000 fe29 	bl	8001b80 <_sbrk_r>
 8000f2e:	1c43      	adds	r3, r0, #1
 8000f30:	d00a      	beq.n	8000f48 <sbrk_aligned+0x34>
 8000f32:	1cc4      	adds	r4, r0, #3
 8000f34:	f024 0403 	bic.w	r4, r4, #3
 8000f38:	42a0      	cmp	r0, r4
 8000f3a:	d007      	beq.n	8000f4c <sbrk_aligned+0x38>
 8000f3c:	1a21      	subs	r1, r4, r0
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f000 fe1e 	bl	8001b80 <_sbrk_r>
 8000f44:	3001      	adds	r0, #1
 8000f46:	d101      	bne.n	8000f4c <sbrk_aligned+0x38>
 8000f48:	f04f 34ff 	mov.w	r4, #4294967295
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	20000210 	.word	0x20000210

08000f54 <_malloc_r>:
 8000f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f58:	1ccd      	adds	r5, r1, #3
 8000f5a:	f025 0503 	bic.w	r5, r5, #3
 8000f5e:	3508      	adds	r5, #8
 8000f60:	2d0c      	cmp	r5, #12
 8000f62:	bf38      	it	cc
 8000f64:	250c      	movcc	r5, #12
 8000f66:	2d00      	cmp	r5, #0
 8000f68:	4607      	mov	r7, r0
 8000f6a:	db01      	blt.n	8000f70 <_malloc_r+0x1c>
 8000f6c:	42a9      	cmp	r1, r5
 8000f6e:	d905      	bls.n	8000f7c <_malloc_r+0x28>
 8000f70:	230c      	movs	r3, #12
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	2600      	movs	r6, #0
 8000f76:	4630      	mov	r0, r6
 8000f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001050 <_malloc_r+0xfc>
 8000f80:	f000 f868 	bl	8001054 <__malloc_lock>
 8000f84:	f8d8 3000 	ldr.w	r3, [r8]
 8000f88:	461c      	mov	r4, r3
 8000f8a:	bb5c      	cbnz	r4, 8000fe4 <_malloc_r+0x90>
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f7ff ffc0 	bl	8000f14 <sbrk_aligned>
 8000f94:	1c43      	adds	r3, r0, #1
 8000f96:	4604      	mov	r4, r0
 8000f98:	d155      	bne.n	8001046 <_malloc_r+0xf2>
 8000f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f9e:	4626      	mov	r6, r4
 8000fa0:	2e00      	cmp	r6, #0
 8000fa2:	d145      	bne.n	8001030 <_malloc_r+0xdc>
 8000fa4:	2c00      	cmp	r4, #0
 8000fa6:	d048      	beq.n	800103a <_malloc_r+0xe6>
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	4631      	mov	r1, r6
 8000fac:	4638      	mov	r0, r7
 8000fae:	eb04 0903 	add.w	r9, r4, r3
 8000fb2:	f000 fde5 	bl	8001b80 <_sbrk_r>
 8000fb6:	4581      	cmp	r9, r0
 8000fb8:	d13f      	bne.n	800103a <_malloc_r+0xe6>
 8000fba:	6821      	ldr	r1, [r4, #0]
 8000fbc:	1a6d      	subs	r5, r5, r1
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f7ff ffa7 	bl	8000f14 <sbrk_aligned>
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	d037      	beq.n	800103a <_malloc_r+0xe6>
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	442b      	add	r3, r5
 8000fce:	6023      	str	r3, [r4, #0]
 8000fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d038      	beq.n	800104a <_malloc_r+0xf6>
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	42a2      	cmp	r2, r4
 8000fdc:	d12b      	bne.n	8001036 <_malloc_r+0xe2>
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e00f      	b.n	8001004 <_malloc_r+0xb0>
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	1b52      	subs	r2, r2, r5
 8000fe8:	d41f      	bmi.n	800102a <_malloc_r+0xd6>
 8000fea:	2a0b      	cmp	r2, #11
 8000fec:	d917      	bls.n	800101e <_malloc_r+0xca>
 8000fee:	1961      	adds	r1, r4, r5
 8000ff0:	42a3      	cmp	r3, r4
 8000ff2:	6025      	str	r5, [r4, #0]
 8000ff4:	bf18      	it	ne
 8000ff6:	6059      	strne	r1, [r3, #4]
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	bf08      	it	eq
 8000ffc:	f8c8 1000 	streq.w	r1, [r8]
 8001000:	5162      	str	r2, [r4, r5]
 8001002:	604b      	str	r3, [r1, #4]
 8001004:	4638      	mov	r0, r7
 8001006:	f104 060b 	add.w	r6, r4, #11
 800100a:	f000 f829 	bl	8001060 <__malloc_unlock>
 800100e:	f026 0607 	bic.w	r6, r6, #7
 8001012:	1d23      	adds	r3, r4, #4
 8001014:	1af2      	subs	r2, r6, r3
 8001016:	d0ae      	beq.n	8000f76 <_malloc_r+0x22>
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	50a3      	str	r3, [r4, r2]
 800101c:	e7ab      	b.n	8000f76 <_malloc_r+0x22>
 800101e:	42a3      	cmp	r3, r4
 8001020:	6862      	ldr	r2, [r4, #4]
 8001022:	d1dd      	bne.n	8000fe0 <_malloc_r+0x8c>
 8001024:	f8c8 2000 	str.w	r2, [r8]
 8001028:	e7ec      	b.n	8001004 <_malloc_r+0xb0>
 800102a:	4623      	mov	r3, r4
 800102c:	6864      	ldr	r4, [r4, #4]
 800102e:	e7ac      	b.n	8000f8a <_malloc_r+0x36>
 8001030:	4634      	mov	r4, r6
 8001032:	6876      	ldr	r6, [r6, #4]
 8001034:	e7b4      	b.n	8000fa0 <_malloc_r+0x4c>
 8001036:	4613      	mov	r3, r2
 8001038:	e7cc      	b.n	8000fd4 <_malloc_r+0x80>
 800103a:	230c      	movs	r3, #12
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4638      	mov	r0, r7
 8001040:	f000 f80e 	bl	8001060 <__malloc_unlock>
 8001044:	e797      	b.n	8000f76 <_malloc_r+0x22>
 8001046:	6025      	str	r5, [r4, #0]
 8001048:	e7dc      	b.n	8001004 <_malloc_r+0xb0>
 800104a:	605b      	str	r3, [r3, #4]
 800104c:	deff      	udf	#255	; 0xff
 800104e:	bf00      	nop
 8001050:	2000020c 	.word	0x2000020c

08001054 <__malloc_lock>:
 8001054:	4801      	ldr	r0, [pc, #4]	; (800105c <__malloc_lock+0x8>)
 8001056:	f7ff bf0e 	b.w	8000e76 <__retarget_lock_acquire_recursive>
 800105a:	bf00      	nop
 800105c:	20000208 	.word	0x20000208

08001060 <__malloc_unlock>:
 8001060:	4801      	ldr	r0, [pc, #4]	; (8001068 <__malloc_unlock+0x8>)
 8001062:	f7ff bf09 	b.w	8000e78 <__retarget_lock_release_recursive>
 8001066:	bf00      	nop
 8001068:	20000208 	.word	0x20000208

0800106c <__ssputs_r>:
 800106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001070:	688e      	ldr	r6, [r1, #8]
 8001072:	461f      	mov	r7, r3
 8001074:	42be      	cmp	r6, r7
 8001076:	680b      	ldr	r3, [r1, #0]
 8001078:	4682      	mov	sl, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4690      	mov	r8, r2
 800107e:	d82c      	bhi.n	80010da <__ssputs_r+0x6e>
 8001080:	898a      	ldrh	r2, [r1, #12]
 8001082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001086:	d026      	beq.n	80010d6 <__ssputs_r+0x6a>
 8001088:	6965      	ldr	r5, [r4, #20]
 800108a:	6909      	ldr	r1, [r1, #16]
 800108c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001090:	eba3 0901 	sub.w	r9, r3, r1
 8001094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001098:	1c7b      	adds	r3, r7, #1
 800109a:	444b      	add	r3, r9
 800109c:	106d      	asrs	r5, r5, #1
 800109e:	429d      	cmp	r5, r3
 80010a0:	bf38      	it	cc
 80010a2:	461d      	movcc	r5, r3
 80010a4:	0553      	lsls	r3, r2, #21
 80010a6:	d527      	bpl.n	80010f8 <__ssputs_r+0x8c>
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff ff53 	bl	8000f54 <_malloc_r>
 80010ae:	4606      	mov	r6, r0
 80010b0:	b360      	cbz	r0, 800110c <__ssputs_r+0xa0>
 80010b2:	6921      	ldr	r1, [r4, #16]
 80010b4:	464a      	mov	r2, r9
 80010b6:	f000 fd73 	bl	8001ba0 <memcpy>
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	6126      	str	r6, [r4, #16]
 80010c8:	6165      	str	r5, [r4, #20]
 80010ca:	444e      	add	r6, r9
 80010cc:	eba5 0509 	sub.w	r5, r5, r9
 80010d0:	6026      	str	r6, [r4, #0]
 80010d2:	60a5      	str	r5, [r4, #8]
 80010d4:	463e      	mov	r6, r7
 80010d6:	42be      	cmp	r6, r7
 80010d8:	d900      	bls.n	80010dc <__ssputs_r+0x70>
 80010da:	463e      	mov	r6, r7
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	4632      	mov	r2, r6
 80010e0:	4641      	mov	r1, r8
 80010e2:	f000 fd33 	bl	8001b4c <memmove>
 80010e6:	68a3      	ldr	r3, [r4, #8]
 80010e8:	1b9b      	subs	r3, r3, r6
 80010ea:	60a3      	str	r3, [r4, #8]
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	4433      	add	r3, r6
 80010f0:	6023      	str	r3, [r4, #0]
 80010f2:	2000      	movs	r0, #0
 80010f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f8:	462a      	mov	r2, r5
 80010fa:	f000 fd5f 	bl	8001bbc <_realloc_r>
 80010fe:	4606      	mov	r6, r0
 8001100:	2800      	cmp	r0, #0
 8001102:	d1e0      	bne.n	80010c6 <__ssputs_r+0x5a>
 8001104:	6921      	ldr	r1, [r4, #16]
 8001106:	4650      	mov	r0, sl
 8001108:	f7ff feb8 	bl	8000e7c <_free_r>
 800110c:	230c      	movs	r3, #12
 800110e:	f8ca 3000 	str.w	r3, [sl]
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001118:	81a3      	strh	r3, [r4, #12]
 800111a:	f04f 30ff 	mov.w	r0, #4294967295
 800111e:	e7e9      	b.n	80010f4 <__ssputs_r+0x88>

08001120 <_svfiprintf_r>:
 8001120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001124:	4698      	mov	r8, r3
 8001126:	898b      	ldrh	r3, [r1, #12]
 8001128:	061b      	lsls	r3, r3, #24
 800112a:	b09d      	sub	sp, #116	; 0x74
 800112c:	4607      	mov	r7, r0
 800112e:	460d      	mov	r5, r1
 8001130:	4614      	mov	r4, r2
 8001132:	d50e      	bpl.n	8001152 <_svfiprintf_r+0x32>
 8001134:	690b      	ldr	r3, [r1, #16]
 8001136:	b963      	cbnz	r3, 8001152 <_svfiprintf_r+0x32>
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	f7ff ff0b 	bl	8000f54 <_malloc_r>
 800113e:	6028      	str	r0, [r5, #0]
 8001140:	6128      	str	r0, [r5, #16]
 8001142:	b920      	cbnz	r0, 800114e <_svfiprintf_r+0x2e>
 8001144:	230c      	movs	r3, #12
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	e0d0      	b.n	80012f0 <_svfiprintf_r+0x1d0>
 800114e:	2340      	movs	r3, #64	; 0x40
 8001150:	616b      	str	r3, [r5, #20]
 8001152:	2300      	movs	r3, #0
 8001154:	9309      	str	r3, [sp, #36]	; 0x24
 8001156:	2320      	movs	r3, #32
 8001158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800115c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001160:	2330      	movs	r3, #48	; 0x30
 8001162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001308 <_svfiprintf_r+0x1e8>
 8001166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800116a:	f04f 0901 	mov.w	r9, #1
 800116e:	4623      	mov	r3, r4
 8001170:	469a      	mov	sl, r3
 8001172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001176:	b10a      	cbz	r2, 800117c <_svfiprintf_r+0x5c>
 8001178:	2a25      	cmp	r2, #37	; 0x25
 800117a:	d1f9      	bne.n	8001170 <_svfiprintf_r+0x50>
 800117c:	ebba 0b04 	subs.w	fp, sl, r4
 8001180:	d00b      	beq.n	800119a <_svfiprintf_r+0x7a>
 8001182:	465b      	mov	r3, fp
 8001184:	4622      	mov	r2, r4
 8001186:	4629      	mov	r1, r5
 8001188:	4638      	mov	r0, r7
 800118a:	f7ff ff6f 	bl	800106c <__ssputs_r>
 800118e:	3001      	adds	r0, #1
 8001190:	f000 80a9 	beq.w	80012e6 <_svfiprintf_r+0x1c6>
 8001194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001196:	445a      	add	r2, fp
 8001198:	9209      	str	r2, [sp, #36]	; 0x24
 800119a:	f89a 3000 	ldrb.w	r3, [sl]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80a1 	beq.w	80012e6 <_svfiprintf_r+0x1c6>
 80011a4:	2300      	movs	r3, #0
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295
 80011aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011ae:	f10a 0a01 	add.w	sl, sl, #1
 80011b2:	9304      	str	r3, [sp, #16]
 80011b4:	9307      	str	r3, [sp, #28]
 80011b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011ba:	931a      	str	r3, [sp, #104]	; 0x68
 80011bc:	4654      	mov	r4, sl
 80011be:	2205      	movs	r2, #5
 80011c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011c4:	4850      	ldr	r0, [pc, #320]	; (8001308 <_svfiprintf_r+0x1e8>)
 80011c6:	f7ff f803 	bl	80001d0 <memchr>
 80011ca:	9a04      	ldr	r2, [sp, #16]
 80011cc:	b9d8      	cbnz	r0, 8001206 <_svfiprintf_r+0xe6>
 80011ce:	06d0      	lsls	r0, r2, #27
 80011d0:	bf44      	itt	mi
 80011d2:	2320      	movmi	r3, #32
 80011d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011d8:	0711      	lsls	r1, r2, #28
 80011da:	bf44      	itt	mi
 80011dc:	232b      	movmi	r3, #43	; 0x2b
 80011de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011e2:	f89a 3000 	ldrb.w	r3, [sl]
 80011e6:	2b2a      	cmp	r3, #42	; 0x2a
 80011e8:	d015      	beq.n	8001216 <_svfiprintf_r+0xf6>
 80011ea:	9a07      	ldr	r2, [sp, #28]
 80011ec:	4654      	mov	r4, sl
 80011ee:	2000      	movs	r0, #0
 80011f0:	f04f 0c0a 	mov.w	ip, #10
 80011f4:	4621      	mov	r1, r4
 80011f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011fa:	3b30      	subs	r3, #48	; 0x30
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d94d      	bls.n	800129c <_svfiprintf_r+0x17c>
 8001200:	b1b0      	cbz	r0, 8001230 <_svfiprintf_r+0x110>
 8001202:	9207      	str	r2, [sp, #28]
 8001204:	e014      	b.n	8001230 <_svfiprintf_r+0x110>
 8001206:	eba0 0308 	sub.w	r3, r0, r8
 800120a:	fa09 f303 	lsl.w	r3, r9, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	9304      	str	r3, [sp, #16]
 8001212:	46a2      	mov	sl, r4
 8001214:	e7d2      	b.n	80011bc <_svfiprintf_r+0x9c>
 8001216:	9b03      	ldr	r3, [sp, #12]
 8001218:	1d19      	adds	r1, r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	9103      	str	r1, [sp, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	bfbb      	ittet	lt
 8001222:	425b      	neglt	r3, r3
 8001224:	f042 0202 	orrlt.w	r2, r2, #2
 8001228:	9307      	strge	r3, [sp, #28]
 800122a:	9307      	strlt	r3, [sp, #28]
 800122c:	bfb8      	it	lt
 800122e:	9204      	strlt	r2, [sp, #16]
 8001230:	7823      	ldrb	r3, [r4, #0]
 8001232:	2b2e      	cmp	r3, #46	; 0x2e
 8001234:	d10c      	bne.n	8001250 <_svfiprintf_r+0x130>
 8001236:	7863      	ldrb	r3, [r4, #1]
 8001238:	2b2a      	cmp	r3, #42	; 0x2a
 800123a:	d134      	bne.n	80012a6 <_svfiprintf_r+0x186>
 800123c:	9b03      	ldr	r3, [sp, #12]
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bfb8      	it	lt
 8001248:	f04f 33ff 	movlt.w	r3, #4294967295
 800124c:	3402      	adds	r4, #2
 800124e:	9305      	str	r3, [sp, #20]
 8001250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001318 <_svfiprintf_r+0x1f8>
 8001254:	7821      	ldrb	r1, [r4, #0]
 8001256:	2203      	movs	r2, #3
 8001258:	4650      	mov	r0, sl
 800125a:	f7fe ffb9 	bl	80001d0 <memchr>
 800125e:	b138      	cbz	r0, 8001270 <_svfiprintf_r+0x150>
 8001260:	9b04      	ldr	r3, [sp, #16]
 8001262:	eba0 000a 	sub.w	r0, r0, sl
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	4082      	lsls	r2, r0
 800126a:	4313      	orrs	r3, r2
 800126c:	3401      	adds	r4, #1
 800126e:	9304      	str	r3, [sp, #16]
 8001270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001274:	4825      	ldr	r0, [pc, #148]	; (800130c <_svfiprintf_r+0x1ec>)
 8001276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800127a:	2206      	movs	r2, #6
 800127c:	f7fe ffa8 	bl	80001d0 <memchr>
 8001280:	2800      	cmp	r0, #0
 8001282:	d038      	beq.n	80012f6 <_svfiprintf_r+0x1d6>
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <_svfiprintf_r+0x1f0>)
 8001286:	bb1b      	cbnz	r3, 80012d0 <_svfiprintf_r+0x1b0>
 8001288:	9b03      	ldr	r3, [sp, #12]
 800128a:	3307      	adds	r3, #7
 800128c:	f023 0307 	bic.w	r3, r3, #7
 8001290:	3308      	adds	r3, #8
 8001292:	9303      	str	r3, [sp, #12]
 8001294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001296:	4433      	add	r3, r6
 8001298:	9309      	str	r3, [sp, #36]	; 0x24
 800129a:	e768      	b.n	800116e <_svfiprintf_r+0x4e>
 800129c:	fb0c 3202 	mla	r2, ip, r2, r3
 80012a0:	460c      	mov	r4, r1
 80012a2:	2001      	movs	r0, #1
 80012a4:	e7a6      	b.n	80011f4 <_svfiprintf_r+0xd4>
 80012a6:	2300      	movs	r3, #0
 80012a8:	3401      	adds	r4, #1
 80012aa:	9305      	str	r3, [sp, #20]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 0c0a 	mov.w	ip, #10
 80012b2:	4620      	mov	r0, r4
 80012b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012b8:	3a30      	subs	r2, #48	; 0x30
 80012ba:	2a09      	cmp	r2, #9
 80012bc:	d903      	bls.n	80012c6 <_svfiprintf_r+0x1a6>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0c6      	beq.n	8001250 <_svfiprintf_r+0x130>
 80012c2:	9105      	str	r1, [sp, #20]
 80012c4:	e7c4      	b.n	8001250 <_svfiprintf_r+0x130>
 80012c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80012ca:	4604      	mov	r4, r0
 80012cc:	2301      	movs	r3, #1
 80012ce:	e7f0      	b.n	80012b2 <_svfiprintf_r+0x192>
 80012d0:	ab03      	add	r3, sp, #12
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	462a      	mov	r2, r5
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <_svfiprintf_r+0x1f4>)
 80012d8:	a904      	add	r1, sp, #16
 80012da:	4638      	mov	r0, r7
 80012dc:	f3af 8000 	nop.w
 80012e0:	1c42      	adds	r2, r0, #1
 80012e2:	4606      	mov	r6, r0
 80012e4:	d1d6      	bne.n	8001294 <_svfiprintf_r+0x174>
 80012e6:	89ab      	ldrh	r3, [r5, #12]
 80012e8:	065b      	lsls	r3, r3, #25
 80012ea:	f53f af2d 	bmi.w	8001148 <_svfiprintf_r+0x28>
 80012ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012f0:	b01d      	add	sp, #116	; 0x74
 80012f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f6:	ab03      	add	r3, sp, #12
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	462a      	mov	r2, r5
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <_svfiprintf_r+0x1f4>)
 80012fe:	a904      	add	r1, sp, #16
 8001300:	4638      	mov	r0, r7
 8001302:	f000 f9bd 	bl	8001680 <_printf_i>
 8001306:	e7eb      	b.n	80012e0 <_svfiprintf_r+0x1c0>
 8001308:	08001d90 	.word	0x08001d90
 800130c:	08001d9a 	.word	0x08001d9a
 8001310:	00000000 	.word	0x00000000
 8001314:	0800106d 	.word	0x0800106d
 8001318:	08001d96 	.word	0x08001d96

0800131c <__sfputc_r>:
 800131c:	6893      	ldr	r3, [r2, #8]
 800131e:	3b01      	subs	r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	b410      	push	{r4}
 8001324:	6093      	str	r3, [r2, #8]
 8001326:	da08      	bge.n	800133a <__sfputc_r+0x1e>
 8001328:	6994      	ldr	r4, [r2, #24]
 800132a:	42a3      	cmp	r3, r4
 800132c:	db01      	blt.n	8001332 <__sfputc_r+0x16>
 800132e:	290a      	cmp	r1, #10
 8001330:	d103      	bne.n	800133a <__sfputc_r+0x1e>
 8001332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001336:	f000 bb73 	b.w	8001a20 <__swbuf_r>
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	1c58      	adds	r0, r3, #1
 800133e:	6010      	str	r0, [r2, #0]
 8001340:	7019      	strb	r1, [r3, #0]
 8001342:	4608      	mov	r0, r1
 8001344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001348:	4770      	bx	lr

0800134a <__sfputs_r>:
 800134a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134c:	4606      	mov	r6, r0
 800134e:	460f      	mov	r7, r1
 8001350:	4614      	mov	r4, r2
 8001352:	18d5      	adds	r5, r2, r3
 8001354:	42ac      	cmp	r4, r5
 8001356:	d101      	bne.n	800135c <__sfputs_r+0x12>
 8001358:	2000      	movs	r0, #0
 800135a:	e007      	b.n	800136c <__sfputs_r+0x22>
 800135c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001360:	463a      	mov	r2, r7
 8001362:	4630      	mov	r0, r6
 8001364:	f7ff ffda 	bl	800131c <__sfputc_r>
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	d1f3      	bne.n	8001354 <__sfputs_r+0xa>
 800136c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001370 <_vfiprintf_r>:
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001374:	460d      	mov	r5, r1
 8001376:	b09d      	sub	sp, #116	; 0x74
 8001378:	4614      	mov	r4, r2
 800137a:	4698      	mov	r8, r3
 800137c:	4606      	mov	r6, r0
 800137e:	b118      	cbz	r0, 8001388 <_vfiprintf_r+0x18>
 8001380:	6a03      	ldr	r3, [r0, #32]
 8001382:	b90b      	cbnz	r3, 8001388 <_vfiprintf_r+0x18>
 8001384:	f7ff fc52 	bl	8000c2c <__sinit>
 8001388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800138a:	07d9      	lsls	r1, r3, #31
 800138c:	d405      	bmi.n	800139a <_vfiprintf_r+0x2a>
 800138e:	89ab      	ldrh	r3, [r5, #12]
 8001390:	059a      	lsls	r2, r3, #22
 8001392:	d402      	bmi.n	800139a <_vfiprintf_r+0x2a>
 8001394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001396:	f7ff fd6e 	bl	8000e76 <__retarget_lock_acquire_recursive>
 800139a:	89ab      	ldrh	r3, [r5, #12]
 800139c:	071b      	lsls	r3, r3, #28
 800139e:	d501      	bpl.n	80013a4 <_vfiprintf_r+0x34>
 80013a0:	692b      	ldr	r3, [r5, #16]
 80013a2:	b99b      	cbnz	r3, 80013cc <_vfiprintf_r+0x5c>
 80013a4:	4629      	mov	r1, r5
 80013a6:	4630      	mov	r0, r6
 80013a8:	f000 fb78 	bl	8001a9c <__swsetup_r>
 80013ac:	b170      	cbz	r0, 80013cc <_vfiprintf_r+0x5c>
 80013ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013b0:	07dc      	lsls	r4, r3, #31
 80013b2:	d504      	bpl.n	80013be <_vfiprintf_r+0x4e>
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	b01d      	add	sp, #116	; 0x74
 80013ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013be:	89ab      	ldrh	r3, [r5, #12]
 80013c0:	0598      	lsls	r0, r3, #22
 80013c2:	d4f7      	bmi.n	80013b4 <_vfiprintf_r+0x44>
 80013c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013c6:	f7ff fd57 	bl	8000e78 <__retarget_lock_release_recursive>
 80013ca:	e7f3      	b.n	80013b4 <_vfiprintf_r+0x44>
 80013cc:	2300      	movs	r3, #0
 80013ce:	9309      	str	r3, [sp, #36]	; 0x24
 80013d0:	2320      	movs	r3, #32
 80013d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80013da:	2330      	movs	r3, #48	; 0x30
 80013dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001590 <_vfiprintf_r+0x220>
 80013e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013e4:	f04f 0901 	mov.w	r9, #1
 80013e8:	4623      	mov	r3, r4
 80013ea:	469a      	mov	sl, r3
 80013ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013f0:	b10a      	cbz	r2, 80013f6 <_vfiprintf_r+0x86>
 80013f2:	2a25      	cmp	r2, #37	; 0x25
 80013f4:	d1f9      	bne.n	80013ea <_vfiprintf_r+0x7a>
 80013f6:	ebba 0b04 	subs.w	fp, sl, r4
 80013fa:	d00b      	beq.n	8001414 <_vfiprintf_r+0xa4>
 80013fc:	465b      	mov	r3, fp
 80013fe:	4622      	mov	r2, r4
 8001400:	4629      	mov	r1, r5
 8001402:	4630      	mov	r0, r6
 8001404:	f7ff ffa1 	bl	800134a <__sfputs_r>
 8001408:	3001      	adds	r0, #1
 800140a:	f000 80a9 	beq.w	8001560 <_vfiprintf_r+0x1f0>
 800140e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001410:	445a      	add	r2, fp
 8001412:	9209      	str	r2, [sp, #36]	; 0x24
 8001414:	f89a 3000 	ldrb.w	r3, [sl]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a1 	beq.w	8001560 <_vfiprintf_r+0x1f0>
 800141e:	2300      	movs	r3, #0
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001428:	f10a 0a01 	add.w	sl, sl, #1
 800142c:	9304      	str	r3, [sp, #16]
 800142e:	9307      	str	r3, [sp, #28]
 8001430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001434:	931a      	str	r3, [sp, #104]	; 0x68
 8001436:	4654      	mov	r4, sl
 8001438:	2205      	movs	r2, #5
 800143a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800143e:	4854      	ldr	r0, [pc, #336]	; (8001590 <_vfiprintf_r+0x220>)
 8001440:	f7fe fec6 	bl	80001d0 <memchr>
 8001444:	9a04      	ldr	r2, [sp, #16]
 8001446:	b9d8      	cbnz	r0, 8001480 <_vfiprintf_r+0x110>
 8001448:	06d1      	lsls	r1, r2, #27
 800144a:	bf44      	itt	mi
 800144c:	2320      	movmi	r3, #32
 800144e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001452:	0713      	lsls	r3, r2, #28
 8001454:	bf44      	itt	mi
 8001456:	232b      	movmi	r3, #43	; 0x2b
 8001458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800145c:	f89a 3000 	ldrb.w	r3, [sl]
 8001460:	2b2a      	cmp	r3, #42	; 0x2a
 8001462:	d015      	beq.n	8001490 <_vfiprintf_r+0x120>
 8001464:	9a07      	ldr	r2, [sp, #28]
 8001466:	4654      	mov	r4, sl
 8001468:	2000      	movs	r0, #0
 800146a:	f04f 0c0a 	mov.w	ip, #10
 800146e:	4621      	mov	r1, r4
 8001470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001474:	3b30      	subs	r3, #48	; 0x30
 8001476:	2b09      	cmp	r3, #9
 8001478:	d94d      	bls.n	8001516 <_vfiprintf_r+0x1a6>
 800147a:	b1b0      	cbz	r0, 80014aa <_vfiprintf_r+0x13a>
 800147c:	9207      	str	r2, [sp, #28]
 800147e:	e014      	b.n	80014aa <_vfiprintf_r+0x13a>
 8001480:	eba0 0308 	sub.w	r3, r0, r8
 8001484:	fa09 f303 	lsl.w	r3, r9, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	9304      	str	r3, [sp, #16]
 800148c:	46a2      	mov	sl, r4
 800148e:	e7d2      	b.n	8001436 <_vfiprintf_r+0xc6>
 8001490:	9b03      	ldr	r3, [sp, #12]
 8001492:	1d19      	adds	r1, r3, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	9103      	str	r1, [sp, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	bfbb      	ittet	lt
 800149c:	425b      	neglt	r3, r3
 800149e:	f042 0202 	orrlt.w	r2, r2, #2
 80014a2:	9307      	strge	r3, [sp, #28]
 80014a4:	9307      	strlt	r3, [sp, #28]
 80014a6:	bfb8      	it	lt
 80014a8:	9204      	strlt	r2, [sp, #16]
 80014aa:	7823      	ldrb	r3, [r4, #0]
 80014ac:	2b2e      	cmp	r3, #46	; 0x2e
 80014ae:	d10c      	bne.n	80014ca <_vfiprintf_r+0x15a>
 80014b0:	7863      	ldrb	r3, [r4, #1]
 80014b2:	2b2a      	cmp	r3, #42	; 0x2a
 80014b4:	d134      	bne.n	8001520 <_vfiprintf_r+0x1b0>
 80014b6:	9b03      	ldr	r3, [sp, #12]
 80014b8:	1d1a      	adds	r2, r3, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	9203      	str	r2, [sp, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bfb8      	it	lt
 80014c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80014c6:	3402      	adds	r4, #2
 80014c8:	9305      	str	r3, [sp, #20]
 80014ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80015a0 <_vfiprintf_r+0x230>
 80014ce:	7821      	ldrb	r1, [r4, #0]
 80014d0:	2203      	movs	r2, #3
 80014d2:	4650      	mov	r0, sl
 80014d4:	f7fe fe7c 	bl	80001d0 <memchr>
 80014d8:	b138      	cbz	r0, 80014ea <_vfiprintf_r+0x17a>
 80014da:	9b04      	ldr	r3, [sp, #16]
 80014dc:	eba0 000a 	sub.w	r0, r0, sl
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	4082      	lsls	r2, r0
 80014e4:	4313      	orrs	r3, r2
 80014e6:	3401      	adds	r4, #1
 80014e8:	9304      	str	r3, [sp, #16]
 80014ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ee:	4829      	ldr	r0, [pc, #164]	; (8001594 <_vfiprintf_r+0x224>)
 80014f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014f4:	2206      	movs	r2, #6
 80014f6:	f7fe fe6b 	bl	80001d0 <memchr>
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d03f      	beq.n	800157e <_vfiprintf_r+0x20e>
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <_vfiprintf_r+0x228>)
 8001500:	bb1b      	cbnz	r3, 800154a <_vfiprintf_r+0x1da>
 8001502:	9b03      	ldr	r3, [sp, #12]
 8001504:	3307      	adds	r3, #7
 8001506:	f023 0307 	bic.w	r3, r3, #7
 800150a:	3308      	adds	r3, #8
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001510:	443b      	add	r3, r7
 8001512:	9309      	str	r3, [sp, #36]	; 0x24
 8001514:	e768      	b.n	80013e8 <_vfiprintf_r+0x78>
 8001516:	fb0c 3202 	mla	r2, ip, r2, r3
 800151a:	460c      	mov	r4, r1
 800151c:	2001      	movs	r0, #1
 800151e:	e7a6      	b.n	800146e <_vfiprintf_r+0xfe>
 8001520:	2300      	movs	r3, #0
 8001522:	3401      	adds	r4, #1
 8001524:	9305      	str	r3, [sp, #20]
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 0c0a 	mov.w	ip, #10
 800152c:	4620      	mov	r0, r4
 800152e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001532:	3a30      	subs	r2, #48	; 0x30
 8001534:	2a09      	cmp	r2, #9
 8001536:	d903      	bls.n	8001540 <_vfiprintf_r+0x1d0>
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0c6      	beq.n	80014ca <_vfiprintf_r+0x15a>
 800153c:	9105      	str	r1, [sp, #20]
 800153e:	e7c4      	b.n	80014ca <_vfiprintf_r+0x15a>
 8001540:	fb0c 2101 	mla	r1, ip, r1, r2
 8001544:	4604      	mov	r4, r0
 8001546:	2301      	movs	r3, #1
 8001548:	e7f0      	b.n	800152c <_vfiprintf_r+0x1bc>
 800154a:	ab03      	add	r3, sp, #12
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	462a      	mov	r2, r5
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <_vfiprintf_r+0x22c>)
 8001552:	a904      	add	r1, sp, #16
 8001554:	4630      	mov	r0, r6
 8001556:	f3af 8000 	nop.w
 800155a:	4607      	mov	r7, r0
 800155c:	1c78      	adds	r0, r7, #1
 800155e:	d1d6      	bne.n	800150e <_vfiprintf_r+0x19e>
 8001560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001562:	07d9      	lsls	r1, r3, #31
 8001564:	d405      	bmi.n	8001572 <_vfiprintf_r+0x202>
 8001566:	89ab      	ldrh	r3, [r5, #12]
 8001568:	059a      	lsls	r2, r3, #22
 800156a:	d402      	bmi.n	8001572 <_vfiprintf_r+0x202>
 800156c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800156e:	f7ff fc83 	bl	8000e78 <__retarget_lock_release_recursive>
 8001572:	89ab      	ldrh	r3, [r5, #12]
 8001574:	065b      	lsls	r3, r3, #25
 8001576:	f53f af1d 	bmi.w	80013b4 <_vfiprintf_r+0x44>
 800157a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800157c:	e71c      	b.n	80013b8 <_vfiprintf_r+0x48>
 800157e:	ab03      	add	r3, sp, #12
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	462a      	mov	r2, r5
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <_vfiprintf_r+0x22c>)
 8001586:	a904      	add	r1, sp, #16
 8001588:	4630      	mov	r0, r6
 800158a:	f000 f879 	bl	8001680 <_printf_i>
 800158e:	e7e4      	b.n	800155a <_vfiprintf_r+0x1ea>
 8001590:	08001d90 	.word	0x08001d90
 8001594:	08001d9a 	.word	0x08001d9a
 8001598:	00000000 	.word	0x00000000
 800159c:	0800134b 	.word	0x0800134b
 80015a0:	08001d96 	.word	0x08001d96

080015a4 <_printf_common>:
 80015a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015a8:	4616      	mov	r6, r2
 80015aa:	4699      	mov	r9, r3
 80015ac:	688a      	ldr	r2, [r1, #8]
 80015ae:	690b      	ldr	r3, [r1, #16]
 80015b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	bfb8      	it	lt
 80015b8:	4613      	movlt	r3, r2
 80015ba:	6033      	str	r3, [r6, #0]
 80015bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015c0:	4607      	mov	r7, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	b10a      	cbz	r2, 80015ca <_printf_common+0x26>
 80015c6:	3301      	adds	r3, #1
 80015c8:	6033      	str	r3, [r6, #0]
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	0699      	lsls	r1, r3, #26
 80015ce:	bf42      	ittt	mi
 80015d0:	6833      	ldrmi	r3, [r6, #0]
 80015d2:	3302      	addmi	r3, #2
 80015d4:	6033      	strmi	r3, [r6, #0]
 80015d6:	6825      	ldr	r5, [r4, #0]
 80015d8:	f015 0506 	ands.w	r5, r5, #6
 80015dc:	d106      	bne.n	80015ec <_printf_common+0x48>
 80015de:	f104 0a19 	add.w	sl, r4, #25
 80015e2:	68e3      	ldr	r3, [r4, #12]
 80015e4:	6832      	ldr	r2, [r6, #0]
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	42ab      	cmp	r3, r5
 80015ea:	dc26      	bgt.n	800163a <_printf_common+0x96>
 80015ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015f0:	1e13      	subs	r3, r2, #0
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	bf18      	it	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	0692      	lsls	r2, r2, #26
 80015fa:	d42b      	bmi.n	8001654 <_printf_common+0xb0>
 80015fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001600:	4649      	mov	r1, r9
 8001602:	4638      	mov	r0, r7
 8001604:	47c0      	blx	r8
 8001606:	3001      	adds	r0, #1
 8001608:	d01e      	beq.n	8001648 <_printf_common+0xa4>
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	f003 0306 	and.w	r3, r3, #6
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf02      	ittt	eq
 8001616:	68e5      	ldreq	r5, [r4, #12]
 8001618:	6833      	ldreq	r3, [r6, #0]
 800161a:	1aed      	subeq	r5, r5, r3
 800161c:	68a3      	ldr	r3, [r4, #8]
 800161e:	bf0c      	ite	eq
 8001620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001624:	2500      	movne	r5, #0
 8001626:	4293      	cmp	r3, r2
 8001628:	bfc4      	itt	gt
 800162a:	1a9b      	subgt	r3, r3, r2
 800162c:	18ed      	addgt	r5, r5, r3
 800162e:	2600      	movs	r6, #0
 8001630:	341a      	adds	r4, #26
 8001632:	42b5      	cmp	r5, r6
 8001634:	d11a      	bne.n	800166c <_printf_common+0xc8>
 8001636:	2000      	movs	r0, #0
 8001638:	e008      	b.n	800164c <_printf_common+0xa8>
 800163a:	2301      	movs	r3, #1
 800163c:	4652      	mov	r2, sl
 800163e:	4649      	mov	r1, r9
 8001640:	4638      	mov	r0, r7
 8001642:	47c0      	blx	r8
 8001644:	3001      	adds	r0, #1
 8001646:	d103      	bne.n	8001650 <_printf_common+0xac>
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001650:	3501      	adds	r5, #1
 8001652:	e7c6      	b.n	80015e2 <_printf_common+0x3e>
 8001654:	18e1      	adds	r1, r4, r3
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	2030      	movs	r0, #48	; 0x30
 800165a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800165e:	4422      	add	r2, r4
 8001660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001668:	3302      	adds	r3, #2
 800166a:	e7c7      	b.n	80015fc <_printf_common+0x58>
 800166c:	2301      	movs	r3, #1
 800166e:	4622      	mov	r2, r4
 8001670:	4649      	mov	r1, r9
 8001672:	4638      	mov	r0, r7
 8001674:	47c0      	blx	r8
 8001676:	3001      	adds	r0, #1
 8001678:	d0e6      	beq.n	8001648 <_printf_common+0xa4>
 800167a:	3601      	adds	r6, #1
 800167c:	e7d9      	b.n	8001632 <_printf_common+0x8e>
	...

08001680 <_printf_i>:
 8001680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001684:	7e0f      	ldrb	r7, [r1, #24]
 8001686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001688:	2f78      	cmp	r7, #120	; 0x78
 800168a:	4691      	mov	r9, r2
 800168c:	4680      	mov	r8, r0
 800168e:	460c      	mov	r4, r1
 8001690:	469a      	mov	sl, r3
 8001692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001696:	d807      	bhi.n	80016a8 <_printf_i+0x28>
 8001698:	2f62      	cmp	r7, #98	; 0x62
 800169a:	d80a      	bhi.n	80016b2 <_printf_i+0x32>
 800169c:	2f00      	cmp	r7, #0
 800169e:	f000 80d4 	beq.w	800184a <_printf_i+0x1ca>
 80016a2:	2f58      	cmp	r7, #88	; 0x58
 80016a4:	f000 80c0 	beq.w	8001828 <_printf_i+0x1a8>
 80016a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016b0:	e03a      	b.n	8001728 <_printf_i+0xa8>
 80016b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016b6:	2b15      	cmp	r3, #21
 80016b8:	d8f6      	bhi.n	80016a8 <_printf_i+0x28>
 80016ba:	a101      	add	r1, pc, #4	; (adr r1, 80016c0 <_printf_i+0x40>)
 80016bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016c0:	08001719 	.word	0x08001719
 80016c4:	0800172d 	.word	0x0800172d
 80016c8:	080016a9 	.word	0x080016a9
 80016cc:	080016a9 	.word	0x080016a9
 80016d0:	080016a9 	.word	0x080016a9
 80016d4:	080016a9 	.word	0x080016a9
 80016d8:	0800172d 	.word	0x0800172d
 80016dc:	080016a9 	.word	0x080016a9
 80016e0:	080016a9 	.word	0x080016a9
 80016e4:	080016a9 	.word	0x080016a9
 80016e8:	080016a9 	.word	0x080016a9
 80016ec:	08001831 	.word	0x08001831
 80016f0:	08001759 	.word	0x08001759
 80016f4:	080017eb 	.word	0x080017eb
 80016f8:	080016a9 	.word	0x080016a9
 80016fc:	080016a9 	.word	0x080016a9
 8001700:	08001853 	.word	0x08001853
 8001704:	080016a9 	.word	0x080016a9
 8001708:	08001759 	.word	0x08001759
 800170c:	080016a9 	.word	0x080016a9
 8001710:	080016a9 	.word	0x080016a9
 8001714:	080017f3 	.word	0x080017f3
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	1d1a      	adds	r2, r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	602a      	str	r2, [r5, #0]
 8001720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001728:	2301      	movs	r3, #1
 800172a:	e09f      	b.n	800186c <_printf_i+0x1ec>
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	0607      	lsls	r7, r0, #24
 8001732:	f103 0104 	add.w	r1, r3, #4
 8001736:	6029      	str	r1, [r5, #0]
 8001738:	d501      	bpl.n	800173e <_printf_i+0xbe>
 800173a:	681e      	ldr	r6, [r3, #0]
 800173c:	e003      	b.n	8001746 <_printf_i+0xc6>
 800173e:	0646      	lsls	r6, r0, #25
 8001740:	d5fb      	bpl.n	800173a <_printf_i+0xba>
 8001742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001746:	2e00      	cmp	r6, #0
 8001748:	da03      	bge.n	8001752 <_printf_i+0xd2>
 800174a:	232d      	movs	r3, #45	; 0x2d
 800174c:	4276      	negs	r6, r6
 800174e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001752:	485a      	ldr	r0, [pc, #360]	; (80018bc <_printf_i+0x23c>)
 8001754:	230a      	movs	r3, #10
 8001756:	e012      	b.n	800177e <_printf_i+0xfe>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	1d19      	adds	r1, r3, #4
 800175e:	6029      	str	r1, [r5, #0]
 8001760:	0605      	lsls	r5, r0, #24
 8001762:	d501      	bpl.n	8001768 <_printf_i+0xe8>
 8001764:	681e      	ldr	r6, [r3, #0]
 8001766:	e002      	b.n	800176e <_printf_i+0xee>
 8001768:	0641      	lsls	r1, r0, #25
 800176a:	d5fb      	bpl.n	8001764 <_printf_i+0xe4>
 800176c:	881e      	ldrh	r6, [r3, #0]
 800176e:	4853      	ldr	r0, [pc, #332]	; (80018bc <_printf_i+0x23c>)
 8001770:	2f6f      	cmp	r7, #111	; 0x6f
 8001772:	bf0c      	ite	eq
 8001774:	2308      	moveq	r3, #8
 8001776:	230a      	movne	r3, #10
 8001778:	2100      	movs	r1, #0
 800177a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800177e:	6865      	ldr	r5, [r4, #4]
 8001780:	60a5      	str	r5, [r4, #8]
 8001782:	2d00      	cmp	r5, #0
 8001784:	bfa2      	ittt	ge
 8001786:	6821      	ldrge	r1, [r4, #0]
 8001788:	f021 0104 	bicge.w	r1, r1, #4
 800178c:	6021      	strge	r1, [r4, #0]
 800178e:	b90e      	cbnz	r6, 8001794 <_printf_i+0x114>
 8001790:	2d00      	cmp	r5, #0
 8001792:	d04b      	beq.n	800182c <_printf_i+0x1ac>
 8001794:	4615      	mov	r5, r2
 8001796:	fbb6 f1f3 	udiv	r1, r6, r3
 800179a:	fb03 6711 	mls	r7, r3, r1, r6
 800179e:	5dc7      	ldrb	r7, [r0, r7]
 80017a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017a4:	4637      	mov	r7, r6
 80017a6:	42bb      	cmp	r3, r7
 80017a8:	460e      	mov	r6, r1
 80017aa:	d9f4      	bls.n	8001796 <_printf_i+0x116>
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d10b      	bne.n	80017c8 <_printf_i+0x148>
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	07de      	lsls	r6, r3, #31
 80017b4:	d508      	bpl.n	80017c8 <_printf_i+0x148>
 80017b6:	6923      	ldr	r3, [r4, #16]
 80017b8:	6861      	ldr	r1, [r4, #4]
 80017ba:	4299      	cmp	r1, r3
 80017bc:	bfde      	ittt	le
 80017be:	2330      	movle	r3, #48	; 0x30
 80017c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017c8:	1b52      	subs	r2, r2, r5
 80017ca:	6122      	str	r2, [r4, #16]
 80017cc:	f8cd a000 	str.w	sl, [sp]
 80017d0:	464b      	mov	r3, r9
 80017d2:	aa03      	add	r2, sp, #12
 80017d4:	4621      	mov	r1, r4
 80017d6:	4640      	mov	r0, r8
 80017d8:	f7ff fee4 	bl	80015a4 <_printf_common>
 80017dc:	3001      	adds	r0, #1
 80017de:	d14a      	bne.n	8001876 <_printf_i+0x1f6>
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	b004      	add	sp, #16
 80017e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6023      	str	r3, [r4, #0]
 80017f2:	4833      	ldr	r0, [pc, #204]	; (80018c0 <_printf_i+0x240>)
 80017f4:	2778      	movs	r7, #120	; 0x78
 80017f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	6829      	ldr	r1, [r5, #0]
 80017fe:	061f      	lsls	r7, r3, #24
 8001800:	f851 6b04 	ldr.w	r6, [r1], #4
 8001804:	d402      	bmi.n	800180c <_printf_i+0x18c>
 8001806:	065f      	lsls	r7, r3, #25
 8001808:	bf48      	it	mi
 800180a:	b2b6      	uxthmi	r6, r6
 800180c:	07df      	lsls	r7, r3, #31
 800180e:	bf48      	it	mi
 8001810:	f043 0320 	orrmi.w	r3, r3, #32
 8001814:	6029      	str	r1, [r5, #0]
 8001816:	bf48      	it	mi
 8001818:	6023      	strmi	r3, [r4, #0]
 800181a:	b91e      	cbnz	r6, 8001824 <_printf_i+0x1a4>
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f023 0320 	bic.w	r3, r3, #32
 8001822:	6023      	str	r3, [r4, #0]
 8001824:	2310      	movs	r3, #16
 8001826:	e7a7      	b.n	8001778 <_printf_i+0xf8>
 8001828:	4824      	ldr	r0, [pc, #144]	; (80018bc <_printf_i+0x23c>)
 800182a:	e7e4      	b.n	80017f6 <_printf_i+0x176>
 800182c:	4615      	mov	r5, r2
 800182e:	e7bd      	b.n	80017ac <_printf_i+0x12c>
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	6826      	ldr	r6, [r4, #0]
 8001834:	6961      	ldr	r1, [r4, #20]
 8001836:	1d18      	adds	r0, r3, #4
 8001838:	6028      	str	r0, [r5, #0]
 800183a:	0635      	lsls	r5, r6, #24
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	d501      	bpl.n	8001844 <_printf_i+0x1c4>
 8001840:	6019      	str	r1, [r3, #0]
 8001842:	e002      	b.n	800184a <_printf_i+0x1ca>
 8001844:	0670      	lsls	r0, r6, #25
 8001846:	d5fb      	bpl.n	8001840 <_printf_i+0x1c0>
 8001848:	8019      	strh	r1, [r3, #0]
 800184a:	2300      	movs	r3, #0
 800184c:	6123      	str	r3, [r4, #16]
 800184e:	4615      	mov	r5, r2
 8001850:	e7bc      	b.n	80017cc <_printf_i+0x14c>
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	1d1a      	adds	r2, r3, #4
 8001856:	602a      	str	r2, [r5, #0]
 8001858:	681d      	ldr	r5, [r3, #0]
 800185a:	6862      	ldr	r2, [r4, #4]
 800185c:	2100      	movs	r1, #0
 800185e:	4628      	mov	r0, r5
 8001860:	f7fe fcb6 	bl	80001d0 <memchr>
 8001864:	b108      	cbz	r0, 800186a <_printf_i+0x1ea>
 8001866:	1b40      	subs	r0, r0, r5
 8001868:	6060      	str	r0, [r4, #4]
 800186a:	6863      	ldr	r3, [r4, #4]
 800186c:	6123      	str	r3, [r4, #16]
 800186e:	2300      	movs	r3, #0
 8001870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001874:	e7aa      	b.n	80017cc <_printf_i+0x14c>
 8001876:	6923      	ldr	r3, [r4, #16]
 8001878:	462a      	mov	r2, r5
 800187a:	4649      	mov	r1, r9
 800187c:	4640      	mov	r0, r8
 800187e:	47d0      	blx	sl
 8001880:	3001      	adds	r0, #1
 8001882:	d0ad      	beq.n	80017e0 <_printf_i+0x160>
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	079b      	lsls	r3, r3, #30
 8001888:	d413      	bmi.n	80018b2 <_printf_i+0x232>
 800188a:	68e0      	ldr	r0, [r4, #12]
 800188c:	9b03      	ldr	r3, [sp, #12]
 800188e:	4298      	cmp	r0, r3
 8001890:	bfb8      	it	lt
 8001892:	4618      	movlt	r0, r3
 8001894:	e7a6      	b.n	80017e4 <_printf_i+0x164>
 8001896:	2301      	movs	r3, #1
 8001898:	4632      	mov	r2, r6
 800189a:	4649      	mov	r1, r9
 800189c:	4640      	mov	r0, r8
 800189e:	47d0      	blx	sl
 80018a0:	3001      	adds	r0, #1
 80018a2:	d09d      	beq.n	80017e0 <_printf_i+0x160>
 80018a4:	3501      	adds	r5, #1
 80018a6:	68e3      	ldr	r3, [r4, #12]
 80018a8:	9903      	ldr	r1, [sp, #12]
 80018aa:	1a5b      	subs	r3, r3, r1
 80018ac:	42ab      	cmp	r3, r5
 80018ae:	dcf2      	bgt.n	8001896 <_printf_i+0x216>
 80018b0:	e7eb      	b.n	800188a <_printf_i+0x20a>
 80018b2:	2500      	movs	r5, #0
 80018b4:	f104 0619 	add.w	r6, r4, #25
 80018b8:	e7f5      	b.n	80018a6 <_printf_i+0x226>
 80018ba:	bf00      	nop
 80018bc:	08001da1 	.word	0x08001da1
 80018c0:	08001db2 	.word	0x08001db2

080018c4 <__sflush_r>:
 80018c4:	898a      	ldrh	r2, [r1, #12]
 80018c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ca:	4605      	mov	r5, r0
 80018cc:	0710      	lsls	r0, r2, #28
 80018ce:	460c      	mov	r4, r1
 80018d0:	d458      	bmi.n	8001984 <__sflush_r+0xc0>
 80018d2:	684b      	ldr	r3, [r1, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dc05      	bgt.n	80018e4 <__sflush_r+0x20>
 80018d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dc02      	bgt.n	80018e4 <__sflush_r+0x20>
 80018de:	2000      	movs	r0, #0
 80018e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	d0f9      	beq.n	80018de <__sflush_r+0x1a>
 80018ea:	2300      	movs	r3, #0
 80018ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80018f0:	682f      	ldr	r7, [r5, #0]
 80018f2:	6a21      	ldr	r1, [r4, #32]
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	d032      	beq.n	800195e <__sflush_r+0x9a>
 80018f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	075a      	lsls	r2, r3, #29
 80018fe:	d505      	bpl.n	800190c <__sflush_r+0x48>
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	1ac0      	subs	r0, r0, r3
 8001904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001906:	b10b      	cbz	r3, 800190c <__sflush_r+0x48>
 8001908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800190a:	1ac0      	subs	r0, r0, r3
 800190c:	2300      	movs	r3, #0
 800190e:	4602      	mov	r2, r0
 8001910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001912:	6a21      	ldr	r1, [r4, #32]
 8001914:	4628      	mov	r0, r5
 8001916:	47b0      	blx	r6
 8001918:	1c43      	adds	r3, r0, #1
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	d106      	bne.n	800192c <__sflush_r+0x68>
 800191e:	6829      	ldr	r1, [r5, #0]
 8001920:	291d      	cmp	r1, #29
 8001922:	d82b      	bhi.n	800197c <__sflush_r+0xb8>
 8001924:	4a29      	ldr	r2, [pc, #164]	; (80019cc <__sflush_r+0x108>)
 8001926:	410a      	asrs	r2, r1
 8001928:	07d6      	lsls	r6, r2, #31
 800192a:	d427      	bmi.n	800197c <__sflush_r+0xb8>
 800192c:	2200      	movs	r2, #0
 800192e:	6062      	str	r2, [r4, #4]
 8001930:	04d9      	lsls	r1, r3, #19
 8001932:	6922      	ldr	r2, [r4, #16]
 8001934:	6022      	str	r2, [r4, #0]
 8001936:	d504      	bpl.n	8001942 <__sflush_r+0x7e>
 8001938:	1c42      	adds	r2, r0, #1
 800193a:	d101      	bne.n	8001940 <__sflush_r+0x7c>
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	b903      	cbnz	r3, 8001942 <__sflush_r+0x7e>
 8001940:	6560      	str	r0, [r4, #84]	; 0x54
 8001942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001944:	602f      	str	r7, [r5, #0]
 8001946:	2900      	cmp	r1, #0
 8001948:	d0c9      	beq.n	80018de <__sflush_r+0x1a>
 800194a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800194e:	4299      	cmp	r1, r3
 8001950:	d002      	beq.n	8001958 <__sflush_r+0x94>
 8001952:	4628      	mov	r0, r5
 8001954:	f7ff fa92 	bl	8000e7c <_free_r>
 8001958:	2000      	movs	r0, #0
 800195a:	6360      	str	r0, [r4, #52]	; 0x34
 800195c:	e7c0      	b.n	80018e0 <__sflush_r+0x1c>
 800195e:	2301      	movs	r3, #1
 8001960:	4628      	mov	r0, r5
 8001962:	47b0      	blx	r6
 8001964:	1c41      	adds	r1, r0, #1
 8001966:	d1c8      	bne.n	80018fa <__sflush_r+0x36>
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0c5      	beq.n	80018fa <__sflush_r+0x36>
 800196e:	2b1d      	cmp	r3, #29
 8001970:	d001      	beq.n	8001976 <__sflush_r+0xb2>
 8001972:	2b16      	cmp	r3, #22
 8001974:	d101      	bne.n	800197a <__sflush_r+0xb6>
 8001976:	602f      	str	r7, [r5, #0]
 8001978:	e7b1      	b.n	80018de <__sflush_r+0x1a>
 800197a:	89a3      	ldrh	r3, [r4, #12]
 800197c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001980:	81a3      	strh	r3, [r4, #12]
 8001982:	e7ad      	b.n	80018e0 <__sflush_r+0x1c>
 8001984:	690f      	ldr	r7, [r1, #16]
 8001986:	2f00      	cmp	r7, #0
 8001988:	d0a9      	beq.n	80018de <__sflush_r+0x1a>
 800198a:	0793      	lsls	r3, r2, #30
 800198c:	680e      	ldr	r6, [r1, #0]
 800198e:	bf08      	it	eq
 8001990:	694b      	ldreq	r3, [r1, #20]
 8001992:	600f      	str	r7, [r1, #0]
 8001994:	bf18      	it	ne
 8001996:	2300      	movne	r3, #0
 8001998:	eba6 0807 	sub.w	r8, r6, r7
 800199c:	608b      	str	r3, [r1, #8]
 800199e:	f1b8 0f00 	cmp.w	r8, #0
 80019a2:	dd9c      	ble.n	80018de <__sflush_r+0x1a>
 80019a4:	6a21      	ldr	r1, [r4, #32]
 80019a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019a8:	4643      	mov	r3, r8
 80019aa:	463a      	mov	r2, r7
 80019ac:	4628      	mov	r0, r5
 80019ae:	47b0      	blx	r6
 80019b0:	2800      	cmp	r0, #0
 80019b2:	dc06      	bgt.n	80019c2 <__sflush_r+0xfe>
 80019b4:	89a3      	ldrh	r3, [r4, #12]
 80019b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ba:	81a3      	strh	r3, [r4, #12]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	e78e      	b.n	80018e0 <__sflush_r+0x1c>
 80019c2:	4407      	add	r7, r0
 80019c4:	eba8 0800 	sub.w	r8, r8, r0
 80019c8:	e7e9      	b.n	800199e <__sflush_r+0xda>
 80019ca:	bf00      	nop
 80019cc:	dfbffffe 	.word	0xdfbffffe

080019d0 <_fflush_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	690b      	ldr	r3, [r1, #16]
 80019d4:	4605      	mov	r5, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	b913      	cbnz	r3, 80019e0 <_fflush_r+0x10>
 80019da:	2500      	movs	r5, #0
 80019dc:	4628      	mov	r0, r5
 80019de:	bd38      	pop	{r3, r4, r5, pc}
 80019e0:	b118      	cbz	r0, 80019ea <_fflush_r+0x1a>
 80019e2:	6a03      	ldr	r3, [r0, #32]
 80019e4:	b90b      	cbnz	r3, 80019ea <_fflush_r+0x1a>
 80019e6:	f7ff f921 	bl	8000c2c <__sinit>
 80019ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f3      	beq.n	80019da <_fflush_r+0xa>
 80019f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80019f4:	07d0      	lsls	r0, r2, #31
 80019f6:	d404      	bmi.n	8001a02 <_fflush_r+0x32>
 80019f8:	0599      	lsls	r1, r3, #22
 80019fa:	d402      	bmi.n	8001a02 <_fflush_r+0x32>
 80019fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019fe:	f7ff fa3a 	bl	8000e76 <__retarget_lock_acquire_recursive>
 8001a02:	4628      	mov	r0, r5
 8001a04:	4621      	mov	r1, r4
 8001a06:	f7ff ff5d 	bl	80018c4 <__sflush_r>
 8001a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a0c:	07da      	lsls	r2, r3, #31
 8001a0e:	4605      	mov	r5, r0
 8001a10:	d4e4      	bmi.n	80019dc <_fflush_r+0xc>
 8001a12:	89a3      	ldrh	r3, [r4, #12]
 8001a14:	059b      	lsls	r3, r3, #22
 8001a16:	d4e1      	bmi.n	80019dc <_fflush_r+0xc>
 8001a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a1a:	f7ff fa2d 	bl	8000e78 <__retarget_lock_release_recursive>
 8001a1e:	e7dd      	b.n	80019dc <_fflush_r+0xc>

08001a20 <__swbuf_r>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	460e      	mov	r6, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	4605      	mov	r5, r0
 8001a28:	b118      	cbz	r0, 8001a32 <__swbuf_r+0x12>
 8001a2a:	6a03      	ldr	r3, [r0, #32]
 8001a2c:	b90b      	cbnz	r3, 8001a32 <__swbuf_r+0x12>
 8001a2e:	f7ff f8fd 	bl	8000c2c <__sinit>
 8001a32:	69a3      	ldr	r3, [r4, #24]
 8001a34:	60a3      	str	r3, [r4, #8]
 8001a36:	89a3      	ldrh	r3, [r4, #12]
 8001a38:	071a      	lsls	r2, r3, #28
 8001a3a:	d525      	bpl.n	8001a88 <__swbuf_r+0x68>
 8001a3c:	6923      	ldr	r3, [r4, #16]
 8001a3e:	b31b      	cbz	r3, 8001a88 <__swbuf_r+0x68>
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	6922      	ldr	r2, [r4, #16]
 8001a44:	1a98      	subs	r0, r3, r2
 8001a46:	6963      	ldr	r3, [r4, #20]
 8001a48:	b2f6      	uxtb	r6, r6
 8001a4a:	4283      	cmp	r3, r0
 8001a4c:	4637      	mov	r7, r6
 8001a4e:	dc04      	bgt.n	8001a5a <__swbuf_r+0x3a>
 8001a50:	4621      	mov	r1, r4
 8001a52:	4628      	mov	r0, r5
 8001a54:	f7ff ffbc 	bl	80019d0 <_fflush_r>
 8001a58:	b9e0      	cbnz	r0, 8001a94 <__swbuf_r+0x74>
 8001a5a:	68a3      	ldr	r3, [r4, #8]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60a3      	str	r3, [r4, #8]
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	6022      	str	r2, [r4, #0]
 8001a66:	701e      	strb	r6, [r3, #0]
 8001a68:	6962      	ldr	r2, [r4, #20]
 8001a6a:	1c43      	adds	r3, r0, #1
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d004      	beq.n	8001a7a <__swbuf_r+0x5a>
 8001a70:	89a3      	ldrh	r3, [r4, #12]
 8001a72:	07db      	lsls	r3, r3, #31
 8001a74:	d506      	bpl.n	8001a84 <__swbuf_r+0x64>
 8001a76:	2e0a      	cmp	r6, #10
 8001a78:	d104      	bne.n	8001a84 <__swbuf_r+0x64>
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f7ff ffa7 	bl	80019d0 <_fflush_r>
 8001a82:	b938      	cbnz	r0, 8001a94 <__swbuf_r+0x74>
 8001a84:	4638      	mov	r0, r7
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a88:	4621      	mov	r1, r4
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f000 f806 	bl	8001a9c <__swsetup_r>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0d5      	beq.n	8001a40 <__swbuf_r+0x20>
 8001a94:	f04f 37ff 	mov.w	r7, #4294967295
 8001a98:	e7f4      	b.n	8001a84 <__swbuf_r+0x64>
	...

08001a9c <__swsetup_r>:
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <__swsetup_r+0xac>)
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	b118      	cbz	r0, 8001ab0 <__swsetup_r+0x14>
 8001aa8:	6a03      	ldr	r3, [r0, #32]
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <__swsetup_r+0x14>
 8001aac:	f7ff f8be 	bl	8000c2c <__sinit>
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ab6:	0718      	lsls	r0, r3, #28
 8001ab8:	d422      	bmi.n	8001b00 <__swsetup_r+0x64>
 8001aba:	06d9      	lsls	r1, r3, #27
 8001abc:	d407      	bmi.n	8001ace <__swsetup_r+0x32>
 8001abe:	2309      	movs	r3, #9
 8001ac0:	602b      	str	r3, [r5, #0]
 8001ac2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ac6:	81a3      	strh	r3, [r4, #12]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	e034      	b.n	8001b38 <__swsetup_r+0x9c>
 8001ace:	0758      	lsls	r0, r3, #29
 8001ad0:	d512      	bpl.n	8001af8 <__swsetup_r+0x5c>
 8001ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ad4:	b141      	cbz	r1, 8001ae8 <__swsetup_r+0x4c>
 8001ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ada:	4299      	cmp	r1, r3
 8001adc:	d002      	beq.n	8001ae4 <__swsetup_r+0x48>
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f7ff f9cc 	bl	8000e7c <_free_r>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6363      	str	r3, [r4, #52]	; 0x34
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001aee:	81a3      	strh	r3, [r4, #12]
 8001af0:	2300      	movs	r3, #0
 8001af2:	6063      	str	r3, [r4, #4]
 8001af4:	6923      	ldr	r3, [r4, #16]
 8001af6:	6023      	str	r3, [r4, #0]
 8001af8:	89a3      	ldrh	r3, [r4, #12]
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	81a3      	strh	r3, [r4, #12]
 8001b00:	6923      	ldr	r3, [r4, #16]
 8001b02:	b94b      	cbnz	r3, 8001b18 <__swsetup_r+0x7c>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0e:	d003      	beq.n	8001b18 <__swsetup_r+0x7c>
 8001b10:	4621      	mov	r1, r4
 8001b12:	4628      	mov	r0, r5
 8001b14:	f000 f8a7 	bl	8001c66 <__smakebuf_r>
 8001b18:	89a0      	ldrh	r0, [r4, #12]
 8001b1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b1e:	f010 0301 	ands.w	r3, r0, #1
 8001b22:	d00a      	beq.n	8001b3a <__swsetup_r+0x9e>
 8001b24:	2300      	movs	r3, #0
 8001b26:	60a3      	str	r3, [r4, #8]
 8001b28:	6963      	ldr	r3, [r4, #20]
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	61a3      	str	r3, [r4, #24]
 8001b2e:	6923      	ldr	r3, [r4, #16]
 8001b30:	b943      	cbnz	r3, 8001b44 <__swsetup_r+0xa8>
 8001b32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001b36:	d1c4      	bne.n	8001ac2 <__swsetup_r+0x26>
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
 8001b3a:	0781      	lsls	r1, r0, #30
 8001b3c:	bf58      	it	pl
 8001b3e:	6963      	ldrpl	r3, [r4, #20]
 8001b40:	60a3      	str	r3, [r4, #8]
 8001b42:	e7f4      	b.n	8001b2e <__swsetup_r+0x92>
 8001b44:	2000      	movs	r0, #0
 8001b46:	e7f7      	b.n	8001b38 <__swsetup_r+0x9c>
 8001b48:	20000058 	.word	0x20000058

08001b4c <memmove>:
 8001b4c:	4288      	cmp	r0, r1
 8001b4e:	b510      	push	{r4, lr}
 8001b50:	eb01 0402 	add.w	r4, r1, r2
 8001b54:	d902      	bls.n	8001b5c <memmove+0x10>
 8001b56:	4284      	cmp	r4, r0
 8001b58:	4623      	mov	r3, r4
 8001b5a:	d807      	bhi.n	8001b6c <memmove+0x20>
 8001b5c:	1e43      	subs	r3, r0, #1
 8001b5e:	42a1      	cmp	r1, r4
 8001b60:	d008      	beq.n	8001b74 <memmove+0x28>
 8001b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b6a:	e7f8      	b.n	8001b5e <memmove+0x12>
 8001b6c:	4402      	add	r2, r0
 8001b6e:	4601      	mov	r1, r0
 8001b70:	428a      	cmp	r2, r1
 8001b72:	d100      	bne.n	8001b76 <memmove+0x2a>
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b7e:	e7f7      	b.n	8001b70 <memmove+0x24>

08001b80 <_sbrk_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4d06      	ldr	r5, [pc, #24]	; (8001b9c <_sbrk_r+0x1c>)
 8001b84:	2300      	movs	r3, #0
 8001b86:	4604      	mov	r4, r0
 8001b88:	4608      	mov	r0, r1
 8001b8a:	602b      	str	r3, [r5, #0]
 8001b8c:	f7fe fe54 	bl	8000838 <_sbrk>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_sbrk_r+0x1a>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_sbrk_r+0x1a>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	20000204 	.word	0x20000204

08001ba0 <memcpy>:
 8001ba0:	440a      	add	r2, r1
 8001ba2:	4291      	cmp	r1, r2
 8001ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ba8:	d100      	bne.n	8001bac <memcpy+0xc>
 8001baa:	4770      	bx	lr
 8001bac:	b510      	push	{r4, lr}
 8001bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bb6:	4291      	cmp	r1, r2
 8001bb8:	d1f9      	bne.n	8001bae <memcpy+0xe>
 8001bba:	bd10      	pop	{r4, pc}

08001bbc <_realloc_r>:
 8001bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc0:	4680      	mov	r8, r0
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	460e      	mov	r6, r1
 8001bc6:	b921      	cbnz	r1, 8001bd2 <_realloc_r+0x16>
 8001bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bcc:	4611      	mov	r1, r2
 8001bce:	f7ff b9c1 	b.w	8000f54 <_malloc_r>
 8001bd2:	b92a      	cbnz	r2, 8001be0 <_realloc_r+0x24>
 8001bd4:	f7ff f952 	bl	8000e7c <_free_r>
 8001bd8:	4625      	mov	r5, r4
 8001bda:	4628      	mov	r0, r5
 8001bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001be0:	f000 f8a0 	bl	8001d24 <_malloc_usable_size_r>
 8001be4:	4284      	cmp	r4, r0
 8001be6:	4607      	mov	r7, r0
 8001be8:	d802      	bhi.n	8001bf0 <_realloc_r+0x34>
 8001bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001bee:	d812      	bhi.n	8001c16 <_realloc_r+0x5a>
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f7ff f9ae 	bl	8000f54 <_malloc_r>
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d0ed      	beq.n	8001bda <_realloc_r+0x1e>
 8001bfe:	42bc      	cmp	r4, r7
 8001c00:	4622      	mov	r2, r4
 8001c02:	4631      	mov	r1, r6
 8001c04:	bf28      	it	cs
 8001c06:	463a      	movcs	r2, r7
 8001c08:	f7ff ffca 	bl	8001ba0 <memcpy>
 8001c0c:	4631      	mov	r1, r6
 8001c0e:	4640      	mov	r0, r8
 8001c10:	f7ff f934 	bl	8000e7c <_free_r>
 8001c14:	e7e1      	b.n	8001bda <_realloc_r+0x1e>
 8001c16:	4635      	mov	r5, r6
 8001c18:	e7df      	b.n	8001bda <_realloc_r+0x1e>

08001c1a <__swhatbuf_r>:
 8001c1a:	b570      	push	{r4, r5, r6, lr}
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c22:	2900      	cmp	r1, #0
 8001c24:	b096      	sub	sp, #88	; 0x58
 8001c26:	4615      	mov	r5, r2
 8001c28:	461e      	mov	r6, r3
 8001c2a:	da0d      	bge.n	8001c48 <__swhatbuf_r+0x2e>
 8001c2c:	89a3      	ldrh	r3, [r4, #12]
 8001c2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	bf0c      	ite	eq
 8001c38:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001c3c:	2340      	movne	r3, #64	; 0x40
 8001c3e:	2000      	movs	r0, #0
 8001c40:	6031      	str	r1, [r6, #0]
 8001c42:	602b      	str	r3, [r5, #0]
 8001c44:	b016      	add	sp, #88	; 0x58
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	466a      	mov	r2, sp
 8001c4a:	f000 f849 	bl	8001ce0 <_fstat_r>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	dbec      	blt.n	8001c2c <__swhatbuf_r+0x12>
 8001c52:	9901      	ldr	r1, [sp, #4]
 8001c54:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001c58:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001c5c:	4259      	negs	r1, r3
 8001c5e:	4159      	adcs	r1, r3
 8001c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c64:	e7eb      	b.n	8001c3e <__swhatbuf_r+0x24>

08001c66 <__smakebuf_r>:
 8001c66:	898b      	ldrh	r3, [r1, #12]
 8001c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c6a:	079d      	lsls	r5, r3, #30
 8001c6c:	4606      	mov	r6, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	d507      	bpl.n	8001c82 <__smakebuf_r+0x1c>
 8001c72:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c76:	6023      	str	r3, [r4, #0]
 8001c78:	6123      	str	r3, [r4, #16]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	6163      	str	r3, [r4, #20]
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
 8001c82:	ab01      	add	r3, sp, #4
 8001c84:	466a      	mov	r2, sp
 8001c86:	f7ff ffc8 	bl	8001c1a <__swhatbuf_r>
 8001c8a:	9900      	ldr	r1, [sp, #0]
 8001c8c:	4605      	mov	r5, r0
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7ff f960 	bl	8000f54 <_malloc_r>
 8001c94:	b948      	cbnz	r0, 8001caa <__smakebuf_r+0x44>
 8001c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c9a:	059a      	lsls	r2, r3, #22
 8001c9c:	d4ef      	bmi.n	8001c7e <__smakebuf_r+0x18>
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	81a3      	strh	r3, [r4, #12]
 8001ca8:	e7e3      	b.n	8001c72 <__smakebuf_r+0xc>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	6020      	str	r0, [r4, #0]
 8001cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb2:	81a3      	strh	r3, [r4, #12]
 8001cb4:	9b00      	ldr	r3, [sp, #0]
 8001cb6:	6163      	str	r3, [r4, #20]
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	6120      	str	r0, [r4, #16]
 8001cbc:	b15b      	cbz	r3, 8001cd6 <__smakebuf_r+0x70>
 8001cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f000 f81e 	bl	8001d04 <_isatty_r>
 8001cc8:	b128      	cbz	r0, 8001cd6 <__smakebuf_r+0x70>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	f023 0303 	bic.w	r3, r3, #3
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	81a3      	strh	r3, [r4, #12]
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	431d      	orrs	r5, r3
 8001cda:	81a5      	strh	r5, [r4, #12]
 8001cdc:	e7cf      	b.n	8001c7e <__smakebuf_r+0x18>
	...

08001ce0 <_fstat_r>:
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	4d07      	ldr	r5, [pc, #28]	; (8001d00 <_fstat_r+0x20>)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	602b      	str	r3, [r5, #0]
 8001cee:	f7fe fd7a 	bl	80007e6 <_fstat>
 8001cf2:	1c43      	adds	r3, r0, #1
 8001cf4:	d102      	bne.n	8001cfc <_fstat_r+0x1c>
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	b103      	cbz	r3, 8001cfc <_fstat_r+0x1c>
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	bd38      	pop	{r3, r4, r5, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000204 	.word	0x20000204

08001d04 <_isatty_r>:
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	4d06      	ldr	r5, [pc, #24]	; (8001d20 <_isatty_r+0x1c>)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	602b      	str	r3, [r5, #0]
 8001d10:	f7fe fd79 	bl	8000806 <_isatty>
 8001d14:	1c43      	adds	r3, r0, #1
 8001d16:	d102      	bne.n	8001d1e <_isatty_r+0x1a>
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	b103      	cbz	r3, 8001d1e <_isatty_r+0x1a>
 8001d1c:	6023      	str	r3, [r4, #0]
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	20000204 	.word	0x20000204

08001d24 <_malloc_usable_size_r>:
 8001d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d28:	1f18      	subs	r0, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfbc      	itt	lt
 8001d2e:	580b      	ldrlt	r3, [r1, r0]
 8001d30:	18c0      	addlt	r0, r0, r3
 8001d32:	4770      	bx	lr

08001d34 <_init>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	bf00      	nop
 8001d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3a:	bc08      	pop	{r3}
 8001d3c:	469e      	mov	lr, r3
 8001d3e:	4770      	bx	lr

08001d40 <_fini>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr
