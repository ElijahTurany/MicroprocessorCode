
Lab1Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  4 .ARM          00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0001038c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000005cf  00000000  00000000  000103ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000001b9  00000000  00000000  000109ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00010b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000040  00000000  00000000  00010bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c469  00000000  00000000  00010c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c56  00000000  00000000  0002d099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e1a3  00000000  00000000  0002dcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000008c  00000000  00000000  000cbe94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ab  00000000  00000000  000cbf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800036c 	.word	0x0800036c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	0800036c 	.word	0x0800036c

080001c4 <fpu_enable>:
#include "stm32l476xx.h"



void fpu_enable(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	/*Enable floating point unit: Enable CP10 and CP11 for full access*/
	SCB->CPACR |=(1<20);
 80001c8:	4b12      	ldr	r3, [pc, #72]	; (8000214 <fpu_enable+0x50>)
 80001ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <fpu_enable+0x50>)
 80001d0:	f043 0301 	orr.w	r3, r3, #1
 80001d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<21);
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <fpu_enable+0x50>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <fpu_enable+0x50>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<22);
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <fpu_enable+0x50>)
 80001ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <fpu_enable+0x50>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<23);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <fpu_enable+0x50>)
 80001fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <fpu_enable+0x50>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <main>:
#define PIN5		(1U<<5)
#define LED_PIN		PIN5


int main()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 800021e:	f7ff ffd1 	bl	80001c4 <fpu_enable>


	/*Enable clock access to GPIOA*/
	RCC->AHB2ENR |=GPIOAEN;
 8000222:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <main+0xb0>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	4a28      	ldr	r2, [pc, #160]	; (80002c8 <main+0xb0>)
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Set PA5 to output mode*/
	GPIOA->MODER |=(1U<<10);
 800022e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 800023e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800024c:	6013      	str	r3, [r2, #0]
	 while(1)
	 {
		// GPIOA->ODR ^=LED_PIN;
		// for(int i=0; i<100000; i++){}

		 GPIOA->BSRR |= (1U<<5); /*Turn on PA5 bit*/
 800024e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6193      	str	r3, [r2, #24]
		 for(int i=0; i<100000; i++){}
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e002      	b.n	800026a <main+0x52>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3301      	adds	r3, #1
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a17      	ldr	r2, [pc, #92]	; (80002cc <main+0xb4>)
 800026e:	4293      	cmp	r3, r2
 8000270:	ddf8      	ble.n	8000264 <main+0x4c>

		 GPIOA->BSRR |= (1U<<21); /*Turn off PA5 bit*/
 8000272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000280:	6193      	str	r3, [r2, #24]
		 for(int i=0; i<100000; i++){}
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
 8000286:	e002      	b.n	800028e <main+0x76>
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	603b      	str	r3, [r7, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <main+0xb4>)
 8000292:	4293      	cmp	r3, r2
 8000294:	ddf8      	ble.n	8000288 <main+0x70>

		 GPIOA->OSPEEDR &= ~(3<<5);
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80002a4:	6093      	str	r3, [r2, #8]

		 GPIOA->OTYPER &= ~(1<<5);
 80002a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b0:	f023 0320 	bic.w	r3, r3, #32
 80002b4:	6053      	str	r3, [r2, #4]

		 GPIOA->PUPDR &= ~(3<<(5));
 80002b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80002c4:	60d3      	str	r3, [r2, #12]
		 GPIOA->BSRR |= (1U<<5); /*Turn on PA5 bit*/
 80002c6:	e7c2      	b.n	800024e <main+0x36>
 80002c8:	40021000 	.word	0x40021000
 80002cc:	0001869f 	.word	0x0001869f

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ff89 	bl	8000218 <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	4d0d      	ldr	r5, [pc, #52]	; (800035c <__libc_init_array+0x38>)
 8000328:	4c0d      	ldr	r4, [pc, #52]	; (8000360 <__libc_init_array+0x3c>)
 800032a:	1b64      	subs	r4, r4, r5
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	2600      	movs	r6, #0
 8000330:	42a6      	cmp	r6, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	4d0b      	ldr	r5, [pc, #44]	; (8000364 <__libc_init_array+0x40>)
 8000336:	4c0c      	ldr	r4, [pc, #48]	; (8000368 <__libc_init_array+0x44>)
 8000338:	f000 f818 	bl	800036c <_init>
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	2600      	movs	r6, #0
 8000342:	42a6      	cmp	r6, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f855 3b04 	ldr.w	r3, [r5], #4
 800034c:	4798      	blx	r3
 800034e:	3601      	adds	r6, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f855 3b04 	ldr.w	r3, [r5], #4
 8000356:	4798      	blx	r3
 8000358:	3601      	adds	r6, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
