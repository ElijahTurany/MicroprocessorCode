
Lab3Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000490  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000614  08000614  00010614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000624  08000624  0001062c  2**0
                  CONTENTS
  4 .ARM          00000000  08000624  08000624  0001062c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000624  0800062c  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000628  08000628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0001062c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001062c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001065c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000ad2  00000000  00000000  0001069f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002ce  00000000  00000000  00011171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  00011440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007c  00000000  00000000  00011500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c63b  00000000  00000000  0001157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001b04  00000000  00000000  0002dbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e324  00000000  00000000  0002f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000160  00000000  00000000  000cd9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ab  00000000  00000000  000cdb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080005fc 	.word	0x080005fc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080005fc 	.word	0x080005fc

080001c4 <System_Clock_Init>:
#include "stm32l476xx.h"

//******************************************
// Configure PLL as system clock source
//******************************************
void System_Clock_Init(void){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
    // must be correctly programmed according to the frequency of the CPU clock
    // (HCLK) and the supply voltage of the device.
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80001c8:	4b3e      	ldr	r3, [pc, #248]	; (80002c4 <System_Clock_Init+0x100>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a3d      	ldr	r2, [pc, #244]	; (80002c4 <System_Clock_Init+0x100>)
 80001ce:	f023 0307 	bic.w	r3, r3, #7
 80001d2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80001d4:	4b3b      	ldr	r3, [pc, #236]	; (80002c4 <System_Clock_Init+0x100>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a3a      	ldr	r2, [pc, #232]	; (80002c4 <System_Clock_Init+0x100>)
 80001da:	f043 0302 	orr.w	r3, r3, #2
 80001de:	6013      	str	r3, [r2, #0]

	/* Enable the Internal High Speed oscillator (HSI)*/
	RCC->CR |= RCC_CR_HSION;
 80001e0:	4b39      	ldr	r3, [pc, #228]	; (80002c8 <System_Clock_Init+0x104>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a38      	ldr	r2, [pc, #224]	; (80002c8 <System_Clock_Init+0x104>)
 80001e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ea:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80001ec:	bf00      	nop
 80001ee:	4b36      	ldr	r3, [pc, #216]	; (80002c8 <System_Clock_Init+0x104>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0f9      	beq.n	80001ee <System_Clock_Init+0x2a>

	/*Reset PLL (PLL off)*/
	RCC->CR    &= ~RCC_CR_PLLON;
 80001fa:	4b33      	ldr	r3, [pc, #204]	; (80002c8 <System_Clock_Init+0x104>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a32      	ldr	r2, [pc, #200]	; (80002c8 <System_Clock_Init+0x104>)
 8000200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000204:	6013      	str	r3, [r2, #0]

	/* Select HSI (16MHz) as a clock source for PLL*/
	/* 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE*/
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000206:	4b30      	ldr	r3, [pc, #192]	; (80002c8 <System_Clock_Init+0x104>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	4a2f      	ldr	r2, [pc, #188]	; (80002c8 <System_Clock_Init+0x104>)
 800020c:	f023 0303 	bic.w	r3, r3, #3
 8000210:	60d3      	str	r3, [r2, #12]
	/*HSI 16MHz selected*/
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 8000212:	4b2d      	ldr	r3, [pc, #180]	; (80002c8 <System_Clock_Init+0x104>)
 8000214:	68db      	ldr	r3, [r3, #12]
 8000216:	4a2c      	ldr	r2, [pc, #176]	; (80002c8 <System_Clock_Init+0x104>)
 8000218:	f043 0302 	orr.w	r3, r3, #2
 800021c:	60d3      	str	r3, [r2, #12]
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) =
	//16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	/* 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4,
	 * 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8*/
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8; //missing code here
 800021e:	4b2a      	ldr	r3, [pc, #168]	; (80002c8 <System_Clock_Init+0x104>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000226:	4a28      	ldr	r2, [pc, #160]	; (80002c8 <System_Clock_Init+0x104>)
 8000228:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800022c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; //missing code here
 800022e:	4b26      	ldr	r3, [pc, #152]	; (80002c8 <System_Clock_Init+0x104>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000236:	4a24      	ldr	r2, [pc, #144]	; (80002c8 <System_Clock_Init+0x104>)
 8000238:	f043 0310 	orr.w	r3, r3, #16
 800023c:	60d3      	str	r3, [r2, #12]

	/* Enable PLLR parameter and select its value*/
	/*00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8*/
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;
 800023e:	4b22      	ldr	r3, [pc, #136]	; (80002c8 <System_Clock_Init+0x104>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <System_Clock_Init+0x104>)
 8000244:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000248:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 800024a:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <System_Clock_Init+0x104>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a1e      	ldr	r2, [pc, #120]	; (80002c8 <System_Clock_Init+0x104>)
 8000250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000254:	60d3      	str	r3, [r2, #12]

	/*Enable PLL*/
	RCC->CR   |= RCC_CR_PLLON;
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <System_Clock_Init+0x104>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a1b      	ldr	r2, [pc, #108]	; (80002c8 <System_Clock_Init+0x104>)
 800025c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000260:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000262:	bf00      	nop
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <System_Clock_Init+0x104>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f9      	beq.n	8000264 <System_Clock_Init+0xa0>

	// PLL selected as the system clock
	// 00: MSI, 01:HSI, 10: HSE, 11: PLL
	RCC->CFGR &= ~RCC_CFGR_SW; //clear system clock selection bits
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <System_Clock_Init+0x104>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <System_Clock_Init+0x104>)
 8000276:	f023 0303 	bic.w	r3, r3, #3
 800027a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; //select PLL as system clock
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <System_Clock_Init+0x104>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <System_Clock_Init+0x104>)
 8000282:	f043 0303 	orr.w	r3, r3, #3
 8000286:	6093      	str	r3, [r2, #8]

	// Wait until System Clock (PLL) has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000288:	bf00      	nop
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <System_Clock_Init+0x104>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	f003 030c 	and.w	r3, r3, #12
 8000292:	2b0c      	cmp	r3, #12
 8000294:	d1f9      	bne.n	800028a <System_Clock_Init+0xc6>

	// The maximum frequency of the AHB is 80MHz,
	//pre scaler is 1 for APB1 and the APB2 to use 80 MHz.
	/* AHB pre scaler = 1; SYSCLK not divided*/
	RCC->CFGR &= ~RCC_CFGR_HPRE;
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <System_Clock_Init+0x104>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <System_Clock_Init+0x104>)
 800029c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002a0:	6093      	str	r3, [r2, #8]
	/* APB high-speed pre scaler (APB1) = 1, HCLK not divided*/
	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <System_Clock_Init+0x104>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <System_Clock_Init+0x104>)
 80002a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002ac:	6093      	str	r3, [r2, #8]
	/*APB high-speed pre scaler (APB2) = 1, HCLK not divided*/
	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <System_Clock_Init+0x104>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <System_Clock_Init+0x104>)
 80002b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80002b8:	6093      	str	r3, [r2, #8]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40022000 	.word	0x40022000
 80002c8:	40021000 	.word	0x40021000

080002cc <fpu_enable>:
#include "stm32l476xx.h"



void fpu_enable(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	/*Enable floating point unit: Enable CP10 and CP11 for full access*/
	SCB->CPACR |=(1<20);
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <fpu_enable+0x50>)
 80002d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d6:	4a11      	ldr	r2, [pc, #68]	; (800031c <fpu_enable+0x50>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<21);
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <fpu_enable+0x50>)
 80002e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <fpu_enable+0x50>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<22);
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <fpu_enable+0x50>)
 80002f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f6:	4a09      	ldr	r2, [pc, #36]	; (800031c <fpu_enable+0x50>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<23);
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <fpu_enable+0x50>)
 8000302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <fpu_enable+0x50>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <GPIO_Init>:

#include "stm32l476xx.h"

void GPIO_Init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

	#define MPORT GPIOC
	#define DELAY  15000 //60000

	/* Enable GPIOs clock */
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOCEN;
 8000324:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <GPIO_Init+0x78>)
 8000326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000328:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <GPIO_Init+0x78>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	MPORT->MODER &= ~(3<<(2*PIN1) | 3<<(2*PIN2) | 3<<(2*PIN3) | 3<<(2*PIN4));  //clear PC 5,6,8,9 GPIO pins
 8000330:	4b1a      	ldr	r3, [pc, #104]	; (800039c <GPIO_Init+0x7c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a19      	ldr	r2, [pc, #100]	; (800039c <GPIO_Init+0x7c>)
 8000336:	f423 2373 	bic.w	r3, r3, #995328	; 0xf3000
 800033a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800033e:	6013      	str	r3, [r2, #0]
	MPORT->MODER  |=  1<<(2*PIN1) | 1<<(2*PIN2) | 1<<(2*PIN3) | 1<<(2*PIN4);   //  set Output(01)
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <GPIO_Init+0x7c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <GPIO_Init+0x7c>)
 8000346:	f443 23a2 	orr.w	r3, r3, #331776	; 0x51000
 800034a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800034e:	6013      	str	r3, [r2, #0]

	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	MPORT->OSPEEDR &= ~(3<<(2*PIN1) | 3<<(2*PIN2) | 3<<(2*PIN3) | 3<<(2*PIN4));   //clear PC 5,6,8,9 GPIO pins
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <GPIO_Init+0x7c>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <GPIO_Init+0x7c>)
 8000356:	f423 2373 	bic.w	r3, r3, #995328	; 0xf3000
 800035a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800035e:	6093      	str	r3, [r2, #8]
	MPORT->OSPEEDR |=   2<<(2*PIN1) | 2<<(2*PIN2) | 2<<(2*PIN3) | 2<<(2*PIN4);  // Set Fast speed
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <GPIO_Init+0x7c>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <GPIO_Init+0x7c>)
 8000366:	f443 2322 	orr.w	r3, r3, #663552	; 0xa2000
 800036a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800036e:	6093      	str	r3, [r2, #8]

	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	MPORT->OTYPER &= ~(1<<PIN1 | 1<<PIN2 | 1<<PIN3 | 1<<PIN4);       // Set Push-pull
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <GPIO_Init+0x7c>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a09      	ldr	r2, [pc, #36]	; (800039c <GPIO_Init+0x7c>)
 8000376:	f423 7358 	bic.w	r3, r3, #864	; 0x360
 800037a:	6053      	str	r3, [r2, #4]

	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	MPORT->PUPDR  &= ~(3<<(2*PIN1) | 3<<(2*PIN2) | 3<<(2*PIN3) | 3<<(2*PIN4));  // No pull-up, no pull-down
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <GPIO_Init+0x7c>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <GPIO_Init+0x7c>)
 8000382:	f423 2373 	bic.w	r3, r3, #995328	; 0xf3000
 8000386:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800038a:	60d3      	str	r3, [r2, #12]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	48000800 	.word	0x48000800

080003a0 <Half_Stepping_Clockwise>:

void Half_Stepping_Clockwise(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0

unsigned char HalfStep[8] = {0x08, 0x0C, 0x04, 0x06, 0x02, 0x03, 0x01, 0x09};
 80003a6:	4a30      	ldr	r2, [pc, #192]	; (8000468 <Half_Stepping_Clockwise+0xc8>)
 80003a8:	463b      	mov	r3, r7
 80003aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ae:	e883 0003 	stmia.w	r3, {r0, r1}

	int i, j;
	int k;
	uint32_t output;
	for (k = 0; k < 512; k++) {
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e04b      	b.n	8000450 <Half_Stepping_Clockwise+0xb0>
	for(i = 0; i < 8; i++){
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	e042      	b.n	8000444 <Half_Stepping_Clockwise+0xa4>
			for( j = 0; j < DELAY*3; j++); // delay
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
 80003c2:	e002      	b.n	80003ca <Half_Stepping_Clockwise+0x2a>
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	3301      	adds	r3, #1
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80003d0:	4293      	cmp	r3, r2
 80003d2:	ddf7      	ble.n	80003c4 <Half_Stepping_Clockwise+0x24>
			output = MPORT->ODR;
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <Half_Stepping_Clockwise+0xcc>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	60bb      	str	r3, [r7, #8]
			output &= ~( 1<< PIN1 | 1 << PIN2 | 1 << PIN3 | 1<< PIN4 );
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	f423 7358 	bic.w	r3, r3, #864	; 0x360
 80003e0:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x8) >> 3) << PIN1;
 80003e2:	463a      	mov	r2, r7
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	10db      	asrs	r3, r3, #3
 80003ec:	015b      	lsls	r3, r3, #5
 80003ee:	f003 0320 	and.w	r3, r3, #32
 80003f2:	68ba      	ldr	r2, [r7, #8]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x4) >> 2) << PIN2;
 80003f8:	463a      	mov	r2, r7
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	109b      	asrs	r3, r3, #2
 8000402:	019b      	lsls	r3, r3, #6
 8000404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	4313      	orrs	r3, r2
 800040c:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x2) >> 1) << PIN3;
 800040e:	463a      	mov	r2, r7
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	4413      	add	r3, r2
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	105b      	asrs	r3, r3, #1
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	4313      	orrs	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
			output |= ( HalfStep[i] & 0x1) << PIN4;
 8000424:	463a      	mov	r2, r7
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	025b      	lsls	r3, r3, #9
 800042e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000432:	68ba      	ldr	r2, [r7, #8]
 8000434:	4313      	orrs	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
			MPORT->ODR = output;
 8000438:	4a0c      	ldr	r2, [pc, #48]	; (800046c <Half_Stepping_Clockwise+0xcc>)
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	6153      	str	r3, [r2, #20]
	for(i = 0; i < 8; i++){
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	3301      	adds	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	2b07      	cmp	r3, #7
 8000448:	ddb9      	ble.n	80003be <Half_Stepping_Clockwise+0x1e>
	for (k = 0; k < 512; k++) {
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000456:	dbaf      	blt.n	80003b8 <Half_Stepping_Clockwise+0x18>
		}
	}
}
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	371c      	adds	r7, #28
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	08000614 	.word	0x08000614
 800046c:	48000800 	.word	0x48000800

08000470 <Half_Stepping_CounterClockwise>:

void Half_Stepping_CounterClockwise(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0

unsigned char HalfStep[8] = {0x09, 0x01, 0x03, 0x02, 0x06, 0x04, 0x0C, 0x08};
 8000476:	4a30      	ldr	r2, [pc, #192]	; (8000538 <Half_Stepping_CounterClockwise+0xc8>)
 8000478:	463b      	mov	r3, r7
 800047a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800047e:	e883 0003 	stmia.w	r3, {r0, r1}

	int i, j;
	int k;
	uint32_t output;
	for (k = 0; k < 512; k++) {
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	e04b      	b.n	8000520 <Half_Stepping_CounterClockwise+0xb0>
	for(i = 0; i < 8; i++){
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	e042      	b.n	8000514 <Half_Stepping_CounterClockwise+0xa4>
			for(j = 0; j < DELAY; j++); // delay
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	e002      	b.n	800049a <Half_Stepping_CounterClockwise+0x2a>
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	3301      	adds	r3, #1
 8000498:	613b      	str	r3, [r7, #16]
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	f643 2297 	movw	r2, #14999	; 0x3a97
 80004a0:	4293      	cmp	r3, r2
 80004a2:	ddf7      	ble.n	8000494 <Half_Stepping_CounterClockwise+0x24>
			output = MPORT->ODR;
 80004a4:	4b25      	ldr	r3, [pc, #148]	; (800053c <Half_Stepping_CounterClockwise+0xcc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	60bb      	str	r3, [r7, #8]
			output &= ~( 1<< PIN1 | 1 << PIN2 | 1 << PIN3 | 1<< PIN4 );
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	f423 7358 	bic.w	r3, r3, #864	; 0x360
 80004b0:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x8) >> 3) << PIN4;
 80004b2:	463a      	mov	r2, r7
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	4413      	add	r3, r2
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	10db      	asrs	r3, r3, #3
 80004bc:	025b      	lsls	r3, r3, #9
 80004be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x4) >> 2) << PIN3;
 80004c8:	463a      	mov	r2, r7
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	109b      	asrs	r3, r3, #2
 80004d2:	021b      	lsls	r3, r3, #8
 80004d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	4313      	orrs	r3, r2
 80004dc:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x2) >> 1) << PIN2;
 80004de:	463a      	mov	r2, r7
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	105b      	asrs	r3, r3, #1
 80004e8:	019b      	lsls	r3, r3, #6
 80004ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	60bb      	str	r3, [r7, #8]
			output |= ((HalfStep[i] & 0x1) >> 0) << PIN1;
 80004f4:	463a      	mov	r2, r7
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	015b      	lsls	r3, r3, #5
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	4313      	orrs	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
			MPORT->ODR = output;
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <Half_Stepping_CounterClockwise+0xcc>)
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	6153      	str	r3, [r2, #20]
	for(i = 0; i < 8; i++){
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	2b07      	cmp	r3, #7
 8000518:	ddb9      	ble.n	800048e <Half_Stepping_CounterClockwise+0x1e>
	for (k = 0; k < 512; k++) {
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3301      	adds	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000526:	dbaf      	blt.n	8000488 <Half_Stepping_CounterClockwise+0x18>
	}
  }
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	371c      	adds	r7, #28
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	0800061c 	.word	0x0800061c
 800053c:	48000800 	.word	0x48000800

08000540 <main>:
#define MPORT GPIOC

#define DELAY  150000 

int main()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/*Enable FPU*/
	fpu_enable();
 8000544:	f7ff fec2 	bl	80002cc <fpu_enable>

	/*Initialize GPIO*/
	GPIO_Init();
 8000548:	f7ff feea 	bl	8000320 <GPIO_Init>

	/*Initialize System Clock to 80 MHz*/
	System_Clock_Init();
 800054c:	f7ff fe3a 	bl	80001c4 <System_Clock_Init>

	/*Four pins to control the stepper motor: PC 5, PC 6,
	 * PC 8, and PC 9*/
	Half_Stepping_Clockwise();
 8000550:	f7ff ff26 	bl	80003a0 <Half_Stepping_Clockwise>
	Half_Stepping_CounterClockwise();
 8000554:	f7ff ff8c 	bl	8000470 <Half_Stepping_CounterClockwise>
 8000558:	2300      	movs	r3, #0
	


}
 800055a:	4618      	mov	r0, r3
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000564:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	; (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058e:	f000 f811 	bl	80005b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff ffd5 	bl	8000540 <main>

08000596 <LoopForever>:

LoopForever:
  b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a4:	0800062c 	.word	0x0800062c
  ldr r2, =_sbss
 80005a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <__libc_init_array>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	4d0d      	ldr	r5, [pc, #52]	; (80005ec <__libc_init_array+0x38>)
 80005b8:	4c0d      	ldr	r4, [pc, #52]	; (80005f0 <__libc_init_array+0x3c>)
 80005ba:	1b64      	subs	r4, r4, r5
 80005bc:	10a4      	asrs	r4, r4, #2
 80005be:	2600      	movs	r6, #0
 80005c0:	42a6      	cmp	r6, r4
 80005c2:	d109      	bne.n	80005d8 <__libc_init_array+0x24>
 80005c4:	4d0b      	ldr	r5, [pc, #44]	; (80005f4 <__libc_init_array+0x40>)
 80005c6:	4c0c      	ldr	r4, [pc, #48]	; (80005f8 <__libc_init_array+0x44>)
 80005c8:	f000 f818 	bl	80005fc <_init>
 80005cc:	1b64      	subs	r4, r4, r5
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	2600      	movs	r6, #0
 80005d2:	42a6      	cmp	r6, r4
 80005d4:	d105      	bne.n	80005e2 <__libc_init_array+0x2e>
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005dc:	4798      	blx	r3
 80005de:	3601      	adds	r6, #1
 80005e0:	e7ee      	b.n	80005c0 <__libc_init_array+0xc>
 80005e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e6:	4798      	blx	r3
 80005e8:	3601      	adds	r6, #1
 80005ea:	e7f2      	b.n	80005d2 <__libc_init_array+0x1e>
 80005ec:	08000624 	.word	0x08000624
 80005f0:	08000624 	.word	0x08000624
 80005f4:	08000624 	.word	0x08000624
 80005f8:	08000628 	.word	0x08000628

080005fc <_init>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr

08000608 <_fini>:
 8000608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060a:	bf00      	nop
 800060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060e:	bc08      	pop	{r3}
 8000610:	469e      	mov	lr, r3
 8000612:	4770      	bx	lr
